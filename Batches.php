<?php
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                   ATTENTION!
 * If you see this message in your browser (Internet Explorer, Mozilla Firefox, Google Chrome, etc.)
 * this means that PHP is not properly installed on your web server. Please refer to the PHP manual
 * for more details: http://php.net/manual/install.php 
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */

    include_once dirname(__FILE__) . '/components/startup.php';
    include_once dirname(__FILE__) . '/components/application.php';
    include_once dirname(__FILE__) . '/' . 'authorization.php';


    include_once dirname(__FILE__) . '/' . 'database_engine/mysql_engine.php';
    include_once dirname(__FILE__) . '/' . 'components/page/page_includes.php';

    function GetConnectionOptions()
    {
        $result = GetGlobalConnectionOptions();
        $result['client_encoding'] = 'utf8';
        GetApplication()->GetUserAuthentication()->applyIdentityToConnectionOptions($result);
        return $result;
    }

    
    
    
    
    // OnBeforePageExecute event handler
    
    
    
    class Batches_BrewsPage extends DetailPage
    {
        protected function DoBeforeCreate()
        {
            $this->SetTitle('Brews');
            $this->SetMenuLabel('Brews');
    
            $this->dataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $this->dataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $this->dataset->AddLookupField('Batch', 'Batches', new StringField('Batch'), new IntegerField('id', false, false, false, false, 'Batch_id', 'Batch_id_Batches'), 'Batch_id_Batches');
        }
    
        protected function DoPrepare() {
    
        }
    
        protected function CreatePageNavigator()
        {
            $result = new CompositePageNavigator($this);
            
            $partitionNavigator = new PageNavigator('pnav', $this, $this->dataset);
            $partitionNavigator->SetRowsPerPage(20);
            $result->AddPageNavigator($partitionNavigator);
            
            return $result;
        }
    
        protected function CreateRssGenerator()
        {
            return null;
        }
    
        protected function setupCharts()
        {
    
        }
    
        protected function getFiltersColumns()
        {
            return array(
                new FilterColumn($this->dataset, 'id', 'id', 'Id'),
                new FilterColumn($this->dataset, 'updated', 'updated', 'Updated'),
                new FilterColumn($this->dataset, 'Batch', 'Batch_id', 'Batch'),
                new FilterColumn($this->dataset, 'Brew ID', 'Brew ID', 'Brew ID'),
                new FilterColumn($this->dataset, 'Brew', 'Brew', 'Brew'),
                new FilterColumn($this->dataset, 'Brew Date', 'Brew Date', 'Brew Date'),
                new FilterColumn($this->dataset, 'Status', 'Status', 'Status'),
                new FilterColumn($this->dataset, 'Mash Temp', 'Mash Temp', 'Mash Temp'),
                new FilterColumn($this->dataset, 'Lactic Acid', 'Lactic Acid', 'Lactic Acid'),
                new FilterColumn($this->dataset, 'Preboil Grav', 'Preboil Grav', 'Preboil Grav'),
                new FilterColumn($this->dataset, 'OG', 'OG', 'OG'),
                new FilterColumn($this->dataset, 'pH-Mash', 'pH-Mash', 'PH-Mash'),
                new FilterColumn($this->dataset, 'pH-First', 'pH-First', 'PH-First'),
                new FilterColumn($this->dataset, 'pH-Last', 'pH-Last', 'PH-Last'),
                new FilterColumn($this->dataset, 'pH-Pre boil', 'pH-Pre boil', 'PH-Pre Boil'),
                new FilterColumn($this->dataset, 'pH-KO', 'pH-KO', 'PH-KO'),
                new FilterColumn($this->dataset, 'O2 Setting', 'O2 Setting', 'O2 Setting'),
                new FilterColumn($this->dataset, 'DO-Line', 'DO-Line', 'DO-Line'),
                new FilterColumn($this->dataset, 'DO-Tank', 'DO-Tank', 'DO-Tank'),
                new FilterColumn($this->dataset, 'Notes', 'Notes', 'Notes'),
                new FilterColumn($this->dataset, 'User', 'User', 'User'),
                new FilterColumn($this->dataset, 'Bbls', 'Bbls', 'Bbls')
            );
        }
    
        protected function setupQuickFilter(QuickFilter $quickFilter, FixedKeysArray $columns)
        {
            $quickFilter
                ->addColumn($columns['id'])
                ->addColumn($columns['updated'])
                ->addColumn($columns['Batch'])
                ->addColumn($columns['Brew ID'])
                ->addColumn($columns['Brew'])
                ->addColumn($columns['Brew Date'])
                ->addColumn($columns['Status'])
                ->addColumn($columns['Mash Temp'])
                ->addColumn($columns['Lactic Acid'])
                ->addColumn($columns['Preboil Grav'])
                ->addColumn($columns['OG'])
                ->addColumn($columns['pH-Mash'])
                ->addColumn($columns['pH-First'])
                ->addColumn($columns['pH-Last'])
                ->addColumn($columns['pH-Pre boil'])
                ->addColumn($columns['pH-KO'])
                ->addColumn($columns['O2 Setting'])
                ->addColumn($columns['DO-Line'])
                ->addColumn($columns['DO-Tank'])
                ->addColumn($columns['Notes'])
                ->addColumn($columns['User'])
                ->addColumn($columns['Bbls']);
        }
    
        protected function setupColumnFilter(ColumnFilter $columnFilter)
        {
            $columnFilter
                ->setOptionsFor('updated')
                ->setOptionsFor('Batch')
                ->setOptionsFor('Brew Date');
        }
    
        protected function setupFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
            $main_editor = new TextEdit('id_edit');
            
            $filterBuilder->addColumn(
                $columns['id'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            
            $filterBuilder->addColumn(
                $columns['updated'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_Brews_Batch_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Batch', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_Brews_Batch_search');
            
            $filterBuilder->addColumn(
                $columns['Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brew_id_edit');
            $main_editor->SetMaxLength(10);
            
            $filterBuilder->addColumn(
                $columns['Brew ID'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brew_edit');
            $main_editor->SetMaxLength(85);
            
            $filterBuilder->addColumn(
                $columns['Brew'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Brew Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('status_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Status'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('mash_temp_edit');
            
            $filterBuilder->addColumn(
                $columns['Mash Temp'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('lactic_acid_edit');
            
            $filterBuilder->addColumn(
                $columns['Lactic Acid'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('preboil_grav_edit');
            
            $filterBuilder->addColumn(
                $columns['Preboil Grav'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('og_edit');
            
            $filterBuilder->addColumn(
                $columns['OG'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ph-mash_edit');
            
            $filterBuilder->addColumn(
                $columns['pH-Mash'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ph-first_edit');
            
            $filterBuilder->addColumn(
                $columns['pH-First'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ph-last_edit');
            
            $filterBuilder->addColumn(
                $columns['pH-Last'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ph-pre_boil_edit');
            
            $filterBuilder->addColumn(
                $columns['pH-Pre boil'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ph-ko_edit');
            
            $filterBuilder->addColumn(
                $columns['pH-KO'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('o2_setting_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['O2 Setting'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('do-line_edit');
            
            $filterBuilder->addColumn(
                $columns['DO-Line'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('do-tank_edit');
            
            $filterBuilder->addColumn(
                $columns['DO-Tank'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Notes');
            
            $filterBuilder->addColumn(
                $columns['Notes'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('user_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['User'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('bbls_edit');
            
            $filterBuilder->addColumn(
                $columns['Bbls'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
        }
    
        protected function AddOperationsColumns(Grid $grid)
        {
            $actions = $grid->getActions();
            $actions->setCaption($this->GetLocalizerCaptions()->GetMessageString('Actions'));
            $actions->setPosition(ActionList::POSITION_LEFT);
            
            if ($this->GetSecurityInfo()->HasViewGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('View'), OPERATION_VIEW, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
            
            if ($this->GetSecurityInfo()->HasEditGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Edit'), OPERATION_EDIT, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowEditButtonHandler', $this);
            }
            
            if ($this->deleteOperationIsAllowed()) {
                $operation = new AjaxOperation(OPERATION_DELETE,
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'),
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'), $this->dataset,
                    $this->GetModalGridDeleteHandler(), $grid
                );
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowDeleteButtonHandler', $this);
            }
            
            
            if ($this->GetSecurityInfo()->HasAddGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Copy'), OPERATION_COPY, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
        }
    
        protected function AddFieldColumns(Grid $grid, $withDetails = true)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew ID field
            //
            $column = new TextViewColumn('Brew ID', 'Brew ID', 'Brew ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew field
            //
            $column = new TextViewColumn('Brew', 'Brew', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Mash Temp field
            //
            $column = new NumberViewColumn('Mash Temp', 'Mash Temp', 'Mash Temp', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Lactic Acid field
            //
            $column = new NumberViewColumn('Lactic Acid', 'Lactic Acid', 'Lactic Acid', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Preboil Grav field
            //
            $column = new NumberViewColumn('Preboil Grav', 'Preboil Grav', 'Preboil Grav', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for OG field
            //
            $column = new NumberViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for pH-Mash field
            //
            $column = new NumberViewColumn('pH-Mash', 'pH-Mash', 'PH-Mash', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for pH-First field
            //
            $column = new NumberViewColumn('pH-First', 'pH-First', 'PH-First', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for pH-Last field
            //
            $column = new NumberViewColumn('pH-Last', 'pH-Last', 'PH-Last', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for pH-Pre boil field
            //
            $column = new NumberViewColumn('pH-Pre boil', 'pH-Pre boil', 'PH-Pre Boil', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for pH-KO field
            //
            $column = new NumberViewColumn('pH-KO', 'pH-KO', 'PH-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for O2 Setting field
            //
            $column = new TextViewColumn('O2 Setting', 'O2 Setting', 'O2 Setting', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DO-Line field
            //
            $column = new NumberViewColumn('DO-Line', 'DO-Line', 'DO-Line', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DO-Tank field
            //
            $column = new NumberViewColumn('DO-Tank', 'DO-Tank', 'DO-Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Bbls field
            //
            $column = new NumberViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
        }
    
        protected function AddSingleRecordViewColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew ID field
            //
            $column = new TextViewColumn('Brew ID', 'Brew ID', 'Brew ID', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew field
            //
            $column = new TextViewColumn('Brew', 'Brew', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Mash Temp field
            //
            $column = new NumberViewColumn('Mash Temp', 'Mash Temp', 'Mash Temp', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Lactic Acid field
            //
            $column = new NumberViewColumn('Lactic Acid', 'Lactic Acid', 'Lactic Acid', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Preboil Grav field
            //
            $column = new NumberViewColumn('Preboil Grav', 'Preboil Grav', 'Preboil Grav', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for OG field
            //
            $column = new NumberViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for pH-Mash field
            //
            $column = new NumberViewColumn('pH-Mash', 'pH-Mash', 'PH-Mash', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for pH-First field
            //
            $column = new NumberViewColumn('pH-First', 'pH-First', 'PH-First', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for pH-Last field
            //
            $column = new NumberViewColumn('pH-Last', 'pH-Last', 'PH-Last', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for pH-Pre boil field
            //
            $column = new NumberViewColumn('pH-Pre boil', 'pH-Pre boil', 'PH-Pre Boil', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for pH-KO field
            //
            $column = new NumberViewColumn('pH-KO', 'pH-KO', 'PH-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for O2 Setting field
            //
            $column = new TextViewColumn('O2 Setting', 'O2 Setting', 'O2 Setting', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DO-Line field
            //
            $column = new NumberViewColumn('DO-Line', 'DO-Line', 'DO-Line', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DO-Tank field
            //
            $column = new NumberViewColumn('DO-Tank', 'DO-Tank', 'DO-Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new NumberViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
        }
    
        protected function AddEditColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'edit_Batches_Brews_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Brew ID field
            //
            $editor = new TextEdit('brew_id_edit');
            $editor->SetMaxLength(10);
            $editColumn = new CustomEditColumn('Brew ID', 'Brew ID', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Brew Date field
            //
            $editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date', 'Brew Date', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Status field
            //
            $editor = new TextEdit('status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status', 'Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Mash Temp field
            //
            $editor = new TextEdit('mash_temp_edit');
            $editColumn = new CustomEditColumn('Mash Temp', 'Mash Temp', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Lactic Acid field
            //
            $editor = new TextEdit('lactic_acid_edit');
            $editColumn = new CustomEditColumn('Lactic Acid', 'Lactic Acid', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Preboil Grav field
            //
            $editor = new TextEdit('preboil_grav_edit');
            $editColumn = new CustomEditColumn('Preboil Grav', 'Preboil Grav', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for OG field
            //
            $editor = new TextEdit('og_edit');
            $editColumn = new CustomEditColumn('OG', 'OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for pH-Mash field
            //
            $editor = new TextEdit('ph-mash_edit');
            $editColumn = new CustomEditColumn('PH-Mash', 'pH-Mash', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for pH-First field
            //
            $editor = new TextEdit('ph-first_edit');
            $editColumn = new CustomEditColumn('PH-First', 'pH-First', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for pH-Last field
            //
            $editor = new TextEdit('ph-last_edit');
            $editColumn = new CustomEditColumn('PH-Last', 'pH-Last', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for pH-Pre boil field
            //
            $editor = new TextEdit('ph-pre_boil_edit');
            $editColumn = new CustomEditColumn('PH-Pre Boil', 'pH-Pre boil', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for pH-KO field
            //
            $editor = new TextEdit('ph-ko_edit');
            $editColumn = new CustomEditColumn('PH-KO', 'pH-KO', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for O2 Setting field
            //
            $editor = new TextEdit('o2_setting_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('O2 Setting', 'O2 Setting', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DO-Line field
            //
            $editor = new TextEdit('do-line_edit');
            $editColumn = new CustomEditColumn('DO-Line', 'DO-Line', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DO-Tank field
            //
            $editor = new TextEdit('do-tank_edit');
            $editColumn = new CustomEditColumn('DO-Tank', 'DO-Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Bbls field
            //
            $editor = new TextEdit('bbls_edit');
            $editColumn = new CustomEditColumn('Bbls', 'Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
        }
    
        protected function AddMultiEditColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'multi_edit_Batches_Brews_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew ID field
            //
            $editor = new TextEdit('brew_id_edit');
            $editor->SetMaxLength(10);
            $editColumn = new CustomEditColumn('Brew ID', 'Brew ID', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew Date field
            //
            $editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date', 'Brew Date', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Status field
            //
            $editor = new TextEdit('status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status', 'Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Mash Temp field
            //
            $editor = new TextEdit('mash_temp_edit');
            $editColumn = new CustomEditColumn('Mash Temp', 'Mash Temp', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Lactic Acid field
            //
            $editor = new TextEdit('lactic_acid_edit');
            $editColumn = new CustomEditColumn('Lactic Acid', 'Lactic Acid', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Preboil Grav field
            //
            $editor = new TextEdit('preboil_grav_edit');
            $editColumn = new CustomEditColumn('Preboil Grav', 'Preboil Grav', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for OG field
            //
            $editor = new TextEdit('og_edit');
            $editColumn = new CustomEditColumn('OG', 'OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for pH-Mash field
            //
            $editor = new TextEdit('ph-mash_edit');
            $editColumn = new CustomEditColumn('PH-Mash', 'pH-Mash', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for pH-First field
            //
            $editor = new TextEdit('ph-first_edit');
            $editColumn = new CustomEditColumn('PH-First', 'pH-First', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for pH-Last field
            //
            $editor = new TextEdit('ph-last_edit');
            $editColumn = new CustomEditColumn('PH-Last', 'pH-Last', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for pH-Pre boil field
            //
            $editor = new TextEdit('ph-pre_boil_edit');
            $editColumn = new CustomEditColumn('PH-Pre Boil', 'pH-Pre boil', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for pH-KO field
            //
            $editor = new TextEdit('ph-ko_edit');
            $editColumn = new CustomEditColumn('PH-KO', 'pH-KO', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for O2 Setting field
            //
            $editor = new TextEdit('o2_setting_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('O2 Setting', 'O2 Setting', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DO-Line field
            //
            $editor = new TextEdit('do-line_edit');
            $editColumn = new CustomEditColumn('DO-Line', 'DO-Line', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DO-Tank field
            //
            $editor = new TextEdit('do-tank_edit');
            $editColumn = new CustomEditColumn('DO-Tank', 'DO-Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Bbls field
            //
            $editor = new TextEdit('bbls_edit');
            $editColumn = new CustomEditColumn('Bbls', 'Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
        }
    
        protected function AddToggleEditColumns(Grid $grid)
        {
    
        }
    
        protected function AddInsertColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'insert_Batches_Brews_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew ID field
            //
            $editor = new TextEdit('brew_id_edit');
            $editor->SetMaxLength(10);
            $editColumn = new CustomEditColumn('Brew ID', 'Brew ID', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew Date field
            //
            $editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date', 'Brew Date', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Status field
            //
            $editor = new TextEdit('status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status', 'Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Mash Temp field
            //
            $editor = new TextEdit('mash_temp_edit');
            $editColumn = new CustomEditColumn('Mash Temp', 'Mash Temp', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Lactic Acid field
            //
            $editor = new TextEdit('lactic_acid_edit');
            $editColumn = new CustomEditColumn('Lactic Acid', 'Lactic Acid', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Preboil Grav field
            //
            $editor = new TextEdit('preboil_grav_edit');
            $editColumn = new CustomEditColumn('Preboil Grav', 'Preboil Grav', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for OG field
            //
            $editor = new TextEdit('og_edit');
            $editColumn = new CustomEditColumn('OG', 'OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for pH-Mash field
            //
            $editor = new TextEdit('ph-mash_edit');
            $editColumn = new CustomEditColumn('PH-Mash', 'pH-Mash', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for pH-First field
            //
            $editor = new TextEdit('ph-first_edit');
            $editColumn = new CustomEditColumn('PH-First', 'pH-First', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for pH-Last field
            //
            $editor = new TextEdit('ph-last_edit');
            $editColumn = new CustomEditColumn('PH-Last', 'pH-Last', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for pH-Pre boil field
            //
            $editor = new TextEdit('ph-pre_boil_edit');
            $editColumn = new CustomEditColumn('PH-Pre Boil', 'pH-Pre boil', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for pH-KO field
            //
            $editor = new TextEdit('ph-ko_edit');
            $editColumn = new CustomEditColumn('PH-KO', 'pH-KO', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for O2 Setting field
            //
            $editor = new TextEdit('o2_setting_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('O2 Setting', 'O2 Setting', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DO-Line field
            //
            $editor = new TextEdit('do-line_edit');
            $editColumn = new CustomEditColumn('DO-Line', 'DO-Line', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DO-Tank field
            //
            $editor = new TextEdit('do-tank_edit');
            $editColumn = new CustomEditColumn('DO-Tank', 'DO-Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Bbls field
            //
            $editor = new TextEdit('bbls_edit');
            $editColumn = new CustomEditColumn('Bbls', 'Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            $grid->SetShowAddButton(true && $this->GetSecurityInfo()->HasAddGrant());
        }
    
        private function AddMultiUploadColumn(Grid $grid)
        {
    
        }
    
        protected function AddPrintColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew ID field
            //
            $column = new TextViewColumn('Brew ID', 'Brew ID', 'Brew ID', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew field
            //
            $column = new TextViewColumn('Brew', 'Brew', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Mash Temp field
            //
            $column = new NumberViewColumn('Mash Temp', 'Mash Temp', 'Mash Temp', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Lactic Acid field
            //
            $column = new NumberViewColumn('Lactic Acid', 'Lactic Acid', 'Lactic Acid', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Preboil Grav field
            //
            $column = new NumberViewColumn('Preboil Grav', 'Preboil Grav', 'Preboil Grav', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for OG field
            //
            $column = new NumberViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for pH-Mash field
            //
            $column = new NumberViewColumn('pH-Mash', 'pH-Mash', 'PH-Mash', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for pH-First field
            //
            $column = new NumberViewColumn('pH-First', 'pH-First', 'PH-First', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for pH-Last field
            //
            $column = new NumberViewColumn('pH-Last', 'pH-Last', 'PH-Last', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for pH-Pre boil field
            //
            $column = new NumberViewColumn('pH-Pre boil', 'pH-Pre boil', 'PH-Pre Boil', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for pH-KO field
            //
            $column = new NumberViewColumn('pH-KO', 'pH-KO', 'PH-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for O2 Setting field
            //
            $column = new TextViewColumn('O2 Setting', 'O2 Setting', 'O2 Setting', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for DO-Line field
            //
            $column = new NumberViewColumn('DO-Line', 'DO-Line', 'DO-Line', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for DO-Tank field
            //
            $column = new NumberViewColumn('DO-Tank', 'DO-Tank', 'DO-Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new NumberViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
        }
    
        protected function AddExportColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew ID field
            //
            $column = new TextViewColumn('Brew ID', 'Brew ID', 'Brew ID', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew field
            //
            $column = new TextViewColumn('Brew', 'Brew', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Mash Temp field
            //
            $column = new NumberViewColumn('Mash Temp', 'Mash Temp', 'Mash Temp', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Lactic Acid field
            //
            $column = new NumberViewColumn('Lactic Acid', 'Lactic Acid', 'Lactic Acid', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Preboil Grav field
            //
            $column = new NumberViewColumn('Preboil Grav', 'Preboil Grav', 'Preboil Grav', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for OG field
            //
            $column = new NumberViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for pH-Mash field
            //
            $column = new NumberViewColumn('pH-Mash', 'pH-Mash', 'PH-Mash', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for pH-First field
            //
            $column = new NumberViewColumn('pH-First', 'pH-First', 'PH-First', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for pH-Last field
            //
            $column = new NumberViewColumn('pH-Last', 'pH-Last', 'PH-Last', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for pH-Pre boil field
            //
            $column = new NumberViewColumn('pH-Pre boil', 'pH-Pre boil', 'PH-Pre Boil', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for pH-KO field
            //
            $column = new NumberViewColumn('pH-KO', 'pH-KO', 'PH-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for O2 Setting field
            //
            $column = new TextViewColumn('O2 Setting', 'O2 Setting', 'O2 Setting', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for DO-Line field
            //
            $column = new NumberViewColumn('DO-Line', 'DO-Line', 'DO-Line', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for DO-Tank field
            //
            $column = new NumberViewColumn('DO-Tank', 'DO-Tank', 'DO-Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new NumberViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
        }
    
        private function AddCompareColumns(Grid $grid)
        {
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew ID field
            //
            $column = new TextViewColumn('Brew ID', 'Brew ID', 'Brew ID', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Mash Temp field
            //
            $column = new NumberViewColumn('Mash Temp', 'Mash Temp', 'Mash Temp', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Lactic Acid field
            //
            $column = new NumberViewColumn('Lactic Acid', 'Lactic Acid', 'Lactic Acid', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Preboil Grav field
            //
            $column = new NumberViewColumn('Preboil Grav', 'Preboil Grav', 'Preboil Grav', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for OG field
            //
            $column = new NumberViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for pH-Mash field
            //
            $column = new NumberViewColumn('pH-Mash', 'pH-Mash', 'PH-Mash', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for pH-First field
            //
            $column = new NumberViewColumn('pH-First', 'pH-First', 'PH-First', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for pH-Last field
            //
            $column = new NumberViewColumn('pH-Last', 'pH-Last', 'PH-Last', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for pH-Pre boil field
            //
            $column = new NumberViewColumn('pH-Pre boil', 'pH-Pre boil', 'PH-Pre Boil', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for pH-KO field
            //
            $column = new NumberViewColumn('pH-KO', 'pH-KO', 'PH-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for O2 Setting field
            //
            $column = new TextViewColumn('O2 Setting', 'O2 Setting', 'O2 Setting', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for DO-Line field
            //
            $column = new NumberViewColumn('DO-Line', 'DO-Line', 'DO-Line', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for DO-Tank field
            //
            $column = new NumberViewColumn('DO-Tank', 'DO-Tank', 'DO-Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new NumberViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
        }
    
        private function AddCompareHeaderColumns(Grid $grid)
        {
    
        }
    
        public function GetPageDirection()
        {
            return null;
        }
    
        public function isFilterConditionRequired()
        {
            return false;
        }
    
        protected function ApplyCommonColumnEditProperties(CustomEditColumn $column)
        {
            $column->SetDisplaySetToNullCheckBox(false);
            $column->SetDisplaySetToDefaultCheckBox(false);
    		$column->SetVariableContainer($this->GetColumnVariableContainer());
        }
    
        function GetCustomClientScript()
        {
            return ;
        }
        
        function GetOnPageLoadedClientScript()
        {
            return ;
        }
    
        protected function CreateGrid()
        {
            $result = new Grid($this, $this->dataset);
            if ($this->GetSecurityInfo()->HasDeleteGrant())
               $result->SetAllowDeleteSelected(true);
            else
               $result->SetAllowDeleteSelected(false);   
            
            ApplyCommonPageSettings($this, $result);
            
            $result->SetUseImagesForActions(true);
            $result->SetUseFixedHeader(false);
            $result->SetShowLineNumbers(false);
            $result->SetShowKeyColumnsImagesInHeader(false);
            $result->SetViewMode(ViewMode::TABLE);
            $result->setEnableRuntimeCustomization(true);
            $result->setAllowCompare(true);
            $this->AddCompareHeaderColumns($result);
            $this->AddCompareColumns($result);
            $result->setMultiEditAllowed($this->GetSecurityInfo()->HasEditGrant() && true);
            $result->setTableBordered(false);
            $result->setTableCondensed(false);
            
            $result->SetHighlightRowAtHover(false);
            $result->SetWidth('');
            $this->AddOperationsColumns($result);
            $this->AddFieldColumns($result);
            $this->AddSingleRecordViewColumns($result);
            $this->AddEditColumns($result);
            $this->AddMultiEditColumns($result);
            $this->AddToggleEditColumns($result);
            $this->AddInsertColumns($result);
            $this->AddPrintColumns($result);
            $this->AddExportColumns($result);
            $this->AddMultiUploadColumn($result);
    
    
            $this->SetShowPageList(true);
            $this->SetShowTopPageNavigator(true);
            $this->SetShowBottomPageNavigator(true);
            $this->setAllowedActions(array('view', 'insert', 'copy', 'edit', 'multi-edit', 'delete', 'multi-delete'));
            $this->setPrintListAvailable(true);
            $this->setPrintListRecordAvailable(false);
            $this->setPrintOneRecordAvailable(true);
            $this->setAllowPrintSelectedRecords(true);
            $this->setExportListAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportSelectedRecordsAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportListRecordAvailable(array());
            $this->setExportOneRecordAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
    
            return $result;
        }
     
        protected function setClientSideEvents(Grid $grid) {
    
        }
    
        protected function doRegisterHandlers() {
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_Brews_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_Brews_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'edit_Batches_Brews_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_Brews_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
        }
       
        protected function doCustomRenderColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderPrintColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderExportColumn($exportType, $fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomDrawRow($rowData, &$cellFontColor, &$cellFontSize, &$cellBgColor, &$cellItalicAttr, &$cellBoldAttr)
        {
    
        }
    
        protected function doExtendedCustomDrawRow($rowData, &$rowCellStyles, &$rowStyles, &$rowClasses, &$cellClasses)
        {
    
        }
    
        protected function doCustomRenderTotal($totalValue, $aggregate, $columnName, &$customText, &$handled)
        {
    
        }
    
        protected function doCustomDefaultValues(&$values, &$handled) 
        {
    
        }
    
        protected function doCustomCompareColumn($columnName, $valueA, $valueB, &$result)
        {
    
        }
    
        protected function doBeforeInsertRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeUpdateRecord($page, $oldRowData, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeDeleteRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterInsertRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterUpdateRecord($page, $oldRowData, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterDeleteRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doCustomHTMLHeader($page, &$customHtmlHeaderText)
        { 
    
        }
    
        protected function doGetCustomTemplate($type, $part, $mode, &$result, &$params)
        {
    
        }
    
        protected function doGetCustomExportOptions(Page $page, $exportType, $rowData, &$options)
        {
    
        }
    
        protected function doFileUpload($fieldName, $rowData, &$result, &$accept, $originalFileName, $originalFileExtension, $fileSize, $tempFileName)
        {
    
        }
    
        protected function doPrepareChart(Chart $chart)
        {
    
        }
    
        protected function doPrepareColumnFilter(ColumnFilter $columnFilter)
        {
    
        }
    
        protected function doPrepareFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
    
        }
    
        protected function doGetSelectionFilters(FixedKeysArray $columns, &$result)
        {
    
        }
    
        protected function doGetCustomFormLayout($mode, FixedKeysArray $columns, FormLayout $layout)
        {
    
        }
    
        protected function doGetCustomColumnGroup(FixedKeysArray $columns, ViewColumnGroup $columnGroup)
        {
    
        }
    
        protected function doPageLoaded()
        {
    
        }
    
        protected function doCalculateFields($rowData, $fieldName, &$value)
        {
    
        }
    
        protected function doGetCustomRecordPermissions(Page $page, &$usingCondition, $rowData, &$allowEdit, &$allowDelete, &$mergeWithDefault, &$handled)
        {
    
        }
    
        protected function doAddEnvironmentVariables(Page $page, &$variables)
        {
    
        }
    
    }
    
    
    
    
    // OnBeforePageExecute event handler
    
    
    
    class Batches_InventoryActivitiesPage extends DetailPage
    {
        protected function DoBeforeCreate()
        {
            $this->SetTitle('Inventory Activities');
            $this->SetMenuLabel('Inventory Activities');
    
            $this->dataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryActivities`');
            $this->dataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Inventory Item', true),
                    new StringField('Template'),
                    new StringField('Batch'),
                    new StringField('Brew'),
                    new StringField('PackageLog'),
                    new IntegerField('Order ID'),
                    new IntegerField('Committed'),
                    new DateField('Activity Date'),
                    new StringField('Vendor'),
                    new StringField('Entry Type'),
                    new StringField('Unit of Measure'),
                    new StringField('Pkg Type'),
                    new StringField('Activity'),
                    new IntegerField('Units per Pkg'),
                    new IntegerField('Activity Pkg Qty'),
                    new IntegerField('Activity Unit Qty'),
                    new IntegerField('Total Packages'),
                    new IntegerField('Total Units'),
                    new IntegerField('Price/Unit'),
                    new IntegerField('Total Price'),
                    new IntegerField('Activity Pkgs Debit'),
                    new IntegerField('Activity Pkgs Credit'),
                    new IntegerField('Activity Units Debit'),
                    new IntegerField('Activity Units Credit'),
                    new IntegerField('Committed Pkg Qty'),
                    new IntegerField('Committed Unit Qty'),
                    new StringField('User'),
                    new StringField('Notes'),
                    new StringField('Description'),
                    new StringField('Keg'),
                    new StringField('GrainYield'),
                    new StringField('Usage'),
                    new StringField('Category'),
                    new StringField('Format'),
                    new StringField('Potential Yield'),
                    new StringField('DeviceID'),
                    new StringField('DeviceName')
                )
            );
            $this->dataset->AddLookupField('Inventory Item', 'InventoryItems', new StringField('Inventory Item'), new IntegerField('id', false, false, false, false, 'Inventory Item_id', 'Inventory Item_id_InventoryItems'), 'Inventory Item_id_InventoryItems');
            $this->dataset->AddLookupField('Template', 'Templates', new StringField('Template'), new IntegerField('id', false, false, false, false, 'Template_id', 'Template_id_Templates'), 'Template_id_Templates');
            $this->dataset->AddLookupField('Batch', 'Batches', new StringField('Batch'), new IntegerField('id', false, false, false, false, 'Batch_id', 'Batch_id_Batches'), 'Batch_id_Batches');
            $this->dataset->AddLookupField('Brew', 'Brews', new StringField('Brew'), new IntegerField('id', false, false, false, false, 'Brew_id', 'Brew_id_Brews'), 'Brew_id_Brews');
        }
    
        protected function DoPrepare() {
    
        }
    
        protected function CreatePageNavigator()
        {
            $result = new CompositePageNavigator($this);
            
            $partitionNavigator = new PageNavigator('pnav', $this, $this->dataset);
            $partitionNavigator->SetRowsPerPage(20);
            $result->AddPageNavigator($partitionNavigator);
            
            return $result;
        }
    
        protected function CreateRssGenerator()
        {
            return null;
        }
    
        protected function setupCharts()
        {
    
        }
    
        protected function getFiltersColumns()
        {
            return array(
                new FilterColumn($this->dataset, 'id', 'id', 'Id'),
                new FilterColumn($this->dataset, 'updated', 'updated', 'Updated'),
                new FilterColumn($this->dataset, 'Inventory Item', 'Inventory Item_id', 'Inventory Item'),
                new FilterColumn($this->dataset, 'Template', 'Template_id', 'Template'),
                new FilterColumn($this->dataset, 'Batch', 'Batch_id', 'Batch'),
                new FilterColumn($this->dataset, 'Brew', 'Brew_id', 'Brew'),
                new FilterColumn($this->dataset, 'PackageLog', 'PackageLog', 'Package Log'),
                new FilterColumn($this->dataset, 'Order ID', 'Order ID', 'Order ID'),
                new FilterColumn($this->dataset, 'Committed', 'Committed', 'Committed'),
                new FilterColumn($this->dataset, 'Activity Date', 'Activity Date', 'Activity Date'),
                new FilterColumn($this->dataset, 'Vendor', 'Vendor', 'Vendor'),
                new FilterColumn($this->dataset, 'Entry Type', 'Entry Type', 'Entry Type'),
                new FilterColumn($this->dataset, 'Unit of Measure', 'Unit of Measure', 'Unit Of Measure'),
                new FilterColumn($this->dataset, 'Pkg Type', 'Pkg Type', 'Pkg Type'),
                new FilterColumn($this->dataset, 'Activity', 'Activity', 'Activity'),
                new FilterColumn($this->dataset, 'Units per Pkg', 'Units per Pkg', 'Units Per Pkg'),
                new FilterColumn($this->dataset, 'Activity Pkg Qty', 'Activity Pkg Qty', 'Activity Pkg Qty'),
                new FilterColumn($this->dataset, 'Activity Unit Qty', 'Activity Unit Qty', 'Activity Unit Qty'),
                new FilterColumn($this->dataset, 'Total Packages', 'Total Packages', 'Total Packages'),
                new FilterColumn($this->dataset, 'Total Units', 'Total Units', 'Total Units'),
                new FilterColumn($this->dataset, 'Price/Unit', 'Price/Unit', 'Price/Unit'),
                new FilterColumn($this->dataset, 'Total Price', 'Total Price', 'Total Price'),
                new FilterColumn($this->dataset, 'Activity Pkgs Debit', 'Activity Pkgs Debit', 'Activity Pkgs Debit'),
                new FilterColumn($this->dataset, 'Activity Pkgs Credit', 'Activity Pkgs Credit', 'Activity Pkgs Credit'),
                new FilterColumn($this->dataset, 'Activity Units Debit', 'Activity Units Debit', 'Activity Units Debit'),
                new FilterColumn($this->dataset, 'Activity Units Credit', 'Activity Units Credit', 'Activity Units Credit'),
                new FilterColumn($this->dataset, 'Committed Pkg Qty', 'Committed Pkg Qty', 'Committed Pkg Qty'),
                new FilterColumn($this->dataset, 'Committed Unit Qty', 'Committed Unit Qty', 'Committed Unit Qty'),
                new FilterColumn($this->dataset, 'User', 'User', 'User'),
                new FilterColumn($this->dataset, 'Notes', 'Notes', 'Notes'),
                new FilterColumn($this->dataset, 'Description', 'Description', 'Description'),
                new FilterColumn($this->dataset, 'Keg', 'Keg', 'Keg'),
                new FilterColumn($this->dataset, 'GrainYield', 'GrainYield', 'Grain Yield'),
                new FilterColumn($this->dataset, 'Usage', 'Usage', 'Usage'),
                new FilterColumn($this->dataset, 'Category', 'Category', 'Category'),
                new FilterColumn($this->dataset, 'Format', 'Format', 'Format'),
                new FilterColumn($this->dataset, 'Potential Yield', 'Potential Yield', 'Potential Yield'),
                new FilterColumn($this->dataset, 'DeviceID', 'DeviceID', 'Device ID'),
                new FilterColumn($this->dataset, 'DeviceName', 'DeviceName', 'Device Name')
            );
        }
    
        protected function setupQuickFilter(QuickFilter $quickFilter, FixedKeysArray $columns)
        {
            $quickFilter
                ->addColumn($columns['id'])
                ->addColumn($columns['updated'])
                ->addColumn($columns['Inventory Item'])
                ->addColumn($columns['Template'])
                ->addColumn($columns['Batch'])
                ->addColumn($columns['Brew'])
                ->addColumn($columns['PackageLog'])
                ->addColumn($columns['Order ID'])
                ->addColumn($columns['Committed'])
                ->addColumn($columns['Activity Date'])
                ->addColumn($columns['Vendor'])
                ->addColumn($columns['Entry Type'])
                ->addColumn($columns['Unit of Measure'])
                ->addColumn($columns['Pkg Type'])
                ->addColumn($columns['Activity'])
                ->addColumn($columns['Units per Pkg'])
                ->addColumn($columns['Activity Pkg Qty'])
                ->addColumn($columns['Activity Unit Qty'])
                ->addColumn($columns['Total Packages'])
                ->addColumn($columns['Total Units'])
                ->addColumn($columns['Price/Unit'])
                ->addColumn($columns['Total Price'])
                ->addColumn($columns['Activity Pkgs Debit'])
                ->addColumn($columns['Activity Pkgs Credit'])
                ->addColumn($columns['Activity Units Debit'])
                ->addColumn($columns['Activity Units Credit'])
                ->addColumn($columns['Committed Pkg Qty'])
                ->addColumn($columns['Committed Unit Qty'])
                ->addColumn($columns['User'])
                ->addColumn($columns['Notes'])
                ->addColumn($columns['Description'])
                ->addColumn($columns['Keg'])
                ->addColumn($columns['GrainYield'])
                ->addColumn($columns['Usage'])
                ->addColumn($columns['Category'])
                ->addColumn($columns['Format'])
                ->addColumn($columns['Potential Yield'])
                ->addColumn($columns['DeviceID'])
                ->addColumn($columns['DeviceName']);
        }
    
        protected function setupColumnFilter(ColumnFilter $columnFilter)
        {
            $columnFilter
                ->setOptionsFor('updated')
                ->setOptionsFor('Inventory Item')
                ->setOptionsFor('Template')
                ->setOptionsFor('Batch')
                ->setOptionsFor('Brew')
                ->setOptionsFor('Activity Date');
        }
    
        protected function setupFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
            $main_editor = new TextEdit('id_edit');
            
            $filterBuilder->addColumn(
                $columns['id'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            
            $filterBuilder->addColumn(
                $columns['updated'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('inventory_item_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Inventory Item_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Inventory Item', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Inventory Item_search');
            
            $filterBuilder->addColumn(
                $columns['Inventory Item'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Template_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Template', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Template_search');
            
            $filterBuilder->addColumn(
                $columns['Template'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Batch_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Batch', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Batch_search');
            
            $filterBuilder->addColumn(
                $columns['Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('brew_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Brew_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Brew', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_InventoryActivities_Brew_search');
            
            $filterBuilder->addColumn(
                $columns['Brew'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('PackageLog');
            
            $filterBuilder->addColumn(
                $columns['PackageLog'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('order_id_edit');
            
            $filterBuilder->addColumn(
                $columns['Order ID'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('committed_edit');
            
            $filterBuilder->addColumn(
                $columns['Committed'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('activity_date_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Activity Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Vendor');
            
            $filterBuilder->addColumn(
                $columns['Vendor'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Entry Type');
            
            $filterBuilder->addColumn(
                $columns['Entry Type'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Unit of Measure');
            
            $filterBuilder->addColumn(
                $columns['Unit of Measure'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Pkg Type');
            
            $filterBuilder->addColumn(
                $columns['Pkg Type'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Activity');
            
            $filterBuilder->addColumn(
                $columns['Activity'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('units_per_pkg_edit');
            
            $filterBuilder->addColumn(
                $columns['Units per Pkg'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('activity_pkg_qty_edit');
            
            $filterBuilder->addColumn(
                $columns['Activity Pkg Qty'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('activity_unit_qty_edit');
            
            $filterBuilder->addColumn(
                $columns['Activity Unit Qty'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('total_packages_edit');
            
            $filterBuilder->addColumn(
                $columns['Total Packages'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('total_units_edit');
            
            $filterBuilder->addColumn(
                $columns['Total Units'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('price/unit_edit');
            
            $filterBuilder->addColumn(
                $columns['Price/Unit'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('total_price_edit');
            
            $filterBuilder->addColumn(
                $columns['Total Price'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('activity_pkgs_debit_edit');
            
            $filterBuilder->addColumn(
                $columns['Activity Pkgs Debit'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('activity_pkgs_credit_edit');
            
            $filterBuilder->addColumn(
                $columns['Activity Pkgs Credit'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('activity_units_debit_edit');
            
            $filterBuilder->addColumn(
                $columns['Activity Units Debit'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('activity_units_credit_edit');
            
            $filterBuilder->addColumn(
                $columns['Activity Units Credit'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('committed_pkg_qty_edit');
            
            $filterBuilder->addColumn(
                $columns['Committed Pkg Qty'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('committed_unit_qty_edit');
            
            $filterBuilder->addColumn(
                $columns['Committed Unit Qty'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('User');
            
            $filterBuilder->addColumn(
                $columns['User'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Notes');
            
            $filterBuilder->addColumn(
                $columns['Notes'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Description');
            
            $filterBuilder->addColumn(
                $columns['Description'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Keg');
            
            $filterBuilder->addColumn(
                $columns['Keg'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('GrainYield');
            
            $filterBuilder->addColumn(
                $columns['GrainYield'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Usage');
            
            $filterBuilder->addColumn(
                $columns['Usage'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Category');
            
            $filterBuilder->addColumn(
                $columns['Category'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Format');
            
            $filterBuilder->addColumn(
                $columns['Format'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Potential Yield');
            
            $filterBuilder->addColumn(
                $columns['Potential Yield'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('DeviceID');
            
            $filterBuilder->addColumn(
                $columns['DeviceID'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('DeviceName');
            
            $filterBuilder->addColumn(
                $columns['DeviceName'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
        }
    
        protected function AddOperationsColumns(Grid $grid)
        {
            $actions = $grid->getActions();
            $actions->setCaption($this->GetLocalizerCaptions()->GetMessageString('Actions'));
            $actions->setPosition(ActionList::POSITION_LEFT);
            
            if ($this->GetSecurityInfo()->HasViewGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('View'), OPERATION_VIEW, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
            
            if ($this->GetSecurityInfo()->HasEditGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Edit'), OPERATION_EDIT, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowEditButtonHandler', $this);
            }
            
            if ($this->deleteOperationIsAllowed()) {
                $operation = new AjaxOperation(OPERATION_DELETE,
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'),
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'), $this->dataset,
                    $this->GetModalGridDeleteHandler(), $grid
                );
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowDeleteButtonHandler', $this);
            }
            
            
            if ($this->GetSecurityInfo()->HasAddGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Copy'), OPERATION_COPY, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
        }
    
        protected function AddFieldColumns(Grid $grid, $withDetails = true)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Inventory Item', 'Inventory Item_id', 'Inventory Item', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Brew', 'Brew_id', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for PackageLog field
            //
            $column = new TextViewColumn('PackageLog', 'PackageLog', 'Package Log', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Order ID field
            //
            $column = new NumberViewColumn('Order ID', 'Order ID', 'Order ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Committed field
            //
            $column = new NumberViewColumn('Committed', 'Committed', 'Committed', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Date field
            //
            $column = new DateTimeViewColumn('Activity Date', 'Activity Date', 'Activity Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Vendor field
            //
            $column = new TextViewColumn('Vendor', 'Vendor', 'Vendor', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Entry Type field
            //
            $column = new TextViewColumn('Entry Type', 'Entry Type', 'Entry Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Unit of Measure field
            //
            $column = new TextViewColumn('Unit of Measure', 'Unit of Measure', 'Unit Of Measure', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Pkg Type field
            //
            $column = new TextViewColumn('Pkg Type', 'Pkg Type', 'Pkg Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity field
            //
            $column = new TextViewColumn('Activity', 'Activity', 'Activity', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Units per Pkg field
            //
            $column = new NumberViewColumn('Units per Pkg', 'Units per Pkg', 'Units Per Pkg', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Pkg Qty field
            //
            $column = new NumberViewColumn('Activity Pkg Qty', 'Activity Pkg Qty', 'Activity Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Unit Qty field
            //
            $column = new NumberViewColumn('Activity Unit Qty', 'Activity Unit Qty', 'Activity Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Total Packages field
            //
            $column = new NumberViewColumn('Total Packages', 'Total Packages', 'Total Packages', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Total Units field
            //
            $column = new NumberViewColumn('Total Units', 'Total Units', 'Total Units', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Price/Unit field
            //
            $column = new NumberViewColumn('Price/Unit', 'Price/Unit', 'Price/Unit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Total Price field
            //
            $column = new NumberViewColumn('Total Price', 'Total Price', 'Total Price', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Pkgs Debit field
            //
            $column = new NumberViewColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', 'Activity Pkgs Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Pkgs Credit field
            //
            $column = new NumberViewColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', 'Activity Pkgs Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Units Debit field
            //
            $column = new NumberViewColumn('Activity Units Debit', 'Activity Units Debit', 'Activity Units Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Activity Units Credit field
            //
            $column = new NumberViewColumn('Activity Units Credit', 'Activity Units Credit', 'Activity Units Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Committed Pkg Qty field
            //
            $column = new NumberViewColumn('Committed Pkg Qty', 'Committed Pkg Qty', 'Committed Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Committed Unit Qty field
            //
            $column = new NumberViewColumn('Committed Unit Qty', 'Committed Unit Qty', 'Committed Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Description field
            //
            $column = new TextViewColumn('Description', 'Description', 'Description', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Keg field
            //
            $column = new TextViewColumn('Keg', 'Keg', 'Keg', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for GrainYield field
            //
            $column = new TextViewColumn('GrainYield', 'GrainYield', 'Grain Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Usage field
            //
            $column = new TextViewColumn('Usage', 'Usage', 'Usage', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Category field
            //
            $column = new TextViewColumn('Category', 'Category', 'Category', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Format field
            //
            $column = new TextViewColumn('Format', 'Format', 'Format', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Potential Yield field
            //
            $column = new TextViewColumn('Potential Yield', 'Potential Yield', 'Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DeviceID field
            //
            $column = new TextViewColumn('DeviceID', 'DeviceID', 'Device ID', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DeviceName field
            //
            $column = new TextViewColumn('DeviceName', 'DeviceName', 'Device Name', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
        }
    
        protected function AddSingleRecordViewColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Inventory Item', 'Inventory Item_id', 'Inventory Item', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Brew', 'Brew_id', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for PackageLog field
            //
            $column = new TextViewColumn('PackageLog', 'PackageLog', 'Package Log', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Order ID field
            //
            $column = new NumberViewColumn('Order ID', 'Order ID', 'Order ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Committed field
            //
            $column = new NumberViewColumn('Committed', 'Committed', 'Committed', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Date field
            //
            $column = new DateTimeViewColumn('Activity Date', 'Activity Date', 'Activity Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Vendor field
            //
            $column = new TextViewColumn('Vendor', 'Vendor', 'Vendor', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Entry Type field
            //
            $column = new TextViewColumn('Entry Type', 'Entry Type', 'Entry Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Unit of Measure field
            //
            $column = new TextViewColumn('Unit of Measure', 'Unit of Measure', 'Unit Of Measure', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Pkg Type field
            //
            $column = new TextViewColumn('Pkg Type', 'Pkg Type', 'Pkg Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity field
            //
            $column = new TextViewColumn('Activity', 'Activity', 'Activity', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Units per Pkg field
            //
            $column = new NumberViewColumn('Units per Pkg', 'Units per Pkg', 'Units Per Pkg', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Pkg Qty field
            //
            $column = new NumberViewColumn('Activity Pkg Qty', 'Activity Pkg Qty', 'Activity Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Unit Qty field
            //
            $column = new NumberViewColumn('Activity Unit Qty', 'Activity Unit Qty', 'Activity Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Total Packages field
            //
            $column = new NumberViewColumn('Total Packages', 'Total Packages', 'Total Packages', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Total Units field
            //
            $column = new NumberViewColumn('Total Units', 'Total Units', 'Total Units', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Price/Unit field
            //
            $column = new NumberViewColumn('Price/Unit', 'Price/Unit', 'Price/Unit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Total Price field
            //
            $column = new NumberViewColumn('Total Price', 'Total Price', 'Total Price', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Pkgs Debit field
            //
            $column = new NumberViewColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', 'Activity Pkgs Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Pkgs Credit field
            //
            $column = new NumberViewColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', 'Activity Pkgs Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Units Debit field
            //
            $column = new NumberViewColumn('Activity Units Debit', 'Activity Units Debit', 'Activity Units Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Activity Units Credit field
            //
            $column = new NumberViewColumn('Activity Units Credit', 'Activity Units Credit', 'Activity Units Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Committed Pkg Qty field
            //
            $column = new NumberViewColumn('Committed Pkg Qty', 'Committed Pkg Qty', 'Committed Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Committed Unit Qty field
            //
            $column = new NumberViewColumn('Committed Unit Qty', 'Committed Unit Qty', 'Committed Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Description field
            //
            $column = new TextViewColumn('Description', 'Description', 'Description', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Keg field
            //
            $column = new TextViewColumn('Keg', 'Keg', 'Keg', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for GrainYield field
            //
            $column = new TextViewColumn('GrainYield', 'GrainYield', 'Grain Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Usage field
            //
            $column = new TextViewColumn('Usage', 'Usage', 'Usage', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Category field
            //
            $column = new TextViewColumn('Category', 'Category', 'Category', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Format field
            //
            $column = new TextViewColumn('Format', 'Format', 'Format', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Potential Yield field
            //
            $column = new TextViewColumn('Potential Yield', 'Potential Yield', 'Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DeviceID field
            //
            $column = new TextViewColumn('DeviceID', 'DeviceID', 'Device ID', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DeviceName field
            //
            $column = new TextViewColumn('DeviceName', 'DeviceName', 'Device Name', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
        }
    
        protected function AddEditColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Inventory Item field
            //
            $editor = new DynamicCombobox('inventory_item_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Inventory Item', 'Inventory Item', 'Inventory Item_id', 'edit_Batches_InventoryActivities_Inventory Item_search', $editor, $this->dataset, $lookupDataset, 'Inventory Item', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Template field
            //
            $editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Template', 'Template', 'Template_id', 'edit_Batches_InventoryActivities_Template_search', $editor, $this->dataset, $lookupDataset, 'Template', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'edit_Batches_InventoryActivities_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Brew field
            //
            $editor = new DynamicCombobox('brew_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Brew', 'Brew', 'Brew_id', 'edit_Batches_InventoryActivities_Brew_search', $editor, $this->dataset, $lookupDataset, 'Brew', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for PackageLog field
            //
            $editor = new TextAreaEdit('packagelog_edit', 50, 8);
            $editColumn = new CustomEditColumn('Package Log', 'PackageLog', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Order ID field
            //
            $editor = new TextEdit('order_id_edit');
            $editColumn = new CustomEditColumn('Order ID', 'Order ID', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Committed field
            //
            $editor = new TextEdit('committed_edit');
            $editColumn = new CustomEditColumn('Committed', 'Committed', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Date field
            //
            $editor = new DateTimeEdit('activity_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Activity Date', 'Activity Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Vendor field
            //
            $editor = new TextAreaEdit('vendor_edit', 50, 8);
            $editColumn = new CustomEditColumn('Vendor', 'Vendor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Entry Type field
            //
            $editor = new TextAreaEdit('entry_type_edit', 50, 8);
            $editColumn = new CustomEditColumn('Entry Type', 'Entry Type', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Unit of Measure field
            //
            $editor = new TextAreaEdit('unit_of_measure_edit', 50, 8);
            $editColumn = new CustomEditColumn('Unit Of Measure', 'Unit of Measure', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Pkg Type field
            //
            $editor = new TextAreaEdit('pkg_type_edit', 50, 8);
            $editColumn = new CustomEditColumn('Pkg Type', 'Pkg Type', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity field
            //
            $editor = new TextAreaEdit('activity_edit', 50, 8);
            $editColumn = new CustomEditColumn('Activity', 'Activity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Units per Pkg field
            //
            $editor = new TextEdit('units_per_pkg_edit');
            $editColumn = new CustomEditColumn('Units Per Pkg', 'Units per Pkg', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Pkg Qty field
            //
            $editor = new TextEdit('activity_pkg_qty_edit');
            $editColumn = new CustomEditColumn('Activity Pkg Qty', 'Activity Pkg Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Unit Qty field
            //
            $editor = new TextEdit('activity_unit_qty_edit');
            $editColumn = new CustomEditColumn('Activity Unit Qty', 'Activity Unit Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Total Packages field
            //
            $editor = new TextEdit('total_packages_edit');
            $editColumn = new CustomEditColumn('Total Packages', 'Total Packages', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Total Units field
            //
            $editor = new TextEdit('total_units_edit');
            $editColumn = new CustomEditColumn('Total Units', 'Total Units', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Price/Unit field
            //
            $editor = new TextEdit('price/unit_edit');
            $editColumn = new CustomEditColumn('Price/Unit', 'Price/Unit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Total Price field
            //
            $editor = new TextEdit('total_price_edit');
            $editColumn = new CustomEditColumn('Total Price', 'Total Price', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Pkgs Debit field
            //
            $editor = new TextEdit('activity_pkgs_debit_edit');
            $editColumn = new CustomEditColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Pkgs Credit field
            //
            $editor = new TextEdit('activity_pkgs_credit_edit');
            $editColumn = new CustomEditColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Units Debit field
            //
            $editor = new TextEdit('activity_units_debit_edit');
            $editColumn = new CustomEditColumn('Activity Units Debit', 'Activity Units Debit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Activity Units Credit field
            //
            $editor = new TextEdit('activity_units_credit_edit');
            $editColumn = new CustomEditColumn('Activity Units Credit', 'Activity Units Credit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Committed Pkg Qty field
            //
            $editor = new TextEdit('committed_pkg_qty_edit');
            $editColumn = new CustomEditColumn('Committed Pkg Qty', 'Committed Pkg Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Committed Unit Qty field
            //
            $editor = new TextEdit('committed_unit_qty_edit');
            $editColumn = new CustomEditColumn('Committed Unit Qty', 'Committed Unit Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextAreaEdit('user_edit', 50, 8);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Description field
            //
            $editor = new TextAreaEdit('description_edit', 50, 8);
            $editColumn = new CustomEditColumn('Description', 'Description', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Keg field
            //
            $editor = new TextAreaEdit('keg_edit', 50, 8);
            $editColumn = new CustomEditColumn('Keg', 'Keg', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for GrainYield field
            //
            $editor = new TextAreaEdit('grainyield_edit', 50, 8);
            $editColumn = new CustomEditColumn('Grain Yield', 'GrainYield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Usage field
            //
            $editor = new TextAreaEdit('usage_edit', 50, 8);
            $editColumn = new CustomEditColumn('Usage', 'Usage', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Category field
            //
            $editor = new TextAreaEdit('category_edit', 50, 8);
            $editColumn = new CustomEditColumn('Category', 'Category', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Format field
            //
            $editor = new TextAreaEdit('format_edit', 50, 8);
            $editColumn = new CustomEditColumn('Format', 'Format', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Potential Yield field
            //
            $editor = new TextAreaEdit('potential_yield_edit', 50, 8);
            $editColumn = new CustomEditColumn('Potential Yield', 'Potential Yield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DeviceID field
            //
            $editor = new TextAreaEdit('deviceid_edit', 50, 8);
            $editColumn = new CustomEditColumn('Device ID', 'DeviceID', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DeviceName field
            //
            $editor = new TextAreaEdit('devicename_edit', 50, 8);
            $editColumn = new CustomEditColumn('Device Name', 'DeviceName', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
        }
    
        protected function AddMultiEditColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Inventory Item field
            //
            $editor = new DynamicCombobox('inventory_item_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Inventory Item', 'Inventory Item', 'Inventory Item_id', 'multi_edit_Batches_InventoryActivities_Inventory Item_search', $editor, $this->dataset, $lookupDataset, 'Inventory Item', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Template field
            //
            $editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Template', 'Template', 'Template_id', 'multi_edit_Batches_InventoryActivities_Template_search', $editor, $this->dataset, $lookupDataset, 'Template', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'multi_edit_Batches_InventoryActivities_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew field
            //
            $editor = new DynamicCombobox('brew_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Brew', 'Brew', 'Brew_id', 'multi_edit_Batches_InventoryActivities_Brew_search', $editor, $this->dataset, $lookupDataset, 'Brew', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for PackageLog field
            //
            $editor = new TextAreaEdit('packagelog_edit', 50, 8);
            $editColumn = new CustomEditColumn('Package Log', 'PackageLog', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Order ID field
            //
            $editor = new TextEdit('order_id_edit');
            $editColumn = new CustomEditColumn('Order ID', 'Order ID', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Committed field
            //
            $editor = new TextEdit('committed_edit');
            $editColumn = new CustomEditColumn('Committed', 'Committed', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Date field
            //
            $editor = new DateTimeEdit('activity_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Activity Date', 'Activity Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Vendor field
            //
            $editor = new TextAreaEdit('vendor_edit', 50, 8);
            $editColumn = new CustomEditColumn('Vendor', 'Vendor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Entry Type field
            //
            $editor = new TextAreaEdit('entry_type_edit', 50, 8);
            $editColumn = new CustomEditColumn('Entry Type', 'Entry Type', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Unit of Measure field
            //
            $editor = new TextAreaEdit('unit_of_measure_edit', 50, 8);
            $editColumn = new CustomEditColumn('Unit Of Measure', 'Unit of Measure', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Pkg Type field
            //
            $editor = new TextAreaEdit('pkg_type_edit', 50, 8);
            $editColumn = new CustomEditColumn('Pkg Type', 'Pkg Type', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity field
            //
            $editor = new TextAreaEdit('activity_edit', 50, 8);
            $editColumn = new CustomEditColumn('Activity', 'Activity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Units per Pkg field
            //
            $editor = new TextEdit('units_per_pkg_edit');
            $editColumn = new CustomEditColumn('Units Per Pkg', 'Units per Pkg', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Pkg Qty field
            //
            $editor = new TextEdit('activity_pkg_qty_edit');
            $editColumn = new CustomEditColumn('Activity Pkg Qty', 'Activity Pkg Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Unit Qty field
            //
            $editor = new TextEdit('activity_unit_qty_edit');
            $editColumn = new CustomEditColumn('Activity Unit Qty', 'Activity Unit Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Total Packages field
            //
            $editor = new TextEdit('total_packages_edit');
            $editColumn = new CustomEditColumn('Total Packages', 'Total Packages', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Total Units field
            //
            $editor = new TextEdit('total_units_edit');
            $editColumn = new CustomEditColumn('Total Units', 'Total Units', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Price/Unit field
            //
            $editor = new TextEdit('price/unit_edit');
            $editColumn = new CustomEditColumn('Price/Unit', 'Price/Unit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Total Price field
            //
            $editor = new TextEdit('total_price_edit');
            $editColumn = new CustomEditColumn('Total Price', 'Total Price', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Pkgs Debit field
            //
            $editor = new TextEdit('activity_pkgs_debit_edit');
            $editColumn = new CustomEditColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Pkgs Credit field
            //
            $editor = new TextEdit('activity_pkgs_credit_edit');
            $editColumn = new CustomEditColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Units Debit field
            //
            $editor = new TextEdit('activity_units_debit_edit');
            $editColumn = new CustomEditColumn('Activity Units Debit', 'Activity Units Debit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Activity Units Credit field
            //
            $editor = new TextEdit('activity_units_credit_edit');
            $editColumn = new CustomEditColumn('Activity Units Credit', 'Activity Units Credit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Committed Pkg Qty field
            //
            $editor = new TextEdit('committed_pkg_qty_edit');
            $editColumn = new CustomEditColumn('Committed Pkg Qty', 'Committed Pkg Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Committed Unit Qty field
            //
            $editor = new TextEdit('committed_unit_qty_edit');
            $editColumn = new CustomEditColumn('Committed Unit Qty', 'Committed Unit Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextAreaEdit('user_edit', 50, 8);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Description field
            //
            $editor = new TextAreaEdit('description_edit', 50, 8);
            $editColumn = new CustomEditColumn('Description', 'Description', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Keg field
            //
            $editor = new TextAreaEdit('keg_edit', 50, 8);
            $editColumn = new CustomEditColumn('Keg', 'Keg', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for GrainYield field
            //
            $editor = new TextAreaEdit('grainyield_edit', 50, 8);
            $editColumn = new CustomEditColumn('Grain Yield', 'GrainYield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Usage field
            //
            $editor = new TextAreaEdit('usage_edit', 50, 8);
            $editColumn = new CustomEditColumn('Usage', 'Usage', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Category field
            //
            $editor = new TextAreaEdit('category_edit', 50, 8);
            $editColumn = new CustomEditColumn('Category', 'Category', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Format field
            //
            $editor = new TextAreaEdit('format_edit', 50, 8);
            $editColumn = new CustomEditColumn('Format', 'Format', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Potential Yield field
            //
            $editor = new TextAreaEdit('potential_yield_edit', 50, 8);
            $editColumn = new CustomEditColumn('Potential Yield', 'Potential Yield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DeviceID field
            //
            $editor = new TextAreaEdit('deviceid_edit', 50, 8);
            $editColumn = new CustomEditColumn('Device ID', 'DeviceID', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DeviceName field
            //
            $editor = new TextAreaEdit('devicename_edit', 50, 8);
            $editColumn = new CustomEditColumn('Device Name', 'DeviceName', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
        }
    
        protected function AddToggleEditColumns(Grid $grid)
        {
    
        }
    
        protected function AddInsertColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Inventory Item field
            //
            $editor = new DynamicCombobox('inventory_item_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Inventory Item', 'Inventory Item', 'Inventory Item_id', 'insert_Batches_InventoryActivities_Inventory Item_search', $editor, $this->dataset, $lookupDataset, 'Inventory Item', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Template field
            //
            $editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Template', 'Template', 'Template_id', 'insert_Batches_InventoryActivities_Template_search', $editor, $this->dataset, $lookupDataset, 'Template', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'insert_Batches_InventoryActivities_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew field
            //
            $editor = new DynamicCombobox('brew_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Brew', 'Brew', 'Brew_id', 'insert_Batches_InventoryActivities_Brew_search', $editor, $this->dataset, $lookupDataset, 'Brew', 'id', '');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for PackageLog field
            //
            $editor = new TextAreaEdit('packagelog_edit', 50, 8);
            $editColumn = new CustomEditColumn('Package Log', 'PackageLog', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Order ID field
            //
            $editor = new TextEdit('order_id_edit');
            $editColumn = new CustomEditColumn('Order ID', 'Order ID', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Committed field
            //
            $editor = new TextEdit('committed_edit');
            $editColumn = new CustomEditColumn('Committed', 'Committed', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Date field
            //
            $editor = new DateTimeEdit('activity_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Activity Date', 'Activity Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Vendor field
            //
            $editor = new TextAreaEdit('vendor_edit', 50, 8);
            $editColumn = new CustomEditColumn('Vendor', 'Vendor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Entry Type field
            //
            $editor = new TextAreaEdit('entry_type_edit', 50, 8);
            $editColumn = new CustomEditColumn('Entry Type', 'Entry Type', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Unit of Measure field
            //
            $editor = new TextAreaEdit('unit_of_measure_edit', 50, 8);
            $editColumn = new CustomEditColumn('Unit Of Measure', 'Unit of Measure', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Pkg Type field
            //
            $editor = new TextAreaEdit('pkg_type_edit', 50, 8);
            $editColumn = new CustomEditColumn('Pkg Type', 'Pkg Type', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity field
            //
            $editor = new TextAreaEdit('activity_edit', 50, 8);
            $editColumn = new CustomEditColumn('Activity', 'Activity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Units per Pkg field
            //
            $editor = new TextEdit('units_per_pkg_edit');
            $editColumn = new CustomEditColumn('Units Per Pkg', 'Units per Pkg', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Pkg Qty field
            //
            $editor = new TextEdit('activity_pkg_qty_edit');
            $editColumn = new CustomEditColumn('Activity Pkg Qty', 'Activity Pkg Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Unit Qty field
            //
            $editor = new TextEdit('activity_unit_qty_edit');
            $editColumn = new CustomEditColumn('Activity Unit Qty', 'Activity Unit Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Total Packages field
            //
            $editor = new TextEdit('total_packages_edit');
            $editColumn = new CustomEditColumn('Total Packages', 'Total Packages', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Total Units field
            //
            $editor = new TextEdit('total_units_edit');
            $editColumn = new CustomEditColumn('Total Units', 'Total Units', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Price/Unit field
            //
            $editor = new TextEdit('price/unit_edit');
            $editColumn = new CustomEditColumn('Price/Unit', 'Price/Unit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Total Price field
            //
            $editor = new TextEdit('total_price_edit');
            $editColumn = new CustomEditColumn('Total Price', 'Total Price', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Pkgs Debit field
            //
            $editor = new TextEdit('activity_pkgs_debit_edit');
            $editColumn = new CustomEditColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Pkgs Credit field
            //
            $editor = new TextEdit('activity_pkgs_credit_edit');
            $editColumn = new CustomEditColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Units Debit field
            //
            $editor = new TextEdit('activity_units_debit_edit');
            $editColumn = new CustomEditColumn('Activity Units Debit', 'Activity Units Debit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Activity Units Credit field
            //
            $editor = new TextEdit('activity_units_credit_edit');
            $editColumn = new CustomEditColumn('Activity Units Credit', 'Activity Units Credit', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Committed Pkg Qty field
            //
            $editor = new TextEdit('committed_pkg_qty_edit');
            $editColumn = new CustomEditColumn('Committed Pkg Qty', 'Committed Pkg Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Committed Unit Qty field
            //
            $editor = new TextEdit('committed_unit_qty_edit');
            $editColumn = new CustomEditColumn('Committed Unit Qty', 'Committed Unit Qty', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextAreaEdit('user_edit', 50, 8);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Description field
            //
            $editor = new TextAreaEdit('description_edit', 50, 8);
            $editColumn = new CustomEditColumn('Description', 'Description', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Keg field
            //
            $editor = new TextAreaEdit('keg_edit', 50, 8);
            $editColumn = new CustomEditColumn('Keg', 'Keg', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for GrainYield field
            //
            $editor = new TextAreaEdit('grainyield_edit', 50, 8);
            $editColumn = new CustomEditColumn('Grain Yield', 'GrainYield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Usage field
            //
            $editor = new TextAreaEdit('usage_edit', 50, 8);
            $editColumn = new CustomEditColumn('Usage', 'Usage', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Category field
            //
            $editor = new TextAreaEdit('category_edit', 50, 8);
            $editColumn = new CustomEditColumn('Category', 'Category', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Format field
            //
            $editor = new TextAreaEdit('format_edit', 50, 8);
            $editColumn = new CustomEditColumn('Format', 'Format', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Potential Yield field
            //
            $editor = new TextAreaEdit('potential_yield_edit', 50, 8);
            $editColumn = new CustomEditColumn('Potential Yield', 'Potential Yield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DeviceID field
            //
            $editor = new TextAreaEdit('deviceid_edit', 50, 8);
            $editColumn = new CustomEditColumn('Device ID', 'DeviceID', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DeviceName field
            //
            $editor = new TextAreaEdit('devicename_edit', 50, 8);
            $editColumn = new CustomEditColumn('Device Name', 'DeviceName', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            $grid->SetShowAddButton(true && $this->GetSecurityInfo()->HasAddGrant());
        }
    
        private function AddMultiUploadColumn(Grid $grid)
        {
    
        }
    
        protected function AddPrintColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Inventory Item', 'Inventory Item_id', 'Inventory Item', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Brew', 'Brew_id', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for PackageLog field
            //
            $column = new TextViewColumn('PackageLog', 'PackageLog', 'Package Log', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Order ID field
            //
            $column = new NumberViewColumn('Order ID', 'Order ID', 'Order ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Committed field
            //
            $column = new NumberViewColumn('Committed', 'Committed', 'Committed', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Date field
            //
            $column = new DateTimeViewColumn('Activity Date', 'Activity Date', 'Activity Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Vendor field
            //
            $column = new TextViewColumn('Vendor', 'Vendor', 'Vendor', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Entry Type field
            //
            $column = new TextViewColumn('Entry Type', 'Entry Type', 'Entry Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Unit of Measure field
            //
            $column = new TextViewColumn('Unit of Measure', 'Unit of Measure', 'Unit Of Measure', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Pkg Type field
            //
            $column = new TextViewColumn('Pkg Type', 'Pkg Type', 'Pkg Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity field
            //
            $column = new TextViewColumn('Activity', 'Activity', 'Activity', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Units per Pkg field
            //
            $column = new NumberViewColumn('Units per Pkg', 'Units per Pkg', 'Units Per Pkg', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Pkg Qty field
            //
            $column = new NumberViewColumn('Activity Pkg Qty', 'Activity Pkg Qty', 'Activity Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Unit Qty field
            //
            $column = new NumberViewColumn('Activity Unit Qty', 'Activity Unit Qty', 'Activity Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Total Packages field
            //
            $column = new NumberViewColumn('Total Packages', 'Total Packages', 'Total Packages', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Total Units field
            //
            $column = new NumberViewColumn('Total Units', 'Total Units', 'Total Units', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Price/Unit field
            //
            $column = new NumberViewColumn('Price/Unit', 'Price/Unit', 'Price/Unit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Total Price field
            //
            $column = new NumberViewColumn('Total Price', 'Total Price', 'Total Price', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Pkgs Debit field
            //
            $column = new NumberViewColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', 'Activity Pkgs Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Pkgs Credit field
            //
            $column = new NumberViewColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', 'Activity Pkgs Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Units Debit field
            //
            $column = new NumberViewColumn('Activity Units Debit', 'Activity Units Debit', 'Activity Units Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Activity Units Credit field
            //
            $column = new NumberViewColumn('Activity Units Credit', 'Activity Units Credit', 'Activity Units Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Committed Pkg Qty field
            //
            $column = new NumberViewColumn('Committed Pkg Qty', 'Committed Pkg Qty', 'Committed Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Committed Unit Qty field
            //
            $column = new NumberViewColumn('Committed Unit Qty', 'Committed Unit Qty', 'Committed Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Description field
            //
            $column = new TextViewColumn('Description', 'Description', 'Description', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Keg field
            //
            $column = new TextViewColumn('Keg', 'Keg', 'Keg', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for GrainYield field
            //
            $column = new TextViewColumn('GrainYield', 'GrainYield', 'Grain Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Usage field
            //
            $column = new TextViewColumn('Usage', 'Usage', 'Usage', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Category field
            //
            $column = new TextViewColumn('Category', 'Category', 'Category', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Format field
            //
            $column = new TextViewColumn('Format', 'Format', 'Format', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Potential Yield field
            //
            $column = new TextViewColumn('Potential Yield', 'Potential Yield', 'Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for DeviceID field
            //
            $column = new TextViewColumn('DeviceID', 'DeviceID', 'Device ID', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for DeviceName field
            //
            $column = new TextViewColumn('DeviceName', 'DeviceName', 'Device Name', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
        }
    
        protected function AddExportColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Inventory Item', 'Inventory Item_id', 'Inventory Item', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Brew', 'Brew_id', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for PackageLog field
            //
            $column = new TextViewColumn('PackageLog', 'PackageLog', 'Package Log', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Order ID field
            //
            $column = new NumberViewColumn('Order ID', 'Order ID', 'Order ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Committed field
            //
            $column = new NumberViewColumn('Committed', 'Committed', 'Committed', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Date field
            //
            $column = new DateTimeViewColumn('Activity Date', 'Activity Date', 'Activity Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for Vendor field
            //
            $column = new TextViewColumn('Vendor', 'Vendor', 'Vendor', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Entry Type field
            //
            $column = new TextViewColumn('Entry Type', 'Entry Type', 'Entry Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Unit of Measure field
            //
            $column = new TextViewColumn('Unit of Measure', 'Unit of Measure', 'Unit Of Measure', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Pkg Type field
            //
            $column = new TextViewColumn('Pkg Type', 'Pkg Type', 'Pkg Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity field
            //
            $column = new TextViewColumn('Activity', 'Activity', 'Activity', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Units per Pkg field
            //
            $column = new NumberViewColumn('Units per Pkg', 'Units per Pkg', 'Units Per Pkg', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Pkg Qty field
            //
            $column = new NumberViewColumn('Activity Pkg Qty', 'Activity Pkg Qty', 'Activity Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Unit Qty field
            //
            $column = new NumberViewColumn('Activity Unit Qty', 'Activity Unit Qty', 'Activity Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Total Packages field
            //
            $column = new NumberViewColumn('Total Packages', 'Total Packages', 'Total Packages', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Total Units field
            //
            $column = new NumberViewColumn('Total Units', 'Total Units', 'Total Units', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Price/Unit field
            //
            $column = new NumberViewColumn('Price/Unit', 'Price/Unit', 'Price/Unit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Total Price field
            //
            $column = new NumberViewColumn('Total Price', 'Total Price', 'Total Price', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Pkgs Debit field
            //
            $column = new NumberViewColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', 'Activity Pkgs Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Pkgs Credit field
            //
            $column = new NumberViewColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', 'Activity Pkgs Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Units Debit field
            //
            $column = new NumberViewColumn('Activity Units Debit', 'Activity Units Debit', 'Activity Units Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Activity Units Credit field
            //
            $column = new NumberViewColumn('Activity Units Credit', 'Activity Units Credit', 'Activity Units Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Committed Pkg Qty field
            //
            $column = new NumberViewColumn('Committed Pkg Qty', 'Committed Pkg Qty', 'Committed Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Committed Unit Qty field
            //
            $column = new NumberViewColumn('Committed Unit Qty', 'Committed Unit Qty', 'Committed Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Description field
            //
            $column = new TextViewColumn('Description', 'Description', 'Description', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Keg field
            //
            $column = new TextViewColumn('Keg', 'Keg', 'Keg', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for GrainYield field
            //
            $column = new TextViewColumn('GrainYield', 'GrainYield', 'Grain Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Usage field
            //
            $column = new TextViewColumn('Usage', 'Usage', 'Usage', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Category field
            //
            $column = new TextViewColumn('Category', 'Category', 'Category', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Format field
            //
            $column = new TextViewColumn('Format', 'Format', 'Format', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Potential Yield field
            //
            $column = new TextViewColumn('Potential Yield', 'Potential Yield', 'Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for DeviceID field
            //
            $column = new TextViewColumn('DeviceID', 'DeviceID', 'Device ID', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for DeviceName field
            //
            $column = new TextViewColumn('DeviceName', 'DeviceName', 'Device Name', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
        }
    
        private function AddCompareColumns(Grid $grid)
        {
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Inventory Item', 'Inventory Item_id', 'Inventory Item', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Brew', 'Brew_id', 'Brew', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for PackageLog field
            //
            $column = new TextViewColumn('PackageLog', 'PackageLog', 'Package Log', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Order ID field
            //
            $column = new NumberViewColumn('Order ID', 'Order ID', 'Order ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Committed field
            //
            $column = new NumberViewColumn('Committed', 'Committed', 'Committed', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Date field
            //
            $column = new DateTimeViewColumn('Activity Date', 'Activity Date', 'Activity Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Vendor field
            //
            $column = new TextViewColumn('Vendor', 'Vendor', 'Vendor', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Entry Type field
            //
            $column = new TextViewColumn('Entry Type', 'Entry Type', 'Entry Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Unit of Measure field
            //
            $column = new TextViewColumn('Unit of Measure', 'Unit of Measure', 'Unit Of Measure', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Pkg Type field
            //
            $column = new TextViewColumn('Pkg Type', 'Pkg Type', 'Pkg Type', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity field
            //
            $column = new TextViewColumn('Activity', 'Activity', 'Activity', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Units per Pkg field
            //
            $column = new NumberViewColumn('Units per Pkg', 'Units per Pkg', 'Units Per Pkg', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Pkg Qty field
            //
            $column = new NumberViewColumn('Activity Pkg Qty', 'Activity Pkg Qty', 'Activity Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Unit Qty field
            //
            $column = new NumberViewColumn('Activity Unit Qty', 'Activity Unit Qty', 'Activity Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Total Packages field
            //
            $column = new NumberViewColumn('Total Packages', 'Total Packages', 'Total Packages', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Total Units field
            //
            $column = new NumberViewColumn('Total Units', 'Total Units', 'Total Units', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Price/Unit field
            //
            $column = new NumberViewColumn('Price/Unit', 'Price/Unit', 'Price/Unit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Total Price field
            //
            $column = new NumberViewColumn('Total Price', 'Total Price', 'Total Price', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Pkgs Debit field
            //
            $column = new NumberViewColumn('Activity Pkgs Debit', 'Activity Pkgs Debit', 'Activity Pkgs Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Pkgs Credit field
            //
            $column = new NumberViewColumn('Activity Pkgs Credit', 'Activity Pkgs Credit', 'Activity Pkgs Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Units Debit field
            //
            $column = new NumberViewColumn('Activity Units Debit', 'Activity Units Debit', 'Activity Units Debit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Activity Units Credit field
            //
            $column = new NumberViewColumn('Activity Units Credit', 'Activity Units Credit', 'Activity Units Credit', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Committed Pkg Qty field
            //
            $column = new NumberViewColumn('Committed Pkg Qty', 'Committed Pkg Qty', 'Committed Pkg Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Committed Unit Qty field
            //
            $column = new NumberViewColumn('Committed Unit Qty', 'Committed Unit Qty', 'Committed Unit Qty', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Description field
            //
            $column = new TextViewColumn('Description', 'Description', 'Description', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Keg field
            //
            $column = new TextViewColumn('Keg', 'Keg', 'Keg', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for GrainYield field
            //
            $column = new TextViewColumn('GrainYield', 'GrainYield', 'Grain Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Usage field
            //
            $column = new TextViewColumn('Usage', 'Usage', 'Usage', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Category field
            //
            $column = new TextViewColumn('Category', 'Category', 'Category', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Format field
            //
            $column = new TextViewColumn('Format', 'Format', 'Format', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Potential Yield field
            //
            $column = new TextViewColumn('Potential Yield', 'Potential Yield', 'Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for DeviceID field
            //
            $column = new TextViewColumn('DeviceID', 'DeviceID', 'Device ID', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for DeviceName field
            //
            $column = new TextViewColumn('DeviceName', 'DeviceName', 'Device Name', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
        }
    
        private function AddCompareHeaderColumns(Grid $grid)
        {
    
        }
    
        public function GetPageDirection()
        {
            return null;
        }
    
        public function isFilterConditionRequired()
        {
            return false;
        }
    
        protected function ApplyCommonColumnEditProperties(CustomEditColumn $column)
        {
            $column->SetDisplaySetToNullCheckBox(false);
            $column->SetDisplaySetToDefaultCheckBox(false);
    		$column->SetVariableContainer($this->GetColumnVariableContainer());
        }
    
        function GetCustomClientScript()
        {
            return ;
        }
        
        function GetOnPageLoadedClientScript()
        {
            return ;
        }
    
        protected function CreateGrid()
        {
            $result = new Grid($this, $this->dataset);
            if ($this->GetSecurityInfo()->HasDeleteGrant())
               $result->SetAllowDeleteSelected(true);
            else
               $result->SetAllowDeleteSelected(false);   
            
            ApplyCommonPageSettings($this, $result);
            
            $result->SetUseImagesForActions(true);
            $result->SetUseFixedHeader(false);
            $result->SetShowLineNumbers(false);
            $result->SetShowKeyColumnsImagesInHeader(false);
            $result->SetViewMode(ViewMode::TABLE);
            $result->setEnableRuntimeCustomization(true);
            $result->setAllowCompare(true);
            $this->AddCompareHeaderColumns($result);
            $this->AddCompareColumns($result);
            $result->setMultiEditAllowed($this->GetSecurityInfo()->HasEditGrant() && true);
            $result->setTableBordered(false);
            $result->setTableCondensed(false);
            
            $result->SetHighlightRowAtHover(false);
            $result->SetWidth('');
            $this->AddOperationsColumns($result);
            $this->AddFieldColumns($result);
            $this->AddSingleRecordViewColumns($result);
            $this->AddEditColumns($result);
            $this->AddMultiEditColumns($result);
            $this->AddToggleEditColumns($result);
            $this->AddInsertColumns($result);
            $this->AddPrintColumns($result);
            $this->AddExportColumns($result);
            $this->AddMultiUploadColumn($result);
    
    
            $this->SetShowPageList(true);
            $this->SetShowTopPageNavigator(true);
            $this->SetShowBottomPageNavigator(true);
            $this->setAllowedActions(array('view', 'insert', 'copy', 'edit', 'multi-edit', 'delete', 'multi-delete'));
            $this->setPrintListAvailable(true);
            $this->setPrintListRecordAvailable(false);
            $this->setPrintOneRecordAvailable(true);
            $this->setAllowPrintSelectedRecords(true);
            $this->setExportListAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportSelectedRecordsAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportListRecordAvailable(array());
            $this->setExportOneRecordAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
    
            return $result;
        }
     
        protected function setClientSideEvents(Grid $grid) {
    
        }
    
        protected function doRegisterHandlers() {
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_InventoryActivities_Inventory Item_search', 'Inventory Item', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_InventoryActivities_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_InventoryActivities_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_InventoryActivities_Brew_search', 'Brew', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_InventoryActivities_Inventory Item_search', 'Inventory Item', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_InventoryActivities_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_InventoryActivities_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_InventoryActivities_Brew_search', 'Brew', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_InventoryActivities_Brew_search', 'Brew', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'edit_Batches_InventoryActivities_Inventory Item_search', 'Inventory Item', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'edit_Batches_InventoryActivities_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'edit_Batches_InventoryActivities_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'edit_Batches_InventoryActivities_Brew_search', 'Brew', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`InventoryItems`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Item ID'),
                    new StringField('Inventory Item', true, true),
                    new IntegerField('Price/Unit'),
                    new StringField('Active'),
                    new StringField('Label Name from Template'),
                    new StringField('Brand from Template'),
                    new StringField('Brand from Item'),
                    new StringField('BeerSmith Name'),
                    new StringField('Brand'),
                    new StringField('Product Name'),
                    new StringField('Category'),
                    new StringField('Notes'),
                    new StringField('Pkg Type'),
                    new StringField('Qty per Pkg'),
                    new StringField('Unit of Measure'),
                    new StringField('Image'),
                    new StringField('Image : URL'),
                    new IntegerField('Activity Pkg Sum'),
                    new IntegerField('Activity Units (Calc)'),
                    new IntegerField('Activity Units (Sum)'),
                    new StringField('Inventory Pkgs'),
                    new IntegerField('Inventory Units'),
                    new IntegerField('Inventory Value'),
                    new StringField('Qty Description'),
                    new StringField('Activities'),
                    new IntegerField('Inventory - Order'),
                    new IntegerField('Inventory - Warning'),
                    new IntegerField('Inventory - Critical'),
                    new StringField('Orders Pending'),
                    new StringField('Inventory Level'),
                    new StringField('Re-Order Status'),
                    new StringField('Used past 30 days'),
                    new StringField('Alpha Acids'),
                    new StringField('GrainYield'),
                    new StringField('Format'),
                    new StringField('Attachment'),
                    new StringField('Attachment : URL')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_InventoryActivities_Inventory Item_search', 'Inventory Item', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_InventoryActivities_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_InventoryActivities_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Brews`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Batch', true),
                    new StringField('Brew ID', true),
                    new StringField('Brew', true, true),
                    new DateField('Brew Date', true),
                    new StringField('Status'),
                    new IntegerField('Mash Temp'),
                    new IntegerField('Lactic Acid'),
                    new IntegerField('Preboil Grav'),
                    new IntegerField('OG'),
                    new IntegerField('pH-Mash'),
                    new IntegerField('pH-First'),
                    new IntegerField('pH-Last'),
                    new IntegerField('pH-Pre boil'),
                    new IntegerField('pH-KO'),
                    new StringField('O2 Setting'),
                    new IntegerField('DO-Line'),
                    new IntegerField('DO-Tank'),
                    new StringField('Notes'),
                    new StringField('User'),
                    new IntegerField('Bbls')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_InventoryActivities_Brew_search', 'Brew', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
        }
       
        protected function doCustomRenderColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderPrintColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderExportColumn($exportType, $fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomDrawRow($rowData, &$cellFontColor, &$cellFontSize, &$cellBgColor, &$cellItalicAttr, &$cellBoldAttr)
        {
    
        }
    
        protected function doExtendedCustomDrawRow($rowData, &$rowCellStyles, &$rowStyles, &$rowClasses, &$cellClasses)
        {
    
        }
    
        protected function doCustomRenderTotal($totalValue, $aggregate, $columnName, &$customText, &$handled)
        {
    
        }
    
        protected function doCustomDefaultValues(&$values, &$handled) 
        {
    
        }
    
        protected function doCustomCompareColumn($columnName, $valueA, $valueB, &$result)
        {
    
        }
    
        protected function doBeforeInsertRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeUpdateRecord($page, $oldRowData, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeDeleteRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterInsertRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterUpdateRecord($page, $oldRowData, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterDeleteRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doCustomHTMLHeader($page, &$customHtmlHeaderText)
        { 
    
        }
    
        protected function doGetCustomTemplate($type, $part, $mode, &$result, &$params)
        {
    
        }
    
        protected function doGetCustomExportOptions(Page $page, $exportType, $rowData, &$options)
        {
    
        }
    
        protected function doFileUpload($fieldName, $rowData, &$result, &$accept, $originalFileName, $originalFileExtension, $fileSize, $tempFileName)
        {
    
        }
    
        protected function doPrepareChart(Chart $chart)
        {
    
        }
    
        protected function doPrepareColumnFilter(ColumnFilter $columnFilter)
        {
    
        }
    
        protected function doPrepareFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
    
        }
    
        protected function doGetSelectionFilters(FixedKeysArray $columns, &$result)
        {
    
        }
    
        protected function doGetCustomFormLayout($mode, FixedKeysArray $columns, FormLayout $layout)
        {
    
        }
    
        protected function doGetCustomColumnGroup(FixedKeysArray $columns, ViewColumnGroup $columnGroup)
        {
    
        }
    
        protected function doPageLoaded()
        {
    
        }
    
        protected function doCalculateFields($rowData, $fieldName, &$value)
        {
    
        }
    
        protected function doGetCustomRecordPermissions(Page $page, &$usingCondition, $rowData, &$allowEdit, &$allowDelete, &$mergeWithDefault, &$handled)
        {
    
        }
    
        protected function doAddEnvironmentVariables(Page $page, &$variables)
        {
    
        }
    
    }
    
    
    
    
    // OnBeforePageExecute event handler
    
    
    
    class Batches_TankLogsPage extends DetailPage
    {
        protected function DoBeforeCreate()
        {
            $this->SetTitle('Tank Logs');
            $this->SetMenuLabel('Tank Logs');
    
            $this->dataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`TankLogs`');
            $this->dataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new DateField('Date', true),
                    new StringField('Tank', true),
                    new StringField('Batch', true),
                    new StringField('Nickname'),
                    new StringField('Action'),
                    new IntegerField('SG Entry'),
                    new IntegerField('Plato Entry'),
                    new IntegerField('Calc SG'),
                    new IntegerField('Calc Plato'),
                    new IntegerField('Gravity'),
                    new IntegerField('Total Days'),
                    new IntegerField('Dry-Hop Days'),
                    new StringField('Notes'),
                    new StringField('YB'),
                    new StringField('User'),
                    new IntegerField('DO-KO'),
                    new IntegerField('DO-Pre-Transfer'),
                    new IntegerField('DO-Post-Transfer'),
                    new IntegerField('DO-Pickup'),
                    new IntegerField('CO2 Volumes'),
                    new StringField('Blend into Batch'),
                    new IntegerField('Brews to Blend'),
                    new IntegerField('Viable Cells'),
                    new IntegerField('Viability'),
                    new IntegerField('% Solids'),
                    new StringField('Liters of Slurry'),
                    new StringField('Dilution Factor'),
                    new BlobField('Image #1'),
                    new StringField('Image #1 : URL'),
                    new BlobField('Image #2'),
                    new StringField('Image #2 : URL'),
                    new BlobField('Image #3'),
                    new StringField('Image #3 : URL'),
                    new BlobField('Image #4'),
                    new StringField('Image #4 : URL'),
                    new IntegerField('pH'),
                    new IntegerField('Turbidity (FTU)'),
                    new IntegerField('Flow Rate'),
                    new IntegerField('CO2 Pressure')
                )
            );
            $this->dataset->AddLookupField('Batch', 'Batches', new StringField('Batch'), new IntegerField('id', false, false, false, false, 'Batch_id', 'Batch_id_Batches'), 'Batch_id_Batches');
        }
    
        protected function DoPrepare() {
    
        }
    
        protected function CreatePageNavigator()
        {
            $result = new CompositePageNavigator($this);
            
            $partitionNavigator = new PageNavigator('pnav', $this, $this->dataset);
            $partitionNavigator->SetRowsPerPage(20);
            $result->AddPageNavigator($partitionNavigator);
            
            return $result;
        }
    
        protected function CreateRssGenerator()
        {
            return null;
        }
    
        protected function setupCharts()
        {
    
        }
    
        protected function getFiltersColumns()
        {
            return array(
                new FilterColumn($this->dataset, 'id', 'id', 'Id'),
                new FilterColumn($this->dataset, 'updated', 'updated', 'Updated'),
                new FilterColumn($this->dataset, 'Date', 'Date', 'Date'),
                new FilterColumn($this->dataset, 'Tank', 'Tank', 'Tank'),
                new FilterColumn($this->dataset, 'Batch', 'Batch_id', 'Batch'),
                new FilterColumn($this->dataset, 'Nickname', 'Nickname', 'Nickname'),
                new FilterColumn($this->dataset, 'Action', 'Action', 'Action'),
                new FilterColumn($this->dataset, 'SG Entry', 'SG Entry', 'SG Entry'),
                new FilterColumn($this->dataset, 'Plato Entry', 'Plato Entry', 'Plato Entry'),
                new FilterColumn($this->dataset, 'Calc SG', 'Calc SG', 'Calc SG'),
                new FilterColumn($this->dataset, 'Calc Plato', 'Calc Plato', 'Calc Plato'),
                new FilterColumn($this->dataset, 'Gravity', 'Gravity', 'Gravity'),
                new FilterColumn($this->dataset, 'Total Days', 'Total Days', 'Total Days'),
                new FilterColumn($this->dataset, 'Dry-Hop Days', 'Dry-Hop Days', 'Dry-Hop Days'),
                new FilterColumn($this->dataset, 'Notes', 'Notes', 'Notes'),
                new FilterColumn($this->dataset, 'YB', 'YB', 'YB'),
                new FilterColumn($this->dataset, 'User', 'User', 'User'),
                new FilterColumn($this->dataset, 'DO-KO', 'DO-KO', 'DO-KO'),
                new FilterColumn($this->dataset, 'DO-Pre-Transfer', 'DO-Pre-Transfer', 'DO-Pre-Transfer'),
                new FilterColumn($this->dataset, 'DO-Post-Transfer', 'DO-Post-Transfer', 'DO-Post-Transfer'),
                new FilterColumn($this->dataset, 'DO-Pickup', 'DO-Pickup', 'DO-Pickup'),
                new FilterColumn($this->dataset, 'CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes'),
                new FilterColumn($this->dataset, 'Blend into Batch', 'Blend into Batch', 'Blend Into Batch'),
                new FilterColumn($this->dataset, 'Brews to Blend', 'Brews to Blend', 'Brews To Blend'),
                new FilterColumn($this->dataset, 'Viable Cells', 'Viable Cells', 'Viable Cells'),
                new FilterColumn($this->dataset, 'Viability', 'Viability', 'Viability'),
                new FilterColumn($this->dataset, '% Solids', '% Solids', '% Solids'),
                new FilterColumn($this->dataset, 'Liters of Slurry', 'Liters of Slurry', 'Liters Of Slurry'),
                new FilterColumn($this->dataset, 'Dilution Factor', 'Dilution Factor', 'Dilution Factor'),
                new FilterColumn($this->dataset, 'Image #1', 'Image #1', 'Image #1'),
                new FilterColumn($this->dataset, 'Image #1 : URL', 'Image #1 : URL', 'Image #1 : URL'),
                new FilterColumn($this->dataset, 'Image #2', 'Image #2', 'Image #2'),
                new FilterColumn($this->dataset, 'Image #2 : URL', 'Image #2 : URL', 'Image #2 : URL'),
                new FilterColumn($this->dataset, 'Image #3', 'Image #3', 'Image #3'),
                new FilterColumn($this->dataset, 'Image #3 : URL', 'Image #3 : URL', 'Image #3 : URL'),
                new FilterColumn($this->dataset, 'Image #4', 'Image #4', 'Image #4'),
                new FilterColumn($this->dataset, 'Image #4 : URL', 'Image #4 : URL', 'Image #4 : URL'),
                new FilterColumn($this->dataset, 'pH', 'pH', 'PH'),
                new FilterColumn($this->dataset, 'Turbidity (FTU)', 'Turbidity (FTU)', 'Turbidity (FTU)'),
                new FilterColumn($this->dataset, 'Flow Rate', 'Flow Rate', 'Flow Rate'),
                new FilterColumn($this->dataset, 'CO2 Pressure', 'CO2 Pressure', 'CO2 Pressure')
            );
        }
    
        protected function setupQuickFilter(QuickFilter $quickFilter, FixedKeysArray $columns)
        {
            $quickFilter
                ->addColumn($columns['id'])
                ->addColumn($columns['updated'])
                ->addColumn($columns['Date'])
                ->addColumn($columns['Tank'])
                ->addColumn($columns['Batch'])
                ->addColumn($columns['Nickname'])
                ->addColumn($columns['Action'])
                ->addColumn($columns['SG Entry'])
                ->addColumn($columns['Plato Entry'])
                ->addColumn($columns['Calc SG'])
                ->addColumn($columns['Calc Plato'])
                ->addColumn($columns['Gravity'])
                ->addColumn($columns['Total Days'])
                ->addColumn($columns['Dry-Hop Days'])
                ->addColumn($columns['Notes'])
                ->addColumn($columns['YB'])
                ->addColumn($columns['User'])
                ->addColumn($columns['DO-KO'])
                ->addColumn($columns['DO-Pre-Transfer'])
                ->addColumn($columns['DO-Post-Transfer'])
                ->addColumn($columns['DO-Pickup'])
                ->addColumn($columns['CO2 Volumes'])
                ->addColumn($columns['Blend into Batch'])
                ->addColumn($columns['Brews to Blend'])
                ->addColumn($columns['Viable Cells'])
                ->addColumn($columns['Viability'])
                ->addColumn($columns['% Solids'])
                ->addColumn($columns['Liters of Slurry'])
                ->addColumn($columns['Dilution Factor'])
                ->addColumn($columns['Image #1'])
                ->addColumn($columns['Image #1 : URL'])
                ->addColumn($columns['Image #2'])
                ->addColumn($columns['Image #2 : URL'])
                ->addColumn($columns['Image #3'])
                ->addColumn($columns['Image #3 : URL'])
                ->addColumn($columns['Image #4'])
                ->addColumn($columns['Image #4 : URL'])
                ->addColumn($columns['pH'])
                ->addColumn($columns['Turbidity (FTU)'])
                ->addColumn($columns['Flow Rate'])
                ->addColumn($columns['CO2 Pressure']);
        }
    
        protected function setupColumnFilter(ColumnFilter $columnFilter)
        {
            $columnFilter
                ->setOptionsFor('updated')
                ->setOptionsFor('Date')
                ->setOptionsFor('Batch')
                ->setOptionsFor('Image #1')
                ->setOptionsFor('Image #2')
                ->setOptionsFor('Image #3')
                ->setOptionsFor('Image #4');
        }
    
        protected function setupFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
            $main_editor = new TextEdit('id_edit');
            
            $filterBuilder->addColumn(
                $columns['id'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            
            $filterBuilder->addColumn(
                $columns['updated'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('date_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('tank_edit');
            $main_editor->SetMaxLength(11);
            
            $filterBuilder->addColumn(
                $columns['Tank'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_TankLogs_Batch_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Batch', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_TankLogs_Batch_search');
            
            $filterBuilder->addColumn(
                $columns['Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('nickname_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Nickname'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('action_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Action'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('sg_entry_edit');
            
            $filterBuilder->addColumn(
                $columns['SG Entry'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('plato_entry_edit');
            
            $filterBuilder->addColumn(
                $columns['Plato Entry'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('calc_sg_edit');
            
            $filterBuilder->addColumn(
                $columns['Calc SG'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('calc_plato_edit');
            
            $filterBuilder->addColumn(
                $columns['Calc Plato'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('gravity_edit');
            
            $filterBuilder->addColumn(
                $columns['Gravity'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('total_days_edit');
            
            $filterBuilder->addColumn(
                $columns['Total Days'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dry-hop_days_edit');
            
            $filterBuilder->addColumn(
                $columns['Dry-Hop Days'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Notes');
            
            $filterBuilder->addColumn(
                $columns['Notes'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('yb_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['YB'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('user_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['User'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('do-ko_edit');
            
            $filterBuilder->addColumn(
                $columns['DO-KO'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('do-pre-transfer_edit');
            
            $filterBuilder->addColumn(
                $columns['DO-Pre-Transfer'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('do-post-transfer_edit');
            
            $filterBuilder->addColumn(
                $columns['DO-Post-Transfer'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('do-pickup_edit');
            
            $filterBuilder->addColumn(
                $columns['DO-Pickup'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('co2_volumes_edit');
            
            $filterBuilder->addColumn(
                $columns['CO2 Volumes'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('blend_into_batch_edit');
            $main_editor->SetMaxLength(75);
            
            $filterBuilder->addColumn(
                $columns['Blend into Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews_to_blend_edit');
            
            $filterBuilder->addColumn(
                $columns['Brews to Blend'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('viable_cells_edit');
            
            $filterBuilder->addColumn(
                $columns['Viable Cells'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('viability_edit');
            
            $filterBuilder->addColumn(
                $columns['Viability'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('%_solids_edit');
            
            $filterBuilder->addColumn(
                $columns['% Solids'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('liters_of_slurry_edit');
            $main_editor->SetMaxLength(11);
            
            $filterBuilder->addColumn(
                $columns['Liters of Slurry'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dilution_factor_edit');
            $main_editor->SetMaxLength(11);
            
            $filterBuilder->addColumn(
                $columns['Dilution Factor'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #1');
            
            $filterBuilder->addColumn(
                $columns['Image #1'],
                array(
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #1 : URL');
            
            $filterBuilder->addColumn(
                $columns['Image #1 : URL'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #2');
            
            $filterBuilder->addColumn(
                $columns['Image #2'],
                array(
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #2 : URL');
            
            $filterBuilder->addColumn(
                $columns['Image #2 : URL'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #3');
            
            $filterBuilder->addColumn(
                $columns['Image #3'],
                array(
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #3 : URL');
            
            $filterBuilder->addColumn(
                $columns['Image #3 : URL'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #4');
            
            $filterBuilder->addColumn(
                $columns['Image #4'],
                array(
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Image #4 : URL');
            
            $filterBuilder->addColumn(
                $columns['Image #4 : URL'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ph_edit');
            
            $filterBuilder->addColumn(
                $columns['pH'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('turbidity_(ftu)_edit');
            
            $filterBuilder->addColumn(
                $columns['Turbidity (FTU)'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('flow_rate_edit');
            
            $filterBuilder->addColumn(
                $columns['Flow Rate'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('co2_pressure_edit');
            
            $filterBuilder->addColumn(
                $columns['CO2 Pressure'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
        }
    
        protected function AddOperationsColumns(Grid $grid)
        {
            $actions = $grid->getActions();
            $actions->setCaption($this->GetLocalizerCaptions()->GetMessageString('Actions'));
            $actions->setPosition(ActionList::POSITION_LEFT);
            
            if ($this->GetSecurityInfo()->HasViewGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('View'), OPERATION_VIEW, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
            
            if ($this->GetSecurityInfo()->HasEditGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Edit'), OPERATION_EDIT, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowEditButtonHandler', $this);
            }
            
            if ($this->deleteOperationIsAllowed()) {
                $operation = new AjaxOperation(OPERATION_DELETE,
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'),
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'), $this->dataset,
                    $this->GetModalGridDeleteHandler(), $grid
                );
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowDeleteButtonHandler', $this);
            }
            
            
            if ($this->GetSecurityInfo()->HasAddGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Copy'), OPERATION_COPY, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
        }
    
        protected function AddFieldColumns(Grid $grid, $withDetails = true)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Date field
            //
            $column = new DateTimeViewColumn('Date', 'Date', 'Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Tank field
            //
            $column = new TextViewColumn('Tank', 'Tank', 'Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Action field
            //
            $column = new TextViewColumn('Action', 'Action', 'Action', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for SG Entry field
            //
            $column = new NumberViewColumn('SG Entry', 'SG Entry', 'SG Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Plato Entry field
            //
            $column = new NumberViewColumn('Plato Entry', 'Plato Entry', 'Plato Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Calc SG field
            //
            $column = new NumberViewColumn('Calc SG', 'Calc SG', 'Calc SG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Calc Plato field
            //
            $column = new NumberViewColumn('Calc Plato', 'Calc Plato', 'Calc Plato', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Gravity field
            //
            $column = new NumberViewColumn('Gravity', 'Gravity', 'Gravity', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Total Days field
            //
            $column = new NumberViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dry-Hop Days field
            //
            $column = new NumberViewColumn('Dry-Hop Days', 'Dry-Hop Days', 'Dry-Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for YB field
            //
            $column = new TextViewColumn('YB', 'YB', 'YB', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DO-KO field
            //
            $column = new NumberViewColumn('DO-KO', 'DO-KO', 'DO-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DO-Pre-Transfer field
            //
            $column = new NumberViewColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', 'DO-Pre-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DO-Post-Transfer field
            //
            $column = new NumberViewColumn('DO-Post-Transfer', 'DO-Post-Transfer', 'DO-Post-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DO-Pickup field
            //
            $column = new NumberViewColumn('DO-Pickup', 'DO-Pickup', 'DO-Pickup', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for CO2 Volumes field
            //
            $column = new NumberViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Blend into Batch field
            //
            $column = new TextViewColumn('Blend into Batch', 'Blend into Batch', 'Blend Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews to Blend field
            //
            $column = new NumberViewColumn('Brews to Blend', 'Brews to Blend', 'Brews To Blend', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Viable Cells field
            //
            $column = new NumberViewColumn('Viable Cells', 'Viable Cells', 'Viable Cells', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Viability field
            //
            $column = new NumberViewColumn('Viability', 'Viability', 'Viability', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for % Solids field
            //
            $column = new NumberViewColumn('% Solids', '% Solids', '% Solids', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Liters of Slurry field
            //
            $column = new TextViewColumn('Liters of Slurry', 'Liters of Slurry', 'Liters Of Slurry', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dilution Factor field
            //
            $column = new TextViewColumn('Dilution Factor', 'Dilution Factor', 'Dilution Factor', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #1 field
            //
            $column = new DownloadDataColumn('Image #1', 'Image #1', 'Image #1', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #1 : URL field
            //
            $column = new TextViewColumn('Image #1 : URL', 'Image #1 : URL', 'Image #1 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #2 field
            //
            $column = new DownloadDataColumn('Image #2', 'Image #2', 'Image #2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #2 : URL field
            //
            $column = new TextViewColumn('Image #2 : URL', 'Image #2 : URL', 'Image #2 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #3 field
            //
            $column = new DownloadDataColumn('Image #3', 'Image #3', 'Image #3', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #3 : URL field
            //
            $column = new TextViewColumn('Image #3 : URL', 'Image #3 : URL', 'Image #3 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #4 field
            //
            $column = new DownloadDataColumn('Image #4', 'Image #4', 'Image #4', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Image #4 : URL field
            //
            $column = new TextViewColumn('Image #4 : URL', 'Image #4 : URL', 'Image #4 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for pH field
            //
            $column = new NumberViewColumn('pH', 'pH', 'PH', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Turbidity (FTU) field
            //
            $column = new NumberViewColumn('Turbidity (FTU)', 'Turbidity (FTU)', 'Turbidity (FTU)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Flow Rate field
            //
            $column = new NumberViewColumn('Flow Rate', 'Flow Rate', 'Flow Rate', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for CO2 Pressure field
            //
            $column = new NumberViewColumn('CO2 Pressure', 'CO2 Pressure', 'CO2 Pressure', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
        }
    
        protected function AddSingleRecordViewColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Date field
            //
            $column = new DateTimeViewColumn('Date', 'Date', 'Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Tank field
            //
            $column = new TextViewColumn('Tank', 'Tank', 'Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Action field
            //
            $column = new TextViewColumn('Action', 'Action', 'Action', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for SG Entry field
            //
            $column = new NumberViewColumn('SG Entry', 'SG Entry', 'SG Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Plato Entry field
            //
            $column = new NumberViewColumn('Plato Entry', 'Plato Entry', 'Plato Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Calc SG field
            //
            $column = new NumberViewColumn('Calc SG', 'Calc SG', 'Calc SG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Calc Plato field
            //
            $column = new NumberViewColumn('Calc Plato', 'Calc Plato', 'Calc Plato', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Gravity field
            //
            $column = new NumberViewColumn('Gravity', 'Gravity', 'Gravity', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new NumberViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dry-Hop Days field
            //
            $column = new NumberViewColumn('Dry-Hop Days', 'Dry-Hop Days', 'Dry-Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for YB field
            //
            $column = new TextViewColumn('YB', 'YB', 'YB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DO-KO field
            //
            $column = new NumberViewColumn('DO-KO', 'DO-KO', 'DO-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DO-Pre-Transfer field
            //
            $column = new NumberViewColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', 'DO-Pre-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DO-Post-Transfer field
            //
            $column = new NumberViewColumn('DO-Post-Transfer', 'DO-Post-Transfer', 'DO-Post-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DO-Pickup field
            //
            $column = new NumberViewColumn('DO-Pickup', 'DO-Pickup', 'DO-Pickup', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new NumberViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Blend into Batch field
            //
            $column = new TextViewColumn('Blend into Batch', 'Blend into Batch', 'Blend Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews to Blend field
            //
            $column = new NumberViewColumn('Brews to Blend', 'Brews to Blend', 'Brews To Blend', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Viable Cells field
            //
            $column = new NumberViewColumn('Viable Cells', 'Viable Cells', 'Viable Cells', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Viability field
            //
            $column = new NumberViewColumn('Viability', 'Viability', 'Viability', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for % Solids field
            //
            $column = new NumberViewColumn('% Solids', '% Solids', '% Solids', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Liters of Slurry field
            //
            $column = new TextViewColumn('Liters of Slurry', 'Liters of Slurry', 'Liters Of Slurry', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dilution Factor field
            //
            $column = new TextViewColumn('Dilution Factor', 'Dilution Factor', 'Dilution Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #1 field
            //
            $column = new DownloadDataColumn('Image #1', 'Image #1', 'Image #1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #1 : URL field
            //
            $column = new TextViewColumn('Image #1 : URL', 'Image #1 : URL', 'Image #1 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #2 field
            //
            $column = new DownloadDataColumn('Image #2', 'Image #2', 'Image #2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #2 : URL field
            //
            $column = new TextViewColumn('Image #2 : URL', 'Image #2 : URL', 'Image #2 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #3 field
            //
            $column = new DownloadDataColumn('Image #3', 'Image #3', 'Image #3', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #3 : URL field
            //
            $column = new TextViewColumn('Image #3 : URL', 'Image #3 : URL', 'Image #3 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #4 field
            //
            $column = new DownloadDataColumn('Image #4', 'Image #4', 'Image #4', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Image #4 : URL field
            //
            $column = new TextViewColumn('Image #4 : URL', 'Image #4 : URL', 'Image #4 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for pH field
            //
            $column = new NumberViewColumn('pH', 'pH', 'PH', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Turbidity (FTU) field
            //
            $column = new NumberViewColumn('Turbidity (FTU)', 'Turbidity (FTU)', 'Turbidity (FTU)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Flow Rate field
            //
            $column = new NumberViewColumn('Flow Rate', 'Flow Rate', 'Flow Rate', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for CO2 Pressure field
            //
            $column = new NumberViewColumn('CO2 Pressure', 'CO2 Pressure', 'CO2 Pressure', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddSingleRecordViewColumn($column);
        }
    
        protected function AddEditColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Date field
            //
            $editor = new DateTimeEdit('date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Date', 'Date', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Tank field
            //
            $editor = new TextEdit('tank_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Tank', 'Tank', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'edit_Batches_TankLogs_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Nickname field
            //
            $editor = new TextEdit('nickname_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Nickname', 'Nickname', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Action field
            //
            $editor = new TextEdit('action_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Action', 'Action', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for SG Entry field
            //
            $editor = new TextEdit('sg_entry_edit');
            $editColumn = new CustomEditColumn('SG Entry', 'SG Entry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Plato Entry field
            //
            $editor = new TextEdit('plato_entry_edit');
            $editColumn = new CustomEditColumn('Plato Entry', 'Plato Entry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Calc SG field
            //
            $editor = new TextEdit('calc_sg_edit');
            $editColumn = new CustomEditColumn('Calc SG', 'Calc SG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Calc Plato field
            //
            $editor = new TextEdit('calc_plato_edit');
            $editColumn = new CustomEditColumn('Calc Plato', 'Calc Plato', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Gravity field
            //
            $editor = new TextEdit('gravity_edit');
            $editColumn = new CustomEditColumn('Gravity', 'Gravity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Total Days field
            //
            $editor = new TextEdit('total_days_edit');
            $editColumn = new CustomEditColumn('Total Days', 'Total Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Dry-Hop Days field
            //
            $editor = new TextEdit('dry-hop_days_edit');
            $editColumn = new CustomEditColumn('Dry-Hop Days', 'Dry-Hop Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for YB field
            //
            $editor = new TextEdit('yb_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('YB', 'YB', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DO-KO field
            //
            $editor = new TextEdit('do-ko_edit');
            $editColumn = new CustomEditColumn('DO-KO', 'DO-KO', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DO-Pre-Transfer field
            //
            $editor = new TextEdit('do-pre-transfer_edit');
            $editColumn = new CustomEditColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DO-Post-Transfer field
            //
            $editor = new TextEdit('do-post-transfer_edit');
            $editColumn = new CustomEditColumn('DO-Post-Transfer', 'DO-Post-Transfer', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for DO-Pickup field
            //
            $editor = new TextEdit('do-pickup_edit');
            $editColumn = new CustomEditColumn('DO-Pickup', 'DO-Pickup', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for CO2 Volumes field
            //
            $editor = new TextEdit('co2_volumes_edit');
            $editColumn = new CustomEditColumn('CO2 Volumes', 'CO2 Volumes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Blend into Batch field
            //
            $editor = new TextEdit('blend_into_batch_edit');
            $editor->SetMaxLength(75);
            $editColumn = new CustomEditColumn('Blend Into Batch', 'Blend into Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Brews to Blend field
            //
            $editor = new TextEdit('brews_to_blend_edit');
            $editColumn = new CustomEditColumn('Brews To Blend', 'Brews to Blend', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Viable Cells field
            //
            $editor = new TextEdit('viable_cells_edit');
            $editColumn = new CustomEditColumn('Viable Cells', 'Viable Cells', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Viability field
            //
            $editor = new TextEdit('viability_edit');
            $editColumn = new CustomEditColumn('Viability', 'Viability', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for % Solids field
            //
            $editor = new TextEdit('%_solids_edit');
            $editColumn = new CustomEditColumn('% Solids', '% Solids', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Liters of Slurry field
            //
            $editor = new TextEdit('liters_of_slurry_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Liters Of Slurry', 'Liters of Slurry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Dilution Factor field
            //
            $editor = new TextEdit('dilution_factor_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Dilution Factor', 'Dilution Factor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #1 field
            //
            $editor = new ImageUploader('image_#1_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #1', 'Image #1', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #1_handler_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #1 : URL field
            //
            $editor = new TextAreaEdit('image_#1_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #1 : URL', 'Image #1 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #2 field
            //
            $editor = new ImageUploader('image_#2_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #2', 'Image #2', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #2_handler_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #2 : URL field
            //
            $editor = new TextAreaEdit('image_#2_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #2 : URL', 'Image #2 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #3 field
            //
            $editor = new ImageUploader('image_#3_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #3', 'Image #3', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #3_handler_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #3 : URL field
            //
            $editor = new TextAreaEdit('image_#3_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #3 : URL', 'Image #3 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #4 field
            //
            $editor = new ImageUploader('image_#4_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #4', 'Image #4', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #4_handler_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Image #4 : URL field
            //
            $editor = new TextAreaEdit('image_#4_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #4 : URL', 'Image #4 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for pH field
            //
            $editor = new TextEdit('ph_edit');
            $editColumn = new CustomEditColumn('PH', 'pH', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Turbidity (FTU) field
            //
            $editor = new TextEdit('turbidity_(ftu)_edit');
            $editColumn = new CustomEditColumn('Turbidity (FTU)', 'Turbidity (FTU)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for Flow Rate field
            //
            $editor = new TextEdit('flow_rate_edit');
            $editColumn = new CustomEditColumn('Flow Rate', 'Flow Rate', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
            
            //
            // Edit column for CO2 Pressure field
            //
            $editor = new TextEdit('co2_pressure_edit');
            $editColumn = new CustomEditColumn('CO2 Pressure', 'CO2 Pressure', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddEditColumn($editColumn);
        }
    
        protected function AddMultiEditColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Date field
            //
            $editor = new DateTimeEdit('date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Date', 'Date', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Tank field
            //
            $editor = new TextEdit('tank_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Tank', 'Tank', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'multi_edit_Batches_TankLogs_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Nickname field
            //
            $editor = new TextEdit('nickname_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Nickname', 'Nickname', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Action field
            //
            $editor = new TextEdit('action_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Action', 'Action', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for SG Entry field
            //
            $editor = new TextEdit('sg_entry_edit');
            $editColumn = new CustomEditColumn('SG Entry', 'SG Entry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Plato Entry field
            //
            $editor = new TextEdit('plato_entry_edit');
            $editColumn = new CustomEditColumn('Plato Entry', 'Plato Entry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Calc SG field
            //
            $editor = new TextEdit('calc_sg_edit');
            $editColumn = new CustomEditColumn('Calc SG', 'Calc SG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Calc Plato field
            //
            $editor = new TextEdit('calc_plato_edit');
            $editColumn = new CustomEditColumn('Calc Plato', 'Calc Plato', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Gravity field
            //
            $editor = new TextEdit('gravity_edit');
            $editColumn = new CustomEditColumn('Gravity', 'Gravity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Total Days field
            //
            $editor = new TextEdit('total_days_edit');
            $editColumn = new CustomEditColumn('Total Days', 'Total Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dry-Hop Days field
            //
            $editor = new TextEdit('dry-hop_days_edit');
            $editColumn = new CustomEditColumn('Dry-Hop Days', 'Dry-Hop Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for YB field
            //
            $editor = new TextEdit('yb_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('YB', 'YB', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DO-KO field
            //
            $editor = new TextEdit('do-ko_edit');
            $editColumn = new CustomEditColumn('DO-KO', 'DO-KO', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DO-Pre-Transfer field
            //
            $editor = new TextEdit('do-pre-transfer_edit');
            $editColumn = new CustomEditColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DO-Post-Transfer field
            //
            $editor = new TextEdit('do-post-transfer_edit');
            $editColumn = new CustomEditColumn('DO-Post-Transfer', 'DO-Post-Transfer', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DO-Pickup field
            //
            $editor = new TextEdit('do-pickup_edit');
            $editColumn = new CustomEditColumn('DO-Pickup', 'DO-Pickup', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for CO2 Volumes field
            //
            $editor = new TextEdit('co2_volumes_edit');
            $editColumn = new CustomEditColumn('CO2 Volumes', 'CO2 Volumes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Blend into Batch field
            //
            $editor = new TextEdit('blend_into_batch_edit');
            $editor->SetMaxLength(75);
            $editColumn = new CustomEditColumn('Blend Into Batch', 'Blend into Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews to Blend field
            //
            $editor = new TextEdit('brews_to_blend_edit');
            $editColumn = new CustomEditColumn('Brews To Blend', 'Brews to Blend', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Viable Cells field
            //
            $editor = new TextEdit('viable_cells_edit');
            $editColumn = new CustomEditColumn('Viable Cells', 'Viable Cells', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Viability field
            //
            $editor = new TextEdit('viability_edit');
            $editColumn = new CustomEditColumn('Viability', 'Viability', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for % Solids field
            //
            $editor = new TextEdit('%_solids_edit');
            $editColumn = new CustomEditColumn('% Solids', '% Solids', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Liters of Slurry field
            //
            $editor = new TextEdit('liters_of_slurry_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Liters Of Slurry', 'Liters of Slurry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dilution Factor field
            //
            $editor = new TextEdit('dilution_factor_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Dilution Factor', 'Dilution Factor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #1 field
            //
            $editor = new ImageUploader('image_#1_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #1', 'Image #1', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #1_handler_multi_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #1 : URL field
            //
            $editor = new TextAreaEdit('image_#1_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #1 : URL', 'Image #1 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #2 field
            //
            $editor = new ImageUploader('image_#2_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #2', 'Image #2', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #2_handler_multi_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #2 : URL field
            //
            $editor = new TextAreaEdit('image_#2_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #2 : URL', 'Image #2 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #3 field
            //
            $editor = new ImageUploader('image_#3_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #3', 'Image #3', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #3_handler_multi_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #3 : URL field
            //
            $editor = new TextAreaEdit('image_#3_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #3 : URL', 'Image #3 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #4 field
            //
            $editor = new ImageUploader('image_#4_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #4', 'Image #4', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #4_handler_multi_edit');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Image #4 : URL field
            //
            $editor = new TextAreaEdit('image_#4_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #4 : URL', 'Image #4 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for pH field
            //
            $editor = new TextEdit('ph_edit');
            $editColumn = new CustomEditColumn('PH', 'pH', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Turbidity (FTU) field
            //
            $editor = new TextEdit('turbidity_(ftu)_edit');
            $editColumn = new CustomEditColumn('Turbidity (FTU)', 'Turbidity (FTU)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Flow Rate field
            //
            $editor = new TextEdit('flow_rate_edit');
            $editColumn = new CustomEditColumn('Flow Rate', 'Flow Rate', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for CO2 Pressure field
            //
            $editor = new TextEdit('co2_pressure_edit');
            $editColumn = new CustomEditColumn('CO2 Pressure', 'CO2 Pressure', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
        }
    
        protected function AddToggleEditColumns(Grid $grid)
        {
    
        }
    
        protected function AddInsertColumns(Grid $grid)
        {
            //
            // Edit column for updated field
            //
            $editor = new DateTimeEdit('updated_edit', false, 'Y-m-d H:i:s');
            $editColumn = new CustomEditColumn('Updated', 'updated', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Date field
            //
            $editor = new DateTimeEdit('date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Date', 'Date', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Tank field
            //
            $editor = new TextEdit('tank_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Tank', 'Tank', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Batch field
            //
            $editor = new DynamicCombobox('batch_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Batch', 'Batch', 'Batch_id', 'insert_Batches_TankLogs_Batch_search', $editor, $this->dataset, $lookupDataset, 'Batch', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Nickname field
            //
            $editor = new TextEdit('nickname_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Nickname', 'Nickname', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Action field
            //
            $editor = new TextEdit('action_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Action', 'Action', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for SG Entry field
            //
            $editor = new TextEdit('sg_entry_edit');
            $editColumn = new CustomEditColumn('SG Entry', 'SG Entry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Plato Entry field
            //
            $editor = new TextEdit('plato_entry_edit');
            $editColumn = new CustomEditColumn('Plato Entry', 'Plato Entry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Calc SG field
            //
            $editor = new TextEdit('calc_sg_edit');
            $editColumn = new CustomEditColumn('Calc SG', 'Calc SG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Calc Plato field
            //
            $editor = new TextEdit('calc_plato_edit');
            $editColumn = new CustomEditColumn('Calc Plato', 'Calc Plato', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Gravity field
            //
            $editor = new TextEdit('gravity_edit');
            $editColumn = new CustomEditColumn('Gravity', 'Gravity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Total Days field
            //
            $editor = new TextEdit('total_days_edit');
            $editColumn = new CustomEditColumn('Total Days', 'Total Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dry-Hop Days field
            //
            $editor = new TextEdit('dry-hop_days_edit');
            $editColumn = new CustomEditColumn('Dry-Hop Days', 'Dry-Hop Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for YB field
            //
            $editor = new TextEdit('yb_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('YB', 'YB', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DO-KO field
            //
            $editor = new TextEdit('do-ko_edit');
            $editColumn = new CustomEditColumn('DO-KO', 'DO-KO', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DO-Pre-Transfer field
            //
            $editor = new TextEdit('do-pre-transfer_edit');
            $editColumn = new CustomEditColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DO-Post-Transfer field
            //
            $editor = new TextEdit('do-post-transfer_edit');
            $editColumn = new CustomEditColumn('DO-Post-Transfer', 'DO-Post-Transfer', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DO-Pickup field
            //
            $editor = new TextEdit('do-pickup_edit');
            $editColumn = new CustomEditColumn('DO-Pickup', 'DO-Pickup', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for CO2 Volumes field
            //
            $editor = new TextEdit('co2_volumes_edit');
            $editColumn = new CustomEditColumn('CO2 Volumes', 'CO2 Volumes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Blend into Batch field
            //
            $editor = new TextEdit('blend_into_batch_edit');
            $editor->SetMaxLength(75);
            $editColumn = new CustomEditColumn('Blend Into Batch', 'Blend into Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews to Blend field
            //
            $editor = new TextEdit('brews_to_blend_edit');
            $editColumn = new CustomEditColumn('Brews To Blend', 'Brews to Blend', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Viable Cells field
            //
            $editor = new TextEdit('viable_cells_edit');
            $editColumn = new CustomEditColumn('Viable Cells', 'Viable Cells', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Viability field
            //
            $editor = new TextEdit('viability_edit');
            $editColumn = new CustomEditColumn('Viability', 'Viability', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for % Solids field
            //
            $editor = new TextEdit('%_solids_edit');
            $editColumn = new CustomEditColumn('% Solids', '% Solids', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Liters of Slurry field
            //
            $editor = new TextEdit('liters_of_slurry_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Liters Of Slurry', 'Liters of Slurry', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dilution Factor field
            //
            $editor = new TextEdit('dilution_factor_edit');
            $editor->SetMaxLength(11);
            $editColumn = new CustomEditColumn('Dilution Factor', 'Dilution Factor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #1 field
            //
            $editor = new ImageUploader('image_#1_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #1', 'Image #1', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #1_handler_insert');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #1 : URL field
            //
            $editor = new TextAreaEdit('image_#1_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #1 : URL', 'Image #1 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #2 field
            //
            $editor = new ImageUploader('image_#2_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #2', 'Image #2', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #2_handler_insert');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #2 : URL field
            //
            $editor = new TextAreaEdit('image_#2_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #2 : URL', 'Image #2 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #3 field
            //
            $editor = new ImageUploader('image_#3_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #3', 'Image #3', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #3_handler_insert');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #3 : URL field
            //
            $editor = new TextAreaEdit('image_#3_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #3 : URL', 'Image #3 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #4 field
            //
            $editor = new ImageUploader('image_#4_edit');
            $editor->SetShowImage(false);
            $editColumn = new FileUploadingColumn('Image #4', 'Image #4', $editor, $this->dataset, false, false, 'Batches_TankLogs_Image #4_handler_insert');
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Image #4 : URL field
            //
            $editor = new TextAreaEdit('image_#4_:_url_edit', 50, 8);
            $editColumn = new CustomEditColumn('Image #4 : URL', 'Image #4 : URL', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for pH field
            //
            $editor = new TextEdit('ph_edit');
            $editColumn = new CustomEditColumn('PH', 'pH', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Turbidity (FTU) field
            //
            $editor = new TextEdit('turbidity_(ftu)_edit');
            $editColumn = new CustomEditColumn('Turbidity (FTU)', 'Turbidity (FTU)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Flow Rate field
            //
            $editor = new TextEdit('flow_rate_edit');
            $editColumn = new CustomEditColumn('Flow Rate', 'Flow Rate', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for CO2 Pressure field
            //
            $editor = new TextEdit('co2_pressure_edit');
            $editColumn = new CustomEditColumn('CO2 Pressure', 'CO2 Pressure', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            $grid->SetShowAddButton(true && $this->GetSecurityInfo()->HasAddGrant());
        }
    
        private function AddMultiUploadColumn(Grid $grid)
        {
    
        }
    
        protected function AddPrintColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Date field
            //
            $column = new DateTimeViewColumn('Date', 'Date', 'Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Tank field
            //
            $column = new TextViewColumn('Tank', 'Tank', 'Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Action field
            //
            $column = new TextViewColumn('Action', 'Action', 'Action', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for SG Entry field
            //
            $column = new NumberViewColumn('SG Entry', 'SG Entry', 'SG Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Plato Entry field
            //
            $column = new NumberViewColumn('Plato Entry', 'Plato Entry', 'Plato Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Calc SG field
            //
            $column = new NumberViewColumn('Calc SG', 'Calc SG', 'Calc SG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Calc Plato field
            //
            $column = new NumberViewColumn('Calc Plato', 'Calc Plato', 'Calc Plato', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Gravity field
            //
            $column = new NumberViewColumn('Gravity', 'Gravity', 'Gravity', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new NumberViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dry-Hop Days field
            //
            $column = new NumberViewColumn('Dry-Hop Days', 'Dry-Hop Days', 'Dry-Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for YB field
            //
            $column = new TextViewColumn('YB', 'YB', 'YB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for DO-KO field
            //
            $column = new NumberViewColumn('DO-KO', 'DO-KO', 'DO-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for DO-Pre-Transfer field
            //
            $column = new NumberViewColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', 'DO-Pre-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for DO-Post-Transfer field
            //
            $column = new NumberViewColumn('DO-Post-Transfer', 'DO-Post-Transfer', 'DO-Post-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for DO-Pickup field
            //
            $column = new NumberViewColumn('DO-Pickup', 'DO-Pickup', 'DO-Pickup', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new NumberViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Blend into Batch field
            //
            $column = new TextViewColumn('Blend into Batch', 'Blend into Batch', 'Blend Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews to Blend field
            //
            $column = new NumberViewColumn('Brews to Blend', 'Brews to Blend', 'Brews To Blend', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Viable Cells field
            //
            $column = new NumberViewColumn('Viable Cells', 'Viable Cells', 'Viable Cells', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Viability field
            //
            $column = new NumberViewColumn('Viability', 'Viability', 'Viability', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for % Solids field
            //
            $column = new NumberViewColumn('% Solids', '% Solids', '% Solids', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Liters of Slurry field
            //
            $column = new TextViewColumn('Liters of Slurry', 'Liters of Slurry', 'Liters Of Slurry', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dilution Factor field
            //
            $column = new TextViewColumn('Dilution Factor', 'Dilution Factor', 'Dilution Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #1 field
            //
            $column = new DownloadDataColumn('Image #1', 'Image #1', 'Image #1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #1 : URL field
            //
            $column = new TextViewColumn('Image #1 : URL', 'Image #1 : URL', 'Image #1 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #2 field
            //
            $column = new DownloadDataColumn('Image #2', 'Image #2', 'Image #2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #2 : URL field
            //
            $column = new TextViewColumn('Image #2 : URL', 'Image #2 : URL', 'Image #2 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #3 field
            //
            $column = new DownloadDataColumn('Image #3', 'Image #3', 'Image #3', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #3 : URL field
            //
            $column = new TextViewColumn('Image #3 : URL', 'Image #3 : URL', 'Image #3 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #4 field
            //
            $column = new DownloadDataColumn('Image #4', 'Image #4', 'Image #4', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Image #4 : URL field
            //
            $column = new TextViewColumn('Image #4 : URL', 'Image #4 : URL', 'Image #4 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for pH field
            //
            $column = new NumberViewColumn('pH', 'pH', 'PH', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Turbidity (FTU) field
            //
            $column = new NumberViewColumn('Turbidity (FTU)', 'Turbidity (FTU)', 'Turbidity (FTU)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Flow Rate field
            //
            $column = new NumberViewColumn('Flow Rate', 'Flow Rate', 'Flow Rate', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
            
            //
            // View column for CO2 Pressure field
            //
            $column = new NumberViewColumn('CO2 Pressure', 'CO2 Pressure', 'CO2 Pressure', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddPrintColumn($column);
        }
    
        protected function AddExportColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddExportColumn($column);
            
            //
            // View column for Date field
            //
            $column = new DateTimeViewColumn('Date', 'Date', 'Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for Tank field
            //
            $column = new TextViewColumn('Tank', 'Tank', 'Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Action field
            //
            $column = new TextViewColumn('Action', 'Action', 'Action', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for SG Entry field
            //
            $column = new NumberViewColumn('SG Entry', 'SG Entry', 'SG Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Plato Entry field
            //
            $column = new NumberViewColumn('Plato Entry', 'Plato Entry', 'Plato Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Calc SG field
            //
            $column = new NumberViewColumn('Calc SG', 'Calc SG', 'Calc SG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Calc Plato field
            //
            $column = new NumberViewColumn('Calc Plato', 'Calc Plato', 'Calc Plato', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Gravity field
            //
            $column = new NumberViewColumn('Gravity', 'Gravity', 'Gravity', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new NumberViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Dry-Hop Days field
            //
            $column = new NumberViewColumn('Dry-Hop Days', 'Dry-Hop Days', 'Dry-Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for YB field
            //
            $column = new TextViewColumn('YB', 'YB', 'YB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for DO-KO field
            //
            $column = new NumberViewColumn('DO-KO', 'DO-KO', 'DO-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for DO-Pre-Transfer field
            //
            $column = new NumberViewColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', 'DO-Pre-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for DO-Post-Transfer field
            //
            $column = new NumberViewColumn('DO-Post-Transfer', 'DO-Post-Transfer', 'DO-Post-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for DO-Pickup field
            //
            $column = new NumberViewColumn('DO-Pickup', 'DO-Pickup', 'DO-Pickup', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new NumberViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Blend into Batch field
            //
            $column = new TextViewColumn('Blend into Batch', 'Blend into Batch', 'Blend Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews to Blend field
            //
            $column = new NumberViewColumn('Brews to Blend', 'Brews to Blend', 'Brews To Blend', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Viable Cells field
            //
            $column = new NumberViewColumn('Viable Cells', 'Viable Cells', 'Viable Cells', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Viability field
            //
            $column = new NumberViewColumn('Viability', 'Viability', 'Viability', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for % Solids field
            //
            $column = new NumberViewColumn('% Solids', '% Solids', '% Solids', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Liters of Slurry field
            //
            $column = new TextViewColumn('Liters of Slurry', 'Liters of Slurry', 'Liters Of Slurry', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dilution Factor field
            //
            $column = new TextViewColumn('Dilution Factor', 'Dilution Factor', 'Dilution Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #1 field
            //
            $column = new DownloadDataColumn('Image #1', 'Image #1', 'Image #1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #1 : URL field
            //
            $column = new TextViewColumn('Image #1 : URL', 'Image #1 : URL', 'Image #1 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #2 field
            //
            $column = new DownloadDataColumn('Image #2', 'Image #2', 'Image #2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #2 : URL field
            //
            $column = new TextViewColumn('Image #2 : URL', 'Image #2 : URL', 'Image #2 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #3 field
            //
            $column = new DownloadDataColumn('Image #3', 'Image #3', 'Image #3', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #3 : URL field
            //
            $column = new TextViewColumn('Image #3 : URL', 'Image #3 : URL', 'Image #3 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #4 field
            //
            $column = new DownloadDataColumn('Image #4', 'Image #4', 'Image #4', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Image #4 : URL field
            //
            $column = new TextViewColumn('Image #4 : URL', 'Image #4 : URL', 'Image #4 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for pH field
            //
            $column = new NumberViewColumn('pH', 'pH', 'PH', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Turbidity (FTU) field
            //
            $column = new NumberViewColumn('Turbidity (FTU)', 'Turbidity (FTU)', 'Turbidity (FTU)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for Flow Rate field
            //
            $column = new NumberViewColumn('Flow Rate', 'Flow Rate', 'Flow Rate', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
            
            //
            // View column for CO2 Pressure field
            //
            $column = new NumberViewColumn('CO2 Pressure', 'CO2 Pressure', 'CO2 Pressure', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddExportColumn($column);
        }
    
        private function AddCompareColumns(Grid $grid)
        {
            //
            // View column for updated field
            //
            $column = new DateTimeViewColumn('updated', 'updated', 'Updated', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d H:i:s');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Date field
            //
            $column = new DateTimeViewColumn('Date', 'Date', 'Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Tank field
            //
            $column = new TextViewColumn('Tank', 'Tank', 'Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Batch', 'Batch_id', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Action field
            //
            $column = new TextViewColumn('Action', 'Action', 'Action', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for SG Entry field
            //
            $column = new NumberViewColumn('SG Entry', 'SG Entry', 'SG Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Plato Entry field
            //
            $column = new NumberViewColumn('Plato Entry', 'Plato Entry', 'Plato Entry', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Calc SG field
            //
            $column = new NumberViewColumn('Calc SG', 'Calc SG', 'Calc SG', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Calc Plato field
            //
            $column = new NumberViewColumn('Calc Plato', 'Calc Plato', 'Calc Plato', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Gravity field
            //
            $column = new NumberViewColumn('Gravity', 'Gravity', 'Gravity', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new NumberViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dry-Hop Days field
            //
            $column = new NumberViewColumn('Dry-Hop Days', 'Dry-Hop Days', 'Dry-Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for YB field
            //
            $column = new TextViewColumn('YB', 'YB', 'YB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for DO-KO field
            //
            $column = new NumberViewColumn('DO-KO', 'DO-KO', 'DO-KO', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for DO-Pre-Transfer field
            //
            $column = new NumberViewColumn('DO-Pre-Transfer', 'DO-Pre-Transfer', 'DO-Pre-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for DO-Post-Transfer field
            //
            $column = new NumberViewColumn('DO-Post-Transfer', 'DO-Post-Transfer', 'DO-Post-Transfer', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for DO-Pickup field
            //
            $column = new NumberViewColumn('DO-Pickup', 'DO-Pickup', 'DO-Pickup', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new NumberViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Blend into Batch field
            //
            $column = new TextViewColumn('Blend into Batch', 'Blend into Batch', 'Blend Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews to Blend field
            //
            $column = new NumberViewColumn('Brews to Blend', 'Brews to Blend', 'Brews To Blend', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Viable Cells field
            //
            $column = new NumberViewColumn('Viable Cells', 'Viable Cells', 'Viable Cells', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Viability field
            //
            $column = new NumberViewColumn('Viability', 'Viability', 'Viability', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for % Solids field
            //
            $column = new NumberViewColumn('% Solids', '% Solids', '% Solids', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Liters of Slurry field
            //
            $column = new TextViewColumn('Liters of Slurry', 'Liters of Slurry', 'Liters Of Slurry', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dilution Factor field
            //
            $column = new TextViewColumn('Dilution Factor', 'Dilution Factor', 'Dilution Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #1 field
            //
            $column = new DownloadDataColumn('Image #1', 'Image #1', 'Image #1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #1 : URL field
            //
            $column = new TextViewColumn('Image #1 : URL', 'Image #1 : URL', 'Image #1 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #2 field
            //
            $column = new DownloadDataColumn('Image #2', 'Image #2', 'Image #2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #2 : URL field
            //
            $column = new TextViewColumn('Image #2 : URL', 'Image #2 : URL', 'Image #2 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #3 field
            //
            $column = new DownloadDataColumn('Image #3', 'Image #3', 'Image #3', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #3 : URL field
            //
            $column = new TextViewColumn('Image #3 : URL', 'Image #3 : URL', 'Image #3 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #4 field
            //
            $column = new DownloadDataColumn('Image #4', 'Image #4', 'Image #4', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Image #4 : URL field
            //
            $column = new TextViewColumn('Image #4 : URL', 'Image #4 : URL', 'Image #4 : URL', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for pH field
            //
            $column = new NumberViewColumn('pH', 'pH', 'PH', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Turbidity (FTU) field
            //
            $column = new NumberViewColumn('Turbidity (FTU)', 'Turbidity (FTU)', 'Turbidity (FTU)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Flow Rate field
            //
            $column = new NumberViewColumn('Flow Rate', 'Flow Rate', 'Flow Rate', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
            
            //
            // View column for CO2 Pressure field
            //
            $column = new NumberViewColumn('CO2 Pressure', 'CO2 Pressure', 'CO2 Pressure', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(4);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('.');
            $grid->AddCompareColumn($column);
        }
    
        private function AddCompareHeaderColumns(Grid $grid)
        {
    
        }
    
        public function GetPageDirection()
        {
            return null;
        }
    
        public function isFilterConditionRequired()
        {
            return false;
        }
    
        protected function ApplyCommonColumnEditProperties(CustomEditColumn $column)
        {
            $column->SetDisplaySetToNullCheckBox(false);
            $column->SetDisplaySetToDefaultCheckBox(false);
    		$column->SetVariableContainer($this->GetColumnVariableContainer());
        }
    
        function GetCustomClientScript()
        {
            return ;
        }
        
        function GetOnPageLoadedClientScript()
        {
            return ;
        }
    
        protected function CreateGrid()
        {
            $result = new Grid($this, $this->dataset);
            if ($this->GetSecurityInfo()->HasDeleteGrant())
               $result->SetAllowDeleteSelected(true);
            else
               $result->SetAllowDeleteSelected(false);   
            
            ApplyCommonPageSettings($this, $result);
            
            $result->SetUseImagesForActions(true);
            $result->SetUseFixedHeader(false);
            $result->SetShowLineNumbers(false);
            $result->SetShowKeyColumnsImagesInHeader(false);
            $result->SetViewMode(ViewMode::TABLE);
            $result->setEnableRuntimeCustomization(true);
            $result->setAllowCompare(true);
            $this->AddCompareHeaderColumns($result);
            $this->AddCompareColumns($result);
            $result->setMultiEditAllowed($this->GetSecurityInfo()->HasEditGrant() && true);
            $result->setTableBordered(false);
            $result->setTableCondensed(false);
            
            $result->SetHighlightRowAtHover(false);
            $result->SetWidth('');
            $this->AddOperationsColumns($result);
            $this->AddFieldColumns($result);
            $this->AddSingleRecordViewColumns($result);
            $this->AddEditColumns($result);
            $this->AddMultiEditColumns($result);
            $this->AddToggleEditColumns($result);
            $this->AddInsertColumns($result);
            $this->AddPrintColumns($result);
            $this->AddExportColumns($result);
            $this->AddMultiUploadColumn($result);
    
    
            $this->SetShowPageList(true);
            $this->SetShowTopPageNavigator(true);
            $this->SetShowBottomPageNavigator(true);
            $this->setAllowedActions(array('view', 'insert', 'copy', 'edit', 'multi-edit', 'delete', 'multi-delete'));
            $this->setPrintListAvailable(true);
            $this->setPrintListRecordAvailable(false);
            $this->setPrintOneRecordAvailable(true);
            $this->setAllowPrintSelectedRecords(true);
            $this->setExportListAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportSelectedRecordsAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportListRecordAvailable(array());
            $this->setExportOneRecordAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
    
            return $result;
        }
     
        protected function setClientSideEvents(Grid $grid) {
    
        }
    
        protected function doRegisterHandlers() {
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #1', 'Image #1_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #2', 'Image #2_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #3', 'Image #3_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #4', 'Image #4_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #1', 'Image #1_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #2', 'Image #2_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #3', 'Image #3_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #4', 'Image #4_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #1', 'Image #1_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #2', 'Image #2_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #3', 'Image #3_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #4', 'Image #4_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_TankLogs_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #1', 'Batches_TankLogs_Image #1_handler_insert', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #2', 'Batches_TankLogs_Image #2_handler_insert', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #3', 'Batches_TankLogs_Image #3_handler_insert', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #4', 'Batches_TankLogs_Image #4_handler_insert', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_TankLogs_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #1', 'Image #1_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #2', 'Image #2_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #3', 'Image #3_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new DownloadHTTPHandler($this->dataset, 'Image #4', 'Image #4_handler', '', '', true);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'edit_Batches_TankLogs_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #1', 'Batches_TankLogs_Image #1_handler_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #2', 'Batches_TankLogs_Image #2_handler_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #3', 'Batches_TankLogs_Image #3_handler_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #4', 'Batches_TankLogs_Image #4_handler_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_TankLogs_Batch_search', 'Batch', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #1', 'Batches_TankLogs_Image #1_handler_multi_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #2', 'Batches_TankLogs_Image #2_handler_multi_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #3', 'Batches_TankLogs_Image #3_handler_multi_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
            
            $handler = new ImageHTTPHandler($this->dataset, 'Image #4', 'Batches_TankLogs_Image #4_handler_multi_edit', new NullFilter());
            GetApplication()->RegisterHTTPHandler($handler);
        }
       
        protected function doCustomRenderColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderPrintColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderExportColumn($exportType, $fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomDrawRow($rowData, &$cellFontColor, &$cellFontSize, &$cellBgColor, &$cellItalicAttr, &$cellBoldAttr)
        {
    
        }
    
        protected function doExtendedCustomDrawRow($rowData, &$rowCellStyles, &$rowStyles, &$rowClasses, &$cellClasses)
        {
    
        }
    
        protected function doCustomRenderTotal($totalValue, $aggregate, $columnName, &$customText, &$handled)
        {
    
        }
    
        protected function doCustomDefaultValues(&$values, &$handled) 
        {
    
        }
    
        protected function doCustomCompareColumn($columnName, $valueA, $valueB, &$result)
        {
    
        }
    
        protected function doBeforeInsertRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeUpdateRecord($page, $oldRowData, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeDeleteRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterInsertRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterUpdateRecord($page, $oldRowData, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterDeleteRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doCustomHTMLHeader($page, &$customHtmlHeaderText)
        { 
    
        }
    
        protected function doGetCustomTemplate($type, $part, $mode, &$result, &$params)
        {
    
        }
    
        protected function doGetCustomExportOptions(Page $page, $exportType, $rowData, &$options)
        {
    
        }
    
        protected function doFileUpload($fieldName, $rowData, &$result, &$accept, $originalFileName, $originalFileExtension, $fileSize, $tempFileName)
        {
    
        }
    
        protected function doPrepareChart(Chart $chart)
        {
    
        }
    
        protected function doPrepareColumnFilter(ColumnFilter $columnFilter)
        {
    
        }
    
        protected function doPrepareFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
    
        }
    
        protected function doGetSelectionFilters(FixedKeysArray $columns, &$result)
        {
    
        }
    
        protected function doGetCustomFormLayout($mode, FixedKeysArray $columns, FormLayout $layout)
        {
    
        }
    
        protected function doGetCustomColumnGroup(FixedKeysArray $columns, ViewColumnGroup $columnGroup)
        {
    
        }
    
        protected function doPageLoaded()
        {
    
        }
    
        protected function doCalculateFields($rowData, $fieldName, &$value)
        {
    
        }
    
        protected function doGetCustomRecordPermissions(Page $page, &$usingCondition, $rowData, &$allowEdit, &$allowDelete, &$mergeWithDefault, &$handled)
        {
    
        }
    
        protected function doAddEnvironmentVariables(Page $page, &$variables)
        {
    
        }
    
    }
    
    // OnBeforePageExecute event handler
    
    
    
    class BatchesPage extends Page
    {
        protected function DoBeforeCreate()
        {
            $this->SetTitle('Batches');
            $this->SetMenuLabel('Batches');
    
            $this->dataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Batches`');
            $this->dataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new IntegerField('BatchID', true),
                    new StringField('Template', true),
                    new StringField('Batch', true, true),
                    new DateField('Brew Date'),
                    new IntegerField('Ingredient_Cnt'),
                    new IntegerField('Brews-Records'),
                    new StringField('Brews Blended from this Batch'),
                    new StringField('Brews Blended into this Batch'),
                    new IntegerField('Brews'),
                    new IntegerField('Total Brews Calc 1'),
                    new IntegerField('Total Brews Calc 2'),
                    new DateField('Brew Date Start Calc 1'),
                    new DateField('Brew Date End Calc 1'),
                    new DateField('Brew Date Start Calc 2'),
                    new DateField('Brew Date End Calc 2'),
                    new DateField('Brew Date Start'),
                    new DateField('Brew Date End'),
                    new IntegerField('Brew Days'),
                    new IntegerField('Total Brews (Net)'),
                    new StringField('ProPitch'),
                    new StringField('Yeast'),
                    new StringField('Yeast Source'),
                    new StringField('Yeast from FV'),
                    new StringField('Nickname'),
                    new StringField('Status'),
                    new StringField('Batch-Status'),
                    new StringField('Days Running 1'),
                    new StringField('Days Running 2'),
                    new StringField('Style'),
                    new StringField('FV'),
                    new StringField('FV Tank'),
                    new StringField('BT'),
                    new StringField('BT Tank'),
                    new StringField('Current Tank'),
                    new StringField('Bbls'),
                    new StringField('Color'),
                    new StringField('IBU'),
                    new StringField('OG-A'),
                    new StringField('OG-B'),
                    new StringField('OG-C'),
                    new StringField('OG-D'),
                    new StringField('OG-AB'),
                    new StringField('OG-ABC'),
                    new StringField('OG-ABCD'),
                    new StringField('OG'),
                    new StringField('FG_Min'),
                    new StringField('Current Gravity'),
                    new StringField('FG'),
                    new StringField('ABV'),
                    new StringField('Attenuation'),
                    new StringField('Yeast Pitch'),
                    new StringField('Blend Ratio'),
                    new StringField('Notes'),
                    new StringField('Status2'),
                    new StringField('Dry Hop Date'),
                    new StringField('Dry Hop Date Formula'),
                    new StringField('Crash Date'),
                    new StringField('Brite Tank Date'),
                    new StringField('Gone Date'),
                    new StringField('Dry Hop Days'),
                    new StringField('Total Days'),
                    new StringField('Dry Hopped Running'),
                    new StringField('User'),
                    new StringField('Maximum CO2'),
                    new StringField('CO2 Volumes'),
                    new StringField('This Batch Blended into Batch'),
                    new StringField('Batches Blended into this Batch'),
                    new StringField('Calculated Days'),
                    new StringField('Blended'),
                    new StringField('TankLog Count'),
                    new StringField('KegLog Count'),
                    new StringField('Kegs Count'),
                    new StringField('PackageLog Count'),
                    new StringField('KegOrders Count'),
                    new StringField('Net Bbls'),
                    new StringField('Canned & Kegged Barrels'),
                    new StringField('Canning Runs'),
                    new StringField('5G Kegs'),
                    new StringField('50L Kegs'),
                    new StringField('Brews-Bbls'),
                    new StringField('Brews-OG'),
                    new StringField('Net Beer Factor'),
                    new StringField('Batch Gross Bbls Calc'),
                    new StringField('Gross Bbls'),
                    new StringField('Remaining Bbls Calc'),
                    new StringField('Remaining Bbls (Est)'),
                    new StringField('Can Be Deleted'),
                    new StringField('Brews from Template'),
                    new StringField('FermStart-DateCalc'),
                    new StringField('FermStart-DateCalc2'),
                    new StringField('FermEnd-DateCalc'),
                    new StringField('FermEnd-DateCalc2'),
                    new StringField('Ferm-DateCalc'),
                    new StringField('Ferm-DateCalc2'),
                    new StringField('FermEnd-DateDayNumber'),
                    new StringField('DryHop-DateDayAdd'),
                    new StringField('Dryhop-DateCalc'),
                    new StringField('Dryhop-DateDayNumber'),
                    new StringField('Crash-DateDayAdd'),
                    new StringField('Crash-DateCalc'),
                    new StringField('Crash-DateDayNumber'),
                    new StringField('Transfer-DateDayAdd'),
                    new StringField('Transfer-DateCalc'),
                    new StringField('Transfer-DateDayNumber'),
                    new StringField('Package-DateDayAdd'),
                    new StringField('Package-DateCalc'),
                    new StringField('Scheduled Steps'),
                    new StringField('Steps Remaining'),
                    new StringField('PropCrash-DateCalc'),
                    new StringField('PropTrans-DateCalc'),
                    new StringField('Brew Size (Gallons)'),
                    new StringField('Brew % of 7Bbl'),
                    new StringField('Sum - Potential Yield'),
                    new StringField('Potential OG'),
                    new StringField('Efficiency'),
                    new StringField('Ratings'),
                    new StringField('CurrentTank_Name'),
                    new DateField('Canned'),
                    new StringField('PendingActivities'),
                    new StringField('TempLogsCount'),
                    new StringField('Rating')
                )
            );
            $this->dataset->AddLookupField('Template', 'Templates', new StringField('Template'), new IntegerField('id', false, false, false, false, 'Template_id', 'Template_id_Templates'), 'Template_id_Templates');
        }
    
        protected function DoPrepare() {
    
        }
    
        protected function CreatePageNavigator()
        {
            $result = new CompositePageNavigator($this);
            
            $partitionNavigator = new PageNavigator('pnav', $this, $this->dataset);
            $partitionNavigator->SetRowsPerPage(20);
            $result->AddPageNavigator($partitionNavigator);
            
            return $result;
        }
    
        protected function CreateRssGenerator()
        {
            return null;
        }
    
        protected function setupCharts()
        {
    
        }
    
        protected function getFiltersColumns()
        {
            return array(
                new FilterColumn($this->dataset, 'id', 'id', 'Id'),
                new FilterColumn($this->dataset, 'updated', 'updated', 'Updated'),
                new FilterColumn($this->dataset, 'BatchID', 'BatchID', 'Batch ID'),
                new FilterColumn($this->dataset, 'Template', 'Template_id', 'Template'),
                new FilterColumn($this->dataset, 'Batch', 'Batch', 'Batch'),
                new FilterColumn($this->dataset, 'Brew Date', 'Brew Date', 'Brew Date'),
                new FilterColumn($this->dataset, 'Ingredient_Cnt', 'Ingredient_Cnt', 'Ingredient Cnt'),
                new FilterColumn($this->dataset, 'Brews-Records', 'Brews-Records', 'Brews-Records'),
                new FilterColumn($this->dataset, 'Brews Blended from this Batch', 'Brews Blended from this Batch', 'Brews Blended From This Batch'),
                new FilterColumn($this->dataset, 'Brews Blended into this Batch', 'Brews Blended into this Batch', 'Brews Blended Into This Batch'),
                new FilterColumn($this->dataset, 'Brews', 'Brews', 'Brews'),
                new FilterColumn($this->dataset, 'Total Brews Calc 1', 'Total Brews Calc 1', 'Total Brews Calc 1'),
                new FilterColumn($this->dataset, 'Total Brews Calc 2', 'Total Brews Calc 2', 'Total Brews Calc 2'),
                new FilterColumn($this->dataset, 'Brew Date Start Calc 1', 'Brew Date Start Calc 1', 'Brew Date Start Calc 1'),
                new FilterColumn($this->dataset, 'Brew Date End Calc 1', 'Brew Date End Calc 1', 'Brew Date End Calc 1'),
                new FilterColumn($this->dataset, 'Brew Date Start Calc 2', 'Brew Date Start Calc 2', 'Brew Date Start Calc 2'),
                new FilterColumn($this->dataset, 'Brew Date End Calc 2', 'Brew Date End Calc 2', 'Brew Date End Calc 2'),
                new FilterColumn($this->dataset, 'Brew Date Start', 'Brew Date Start', 'Brew Date Start'),
                new FilterColumn($this->dataset, 'Brew Date End', 'Brew Date End', 'Brew Date End'),
                new FilterColumn($this->dataset, 'Brew Days', 'Brew Days', 'Brew Days'),
                new FilterColumn($this->dataset, 'Total Brews (Net)', 'Total Brews (Net)', 'Total Brews (Net)'),
                new FilterColumn($this->dataset, 'ProPitch', 'ProPitch', 'Pro Pitch'),
                new FilterColumn($this->dataset, 'Yeast', 'Yeast', 'Yeast'),
                new FilterColumn($this->dataset, 'Yeast Source', 'Yeast Source', 'Yeast Source'),
                new FilterColumn($this->dataset, 'Yeast from FV', 'Yeast from FV', 'Yeast From FV'),
                new FilterColumn($this->dataset, 'Nickname', 'Nickname', 'Nickname'),
                new FilterColumn($this->dataset, 'Status', 'Status', 'Status'),
                new FilterColumn($this->dataset, 'Batch-Status', 'Batch-Status', 'Batch-Status'),
                new FilterColumn($this->dataset, 'Days Running 1', 'Days Running 1', 'Days Running 1'),
                new FilterColumn($this->dataset, 'Days Running 2', 'Days Running 2', 'Days Running 2'),
                new FilterColumn($this->dataset, 'Style', 'Style', 'Style'),
                new FilterColumn($this->dataset, 'FV', 'FV', 'FV'),
                new FilterColumn($this->dataset, 'FV Tank', 'FV Tank', 'FV Tank'),
                new FilterColumn($this->dataset, 'BT', 'BT', 'BT'),
                new FilterColumn($this->dataset, 'BT Tank', 'BT Tank', 'BT Tank'),
                new FilterColumn($this->dataset, 'Current Tank', 'Current Tank', 'Current Tank'),
                new FilterColumn($this->dataset, 'Bbls', 'Bbls', 'Bbls'),
                new FilterColumn($this->dataset, 'Color', 'Color', 'Color'),
                new FilterColumn($this->dataset, 'IBU', 'IBU', 'IBU'),
                new FilterColumn($this->dataset, 'OG-A', 'OG-A', 'OG-A'),
                new FilterColumn($this->dataset, 'OG-B', 'OG-B', 'OG-B'),
                new FilterColumn($this->dataset, 'OG-C', 'OG-C', 'OG-C'),
                new FilterColumn($this->dataset, 'OG-D', 'OG-D', 'OG-D'),
                new FilterColumn($this->dataset, 'OG-AB', 'OG-AB', 'OG-AB'),
                new FilterColumn($this->dataset, 'OG-ABC', 'OG-ABC', 'OG-ABC'),
                new FilterColumn($this->dataset, 'OG-ABCD', 'OG-ABCD', 'OG-ABCD'),
                new FilterColumn($this->dataset, 'OG', 'OG', 'OG'),
                new FilterColumn($this->dataset, 'FG_Min', 'FG_Min', 'FG Min'),
                new FilterColumn($this->dataset, 'Current Gravity', 'Current Gravity', 'Current Gravity'),
                new FilterColumn($this->dataset, 'FG', 'FG', 'FG'),
                new FilterColumn($this->dataset, 'ABV', 'ABV', 'ABV'),
                new FilterColumn($this->dataset, 'Attenuation', 'Attenuation', 'Attenuation'),
                new FilterColumn($this->dataset, 'Yeast Pitch', 'Yeast Pitch', 'Yeast Pitch'),
                new FilterColumn($this->dataset, 'Blend Ratio', 'Blend Ratio', 'Blend Ratio'),
                new FilterColumn($this->dataset, 'Notes', 'Notes', 'Notes'),
                new FilterColumn($this->dataset, 'Status2', 'Status2', 'Status2'),
                new FilterColumn($this->dataset, 'Dry Hop Date', 'Dry Hop Date', 'Dry Hop Date'),
                new FilterColumn($this->dataset, 'Dry Hop Date Formula', 'Dry Hop Date Formula', 'Dry Hop Date Formula'),
                new FilterColumn($this->dataset, 'Crash Date', 'Crash Date', 'Crash Date'),
                new FilterColumn($this->dataset, 'Brite Tank Date', 'Brite Tank Date', 'Brite Tank Date'),
                new FilterColumn($this->dataset, 'Gone Date', 'Gone Date', 'Gone Date'),
                new FilterColumn($this->dataset, 'Dry Hop Days', 'Dry Hop Days', 'Dry Hop Days'),
                new FilterColumn($this->dataset, 'Total Days', 'Total Days', 'Total Days'),
                new FilterColumn($this->dataset, 'Dry Hopped Running', 'Dry Hopped Running', 'Dry Hopped Running'),
                new FilterColumn($this->dataset, 'User', 'User', 'User'),
                new FilterColumn($this->dataset, 'Maximum CO2', 'Maximum CO2', 'Maximum CO2'),
                new FilterColumn($this->dataset, 'CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes'),
                new FilterColumn($this->dataset, 'This Batch Blended into Batch', 'This Batch Blended into Batch', 'This Batch Blended Into Batch'),
                new FilterColumn($this->dataset, 'Batches Blended into this Batch', 'Batches Blended into this Batch', 'Batches Blended Into This Batch'),
                new FilterColumn($this->dataset, 'Calculated Days', 'Calculated Days', 'Calculated Days'),
                new FilterColumn($this->dataset, 'Blended', 'Blended', 'Blended'),
                new FilterColumn($this->dataset, 'TankLog Count', 'TankLog Count', 'Tank Log Count'),
                new FilterColumn($this->dataset, 'KegLog Count', 'KegLog Count', 'Keg Log Count'),
                new FilterColumn($this->dataset, 'Kegs Count', 'Kegs Count', 'Kegs Count'),
                new FilterColumn($this->dataset, 'PackageLog Count', 'PackageLog Count', 'Package Log Count'),
                new FilterColumn($this->dataset, 'KegOrders Count', 'KegOrders Count', 'Keg Orders Count'),
                new FilterColumn($this->dataset, 'Net Bbls', 'Net Bbls', 'Net Bbls'),
                new FilterColumn($this->dataset, 'Canned & Kegged Barrels', 'Canned & Kegged Barrels', 'Canned & Kegged Barrels'),
                new FilterColumn($this->dataset, 'Canning Runs', 'Canning Runs', 'Canning Runs'),
                new FilterColumn($this->dataset, '5G Kegs', '5G Kegs', '5 G Kegs'),
                new FilterColumn($this->dataset, '50L Kegs', '50L Kegs', '50 L Kegs'),
                new FilterColumn($this->dataset, 'Brews-Bbls', 'Brews-Bbls', 'Brews-Bbls'),
                new FilterColumn($this->dataset, 'Brews-OG', 'Brews-OG', 'Brews-OG'),
                new FilterColumn($this->dataset, 'Net Beer Factor', 'Net Beer Factor', 'Net Beer Factor'),
                new FilterColumn($this->dataset, 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc'),
                new FilterColumn($this->dataset, 'Gross Bbls', 'Gross Bbls', 'Gross Bbls'),
                new FilterColumn($this->dataset, 'Remaining Bbls Calc', 'Remaining Bbls Calc', 'Remaining Bbls Calc'),
                new FilterColumn($this->dataset, 'Remaining Bbls (Est)', 'Remaining Bbls (Est)', 'Remaining Bbls (Est)'),
                new FilterColumn($this->dataset, 'Can Be Deleted', 'Can Be Deleted', 'Can Be Deleted'),
                new FilterColumn($this->dataset, 'Brews from Template', 'Brews from Template', 'Brews From Template'),
                new FilterColumn($this->dataset, 'FermStart-DateCalc', 'FermStart-DateCalc', 'Ferm Start-Date Calc'),
                new FilterColumn($this->dataset, 'FermStart-DateCalc2', 'FermStart-DateCalc2', 'Ferm Start-Date Calc2'),
                new FilterColumn($this->dataset, 'FermEnd-DateCalc', 'FermEnd-DateCalc', 'Ferm End-Date Calc'),
                new FilterColumn($this->dataset, 'FermEnd-DateCalc2', 'FermEnd-DateCalc2', 'Ferm End-Date Calc2'),
                new FilterColumn($this->dataset, 'Ferm-DateCalc', 'Ferm-DateCalc', 'Ferm-Date Calc'),
                new FilterColumn($this->dataset, 'Ferm-DateCalc2', 'Ferm-DateCalc2', 'Ferm-Date Calc2'),
                new FilterColumn($this->dataset, 'FermEnd-DateDayNumber', 'FermEnd-DateDayNumber', 'Ferm End-Date Day Number'),
                new FilterColumn($this->dataset, 'DryHop-DateDayAdd', 'DryHop-DateDayAdd', 'Dry Hop-Date Day Add'),
                new FilterColumn($this->dataset, 'Dryhop-DateCalc', 'Dryhop-DateCalc', 'Dryhop-Date Calc'),
                new FilterColumn($this->dataset, 'Dryhop-DateDayNumber', 'Dryhop-DateDayNumber', 'Dryhop-Date Day Number'),
                new FilterColumn($this->dataset, 'Crash-DateDayAdd', 'Crash-DateDayAdd', 'Crash-Date Day Add'),
                new FilterColumn($this->dataset, 'Crash-DateCalc', 'Crash-DateCalc', 'Crash-Date Calc'),
                new FilterColumn($this->dataset, 'Crash-DateDayNumber', 'Crash-DateDayNumber', 'Crash-Date Day Number'),
                new FilterColumn($this->dataset, 'Transfer-DateDayAdd', 'Transfer-DateDayAdd', 'Transfer-Date Day Add'),
                new FilterColumn($this->dataset, 'Transfer-DateCalc', 'Transfer-DateCalc', 'Transfer-Date Calc'),
                new FilterColumn($this->dataset, 'Transfer-DateDayNumber', 'Transfer-DateDayNumber', 'Transfer-Date Day Number'),
                new FilterColumn($this->dataset, 'Package-DateDayAdd', 'Package-DateDayAdd', 'Package-Date Day Add'),
                new FilterColumn($this->dataset, 'Package-DateCalc', 'Package-DateCalc', 'Package-Date Calc'),
                new FilterColumn($this->dataset, 'Scheduled Steps', 'Scheduled Steps', 'Scheduled Steps'),
                new FilterColumn($this->dataset, 'Steps Remaining', 'Steps Remaining', 'Steps Remaining'),
                new FilterColumn($this->dataset, 'PropCrash-DateCalc', 'PropCrash-DateCalc', 'Prop Crash-Date Calc'),
                new FilterColumn($this->dataset, 'PropTrans-DateCalc', 'PropTrans-DateCalc', 'Prop Trans-Date Calc'),
                new FilterColumn($this->dataset, 'Brew Size (Gallons)', 'Brew Size (Gallons)', 'Brew Size (Gallons)'),
                new FilterColumn($this->dataset, 'Brew % of 7Bbl', 'Brew % of 7Bbl', 'Brew % Of 7 Bbl'),
                new FilterColumn($this->dataset, 'Sum - Potential Yield', 'Sum - Potential Yield', 'Sum - Potential Yield'),
                new FilterColumn($this->dataset, 'Potential OG', 'Potential OG', 'Potential OG'),
                new FilterColumn($this->dataset, 'Efficiency', 'Efficiency', 'Efficiency'),
                new FilterColumn($this->dataset, 'Ratings', 'Ratings', 'Ratings'),
                new FilterColumn($this->dataset, 'CurrentTank_Name', 'CurrentTank_Name', 'Current Tank Name'),
                new FilterColumn($this->dataset, 'Canned', 'Canned', 'Canned'),
                new FilterColumn($this->dataset, 'PendingActivities', 'PendingActivities', 'Pending Activities'),
                new FilterColumn($this->dataset, 'TempLogsCount', 'TempLogsCount', 'Temp Logs Count'),
                new FilterColumn($this->dataset, 'Rating', 'Rating', 'Rating')
            );
        }
    
        protected function setupQuickFilter(QuickFilter $quickFilter, FixedKeysArray $columns)
        {
            $quickFilter
                ->addColumn($columns['id'])
                ->addColumn($columns['BatchID'])
                ->addColumn($columns['Template'])
                ->addColumn($columns['Batch'])
                ->addColumn($columns['Brew Date'])
                ->addColumn($columns['Ingredient_Cnt'])
                ->addColumn($columns['Brews-Records'])
                ->addColumn($columns['Brews Blended from this Batch'])
                ->addColumn($columns['Brews Blended into this Batch'])
                ->addColumn($columns['Brews'])
                ->addColumn($columns['Brew Date Start'])
                ->addColumn($columns['Brew Date End'])
                ->addColumn($columns['Brew Days'])
                ->addColumn($columns['Total Brews (Net)'])
                ->addColumn($columns['ProPitch'])
                ->addColumn($columns['Yeast'])
                ->addColumn($columns['Yeast Source'])
                ->addColumn($columns['Yeast from FV'])
                ->addColumn($columns['Nickname'])
                ->addColumn($columns['Status'])
                ->addColumn($columns['Batch-Status'])
                ->addColumn($columns['Days Running 1'])
                ->addColumn($columns['Days Running 2'])
                ->addColumn($columns['Style'])
                ->addColumn($columns['FV'])
                ->addColumn($columns['FV Tank'])
                ->addColumn($columns['BT'])
                ->addColumn($columns['BT Tank'])
                ->addColumn($columns['Current Tank'])
                ->addColumn($columns['Bbls'])
                ->addColumn($columns['Color'])
                ->addColumn($columns['IBU'])
                ->addColumn($columns['OG-AB'])
                ->addColumn($columns['OG'])
                ->addColumn($columns['FG_Min'])
                ->addColumn($columns['Current Gravity'])
                ->addColumn($columns['FG'])
                ->addColumn($columns['ABV'])
                ->addColumn($columns['Attenuation'])
                ->addColumn($columns['Yeast Pitch'])
                ->addColumn($columns['Blend Ratio'])
                ->addColumn($columns['Notes'])
                ->addColumn($columns['Status2'])
                ->addColumn($columns['Dry Hop Date'])
                ->addColumn($columns['Dry Hop Date Formula'])
                ->addColumn($columns['Crash Date'])
                ->addColumn($columns['Brite Tank Date'])
                ->addColumn($columns['Gone Date'])
                ->addColumn($columns['Dry Hop Days'])
                ->addColumn($columns['Total Days'])
                ->addColumn($columns['Dry Hopped Running'])
                ->addColumn($columns['User'])
                ->addColumn($columns['Maximum CO2'])
                ->addColumn($columns['CO2 Volumes'])
                ->addColumn($columns['This Batch Blended into Batch'])
                ->addColumn($columns['Batches Blended into this Batch'])
                ->addColumn($columns['Calculated Days'])
                ->addColumn($columns['Blended'])
                ->addColumn($columns['TankLog Count'])
                ->addColumn($columns['KegLog Count'])
                ->addColumn($columns['Kegs Count'])
                ->addColumn($columns['PackageLog Count'])
                ->addColumn($columns['KegOrders Count'])
                ->addColumn($columns['Net Bbls'])
                ->addColumn($columns['Canned & Kegged Barrels'])
                ->addColumn($columns['Canning Runs'])
                ->addColumn($columns['5G Kegs'])
                ->addColumn($columns['50L Kegs'])
                ->addColumn($columns['Brews-Bbls'])
                ->addColumn($columns['Brews-OG'])
                ->addColumn($columns['Net Beer Factor'])
                ->addColumn($columns['Batch Gross Bbls Calc'])
                ->addColumn($columns['Gross Bbls'])
                ->addColumn($columns['Remaining Bbls Calc'])
                ->addColumn($columns['Remaining Bbls (Est)'])
                ->addColumn($columns['Can Be Deleted'])
                ->addColumn($columns['Brews from Template'])
                ->addColumn($columns['FermStart-DateCalc'])
                ->addColumn($columns['FermStart-DateCalc2'])
                ->addColumn($columns['FermEnd-DateCalc'])
                ->addColumn($columns['FermEnd-DateCalc2'])
                ->addColumn($columns['Ferm-DateCalc'])
                ->addColumn($columns['Ferm-DateCalc2'])
                ->addColumn($columns['FermEnd-DateDayNumber'])
                ->addColumn($columns['DryHop-DateDayAdd'])
                ->addColumn($columns['Dryhop-DateCalc'])
                ->addColumn($columns['Dryhop-DateDayNumber'])
                ->addColumn($columns['Crash-DateDayAdd'])
                ->addColumn($columns['Crash-DateCalc'])
                ->addColumn($columns['Crash-DateDayNumber'])
                ->addColumn($columns['Transfer-DateDayAdd'])
                ->addColumn($columns['Transfer-DateCalc'])
                ->addColumn($columns['Transfer-DateDayNumber'])
                ->addColumn($columns['Package-DateDayAdd'])
                ->addColumn($columns['Package-DateCalc'])
                ->addColumn($columns['Scheduled Steps'])
                ->addColumn($columns['Steps Remaining'])
                ->addColumn($columns['PropCrash-DateCalc'])
                ->addColumn($columns['PropTrans-DateCalc'])
                ->addColumn($columns['Brew Size (Gallons)'])
                ->addColumn($columns['Brew % of 7Bbl'])
                ->addColumn($columns['Sum - Potential Yield'])
                ->addColumn($columns['Potential OG'])
                ->addColumn($columns['Efficiency'])
                ->addColumn($columns['Ratings'])
                ->addColumn($columns['CurrentTank_Name'])
                ->addColumn($columns['Canned'])
                ->addColumn($columns['PendingActivities'])
                ->addColumn($columns['TempLogsCount'])
                ->addColumn($columns['Rating']);
        }
    
        protected function setupColumnFilter(ColumnFilter $columnFilter)
        {
            $columnFilter
                ->setOptionsFor('Template')
                ->setOptionsFor('Brew Date')
                ->setOptionsFor('Brew Date Start')
                ->setOptionsFor('Brew Date End')
                ->setOptionsFor('Canned');
        }
    
        protected function setupFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
            $main_editor = new TextEdit('id_edit');
            
            $filterBuilder->addColumn(
                $columns['id'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('batchid_edit');
            
            $filterBuilder->addColumn(
                $columns['BatchID'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $main_editor->setAllowClear(true);
            $main_editor->setMinimumInputLength(0);
            $main_editor->SetAllowNullValue(false);
            $main_editor->SetHandlerName('filter_builder_Batches_Template_search');
            
            $multi_value_select_editor = new RemoteMultiValueSelect('Template', $this->CreateLinkBuilder());
            $multi_value_select_editor->SetHandlerName('filter_builder_Batches_Template_search');
            
            $filterBuilder->addColumn(
                $columns['Template'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IN => $multi_value_select_editor,
                    FilterConditionOperator::NOT_IN => $multi_value_select_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('batch_edit');
            $main_editor->SetMaxLength(75);
            
            $filterBuilder->addColumn(
                $columns['Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Brew Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ingredient_cnt_edit');
            
            $filterBuilder->addColumn(
                $columns['Ingredient_Cnt'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews-records_edit');
            
            $filterBuilder->addColumn(
                $columns['Brews-Records'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews_blended_from_this_batch_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brews Blended from this Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews_blended_into_this_batch_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brews Blended into this Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews_edit');
            
            $filterBuilder->addColumn(
                $columns['Brews'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('brew_date_start_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Brew Date Start'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('brew_date_end_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Brew Date End'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brew_days_edit');
            
            $filterBuilder->addColumn(
                $columns['Brew Days'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('total_brews_(net)_edit');
            
            $filterBuilder->addColumn(
                $columns['Total Brews (Net)'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('propitch_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['ProPitch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('yeast_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Yeast'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('yeast_source_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Yeast Source'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('yeast_from_fv_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Yeast from FV'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('nickname_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Nickname'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('status_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Status'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('batch-status_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Batch-Status'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('days_running_1_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Days Running 1'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('days_running_2_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Days Running 2'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('style_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Style'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fv_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FV'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fv_tank_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FV Tank'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('bt_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['BT'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('bt_tank_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['BT Tank'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('current_tank_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Current Tank'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('bbls_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Bbls'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('color_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Color'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ibu_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['IBU'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('og-ab_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['OG-AB'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('og_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['OG'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fg_min_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FG_Min'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('current_gravity_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Current Gravity'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fg_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FG'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('abv_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['ABV'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('attenuation_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Attenuation'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('yeast_pitch_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Yeast Pitch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('blend_ratio_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Blend Ratio'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('Notes');
            
            $filterBuilder->addColumn(
                $columns['Notes'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('status2_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Status2'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dry_hop_date_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Dry Hop Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dry_hop_date_formula_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Dry Hop Date Formula'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('crash_date_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Crash Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brite_tank_date_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brite Tank Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('gone_date_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Gone Date'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dry_hop_days_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Dry Hop Days'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('total_days_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Total Days'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dry_hopped_running_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Dry Hopped Running'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('user_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['User'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('maximum_co2_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Maximum CO2'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('co2_volumes_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['CO2 Volumes'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('this_batch_blended_into_batch_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['This Batch Blended into Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('batches_blended_into_this_batch_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Batches Blended into this Batch'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('calculated_days_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Calculated Days'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('blended_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Blended'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('tanklog_count_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['TankLog Count'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('keglog_count_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['KegLog Count'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('kegs_count_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Kegs Count'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('packagelog_count_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['PackageLog Count'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('kegorders_count_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['KegOrders Count'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('net_bbls_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Net Bbls'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('canned_&_kegged_barrels_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Canned & Kegged Barrels'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('canning_runs_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Canning Runs'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('5g_kegs_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['5G Kegs'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('50l_kegs_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['50L Kegs'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews-bbls_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brews-Bbls'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews-og_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brews-OG'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('net_beer_factor_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Net Beer Factor'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('batch_gross_bbls_calc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Batch Gross Bbls Calc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('gross_bbls_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Gross Bbls'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('remaining_bbls_calc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Remaining Bbls Calc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('remaining_bbls_(est)_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Remaining Bbls (Est)'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('can_be_deleted_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Can Be Deleted'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brews_from_template_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brews from Template'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fermstart-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FermStart-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fermstart-datecalc2_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FermStart-DateCalc2'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fermend-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FermEnd-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fermend-datecalc2_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FermEnd-DateCalc2'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ferm-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Ferm-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ferm-datecalc2_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Ferm-DateCalc2'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('fermend-datedaynumber_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['FermEnd-DateDayNumber'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dryhop-datedayadd_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['DryHop-DateDayAdd'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dryhop-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Dryhop-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('dryhop-datedaynumber_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Dryhop-DateDayNumber'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('crash-datedayadd_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Crash-DateDayAdd'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('crash-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Crash-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('crash-datedaynumber_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Crash-DateDayNumber'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('transfer-datedayadd_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Transfer-DateDayAdd'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('transfer-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Transfer-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('transfer-datedaynumber_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Transfer-DateDayNumber'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('package-datedayadd_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Package-DateDayAdd'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('package-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Package-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('scheduled_steps_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Scheduled Steps'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('steps_remaining_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Steps Remaining'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('propcrash-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['PropCrash-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('proptrans-datecalc_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['PropTrans-DateCalc'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brew_size_(gallons)_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brew Size (Gallons)'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('brew_%_of_7bbl_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Brew % of 7Bbl'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('sum_-_potential_yield_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Sum - Potential Yield'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('potential_og_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Potential OG'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('efficiency_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Efficiency'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('ratings_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Ratings'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('currenttank_name_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['CurrentTank_Name'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new DateTimeEdit('canned_edit', false, 'Y-m-d');
            
            $filterBuilder->addColumn(
                $columns['Canned'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::DATE_EQUALS => $main_editor,
                    FilterConditionOperator::DATE_DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::TODAY => null,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('pendingactivities_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['PendingActivities'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('templogscount_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['TempLogsCount'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
            
            $main_editor = new TextEdit('rating_edit');
            $main_editor->SetMaxLength(64);
            
            $filterBuilder->addColumn(
                $columns['Rating'],
                array(
                    FilterConditionOperator::EQUALS => $main_editor,
                    FilterConditionOperator::DOES_NOT_EQUAL => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN => $main_editor,
                    FilterConditionOperator::IS_GREATER_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN => $main_editor,
                    FilterConditionOperator::IS_LESS_THAN_OR_EQUAL_TO => $main_editor,
                    FilterConditionOperator::IS_BETWEEN => $main_editor,
                    FilterConditionOperator::IS_NOT_BETWEEN => $main_editor,
                    FilterConditionOperator::CONTAINS => $main_editor,
                    FilterConditionOperator::DOES_NOT_CONTAIN => $main_editor,
                    FilterConditionOperator::BEGINS_WITH => $main_editor,
                    FilterConditionOperator::ENDS_WITH => $main_editor,
                    FilterConditionOperator::IS_LIKE => $main_editor,
                    FilterConditionOperator::IS_NOT_LIKE => $main_editor,
                    FilterConditionOperator::IS_BLANK => null,
                    FilterConditionOperator::IS_NOT_BLANK => null
                )
            );
        }
    
        protected function AddOperationsColumns(Grid $grid)
        {
            $actions = $grid->getActions();
            $actions->setCaption($this->GetLocalizerCaptions()->GetMessageString('Actions'));
            $actions->setPosition(ActionList::POSITION_LEFT);
            
            if ($this->GetSecurityInfo()->HasViewGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('View'), OPERATION_VIEW, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
            
            if ($this->GetSecurityInfo()->HasEditGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Edit'), OPERATION_EDIT, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowEditButtonHandler', $this);
            }
            
            if ($this->deleteOperationIsAllowed()) {
                $operation = new AjaxOperation(OPERATION_DELETE,
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'),
                    $this->GetLocalizerCaptions()->GetMessageString('Delete'), $this->dataset,
                    $this->GetModalGridDeleteHandler(), $grid
                );
                $operation->setUseImage(true);
                $actions->addOperation($operation);
                $operation->OnShow->AddListener('ShowDeleteButtonHandler', $this);
            }
            
            
            if ($this->GetSecurityInfo()->HasAddGrant())
            {
                $operation = new LinkOperation($this->GetLocalizerCaptions()->GetMessageString('Copy'), OPERATION_COPY, $this->dataset, $grid);
                $operation->setUseImage(true);
                $actions->addOperation($operation);
            }
        }
    
        protected function AddFieldColumns(Grid $grid, $withDetails = true)
        {
            if (GetCurrentUserPermissionsForPage('Batches.Brews')->HasViewGrant() && $withDetails)
            {
            //
            // View column for Batches_Brews detail
            //
            $column = new DetailColumn(array('Batch'), 'Batches.Brews', 'Batches_Brews_handler', $this->dataset, 'Brews');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            }
            
            if (GetCurrentUserPermissionsForPage('Batches.InventoryActivities')->HasViewGrant() && $withDetails)
            {
            //
            // View column for Batches_InventoryActivities detail
            //
            $column = new DetailColumn(array('Batch'), 'Batches.InventoryActivities', 'Batches_InventoryActivities_handler', $this->dataset, 'Inventory Activities');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            }
            
            if (GetCurrentUserPermissionsForPage('Batches.TankLogs')->HasViewGrant() && $withDetails)
            {
            //
            // View column for Batches_TankLogs detail
            //
            $column = new DetailColumn(array('Batch'), 'Batches.TankLogs', 'Batches_TankLogs_handler', $this->dataset, 'Tank Logs');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            }
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for BatchID field
            //
            $column = new NumberViewColumn('BatchID', 'BatchID', 'Batch ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setHrefTemplate('%Template%');
            $column->setTarget('_self');
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Batch field
            //
            $column = new TextViewColumn('Batch', 'Batch', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Ingredient_Cnt field
            //
            $column = new NumberViewColumn('Ingredient_Cnt', 'Ingredient_Cnt', 'Ingredient Cnt', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews-Records field
            //
            $column = new NumberViewColumn('Brews-Records', 'Brews-Records', 'Brews-Records', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews Blended from this Batch field
            //
            $column = new TextViewColumn('Brews Blended from this Batch', 'Brews Blended from this Batch', 'Brews Blended From This Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews Blended into this Batch field
            //
            $column = new TextViewColumn('Brews Blended into this Batch', 'Brews Blended into this Batch', 'Brews Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews field
            //
            $column = new NumberViewColumn('Brews', 'Brews', 'Brews', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew Date Start field
            //
            $column = new DateTimeViewColumn('Brew Date Start', 'Brew Date Start', 'Brew Date Start', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew Date End field
            //
            $column = new DateTimeViewColumn('Brew Date End', 'Brew Date End', 'Brew Date End', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew Days field
            //
            $column = new NumberViewColumn('Brew Days', 'Brew Days', 'Brew Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Total Brews (Net) field
            //
            $column = new NumberViewColumn('Total Brews (Net)', 'Total Brews (Net)', 'Total Brews (Net)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for ProPitch field
            //
            $column = new TextViewColumn('ProPitch', 'ProPitch', 'Pro Pitch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Yeast field
            //
            $column = new TextViewColumn('Yeast', 'Yeast', 'Yeast', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Yeast Source field
            //
            $column = new TextViewColumn('Yeast Source', 'Yeast Source', 'Yeast Source', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Yeast from FV field
            //
            $column = new TextViewColumn('Yeast from FV', 'Yeast from FV', 'Yeast From FV', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Batch-Status field
            //
            $column = new TextViewColumn('Batch-Status', 'Batch-Status', 'Batch-Status', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Days Running 1 field
            //
            $column = new TextViewColumn('Days Running 1', 'Days Running 1', 'Days Running 1', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Days Running 2 field
            //
            $column = new TextViewColumn('Days Running 2', 'Days Running 2', 'Days Running 2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Style field
            //
            $column = new TextViewColumn('Style', 'Style', 'Style', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FV field
            //
            $column = new TextViewColumn('FV', 'FV', 'FV', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FV Tank field
            //
            $column = new TextViewColumn('FV Tank', 'FV Tank', 'FV Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for BT field
            //
            $column = new TextViewColumn('BT', 'BT', 'BT', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for BT Tank field
            //
            $column = new TextViewColumn('BT Tank', 'BT Tank', 'BT Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Current Tank field
            //
            $column = new TextViewColumn('Current Tank', 'Current Tank', 'Current Tank', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Bbls field
            //
            $column = new TextViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Color field
            //
            $column = new TextViewColumn('Color', 'Color', 'Color', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for IBU field
            //
            $column = new TextViewColumn('IBU', 'IBU', 'IBU', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for OG-AB field
            //
            $column = new TextViewColumn('OG-AB', 'OG-AB', 'OG-AB', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for OG field
            //
            $column = new TextViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FG_Min field
            //
            $column = new TextViewColumn('FG_Min', 'FG_Min', 'FG Min', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Current Gravity field
            //
            $column = new TextViewColumn('Current Gravity', 'Current Gravity', 'Current Gravity', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FG field
            //
            $column = new TextViewColumn('FG', 'FG', 'FG', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for ABV field
            //
            $column = new TextViewColumn('ABV', 'ABV', 'ABV', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Attenuation field
            //
            $column = new TextViewColumn('Attenuation', 'Attenuation', 'Attenuation', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Yeast Pitch field
            //
            $column = new TextViewColumn('Yeast Pitch', 'Yeast Pitch', 'Yeast Pitch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Blend Ratio field
            //
            $column = new TextViewColumn('Blend Ratio', 'Blend Ratio', 'Blend Ratio', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Status2 field
            //
            $column = new TextViewColumn('Status2', 'Status2', 'Status2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dry Hop Date field
            //
            $column = new TextViewColumn('Dry Hop Date', 'Dry Hop Date', 'Dry Hop Date', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dry Hop Date Formula field
            //
            $column = new TextViewColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', 'Dry Hop Date Formula', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Crash Date field
            //
            $column = new TextViewColumn('Crash Date', 'Crash Date', 'Crash Date', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brite Tank Date field
            //
            $column = new TextViewColumn('Brite Tank Date', 'Brite Tank Date', 'Brite Tank Date', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Gone Date field
            //
            $column = new TextViewColumn('Gone Date', 'Gone Date', 'Gone Date', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dry Hop Days field
            //
            $column = new TextViewColumn('Dry Hop Days', 'Dry Hop Days', 'Dry Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Total Days field
            //
            $column = new TextViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dry Hopped Running field
            //
            $column = new TextViewColumn('Dry Hopped Running', 'Dry Hopped Running', 'Dry Hopped Running', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Maximum CO2 field
            //
            $column = new TextViewColumn('Maximum CO2', 'Maximum CO2', 'Maximum CO2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for CO2 Volumes field
            //
            $column = new TextViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for This Batch Blended into Batch field
            //
            $column = new TextViewColumn('This Batch Blended into Batch', 'This Batch Blended into Batch', 'This Batch Blended Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Batches Blended into this Batch field
            //
            $column = new TextViewColumn('Batches Blended into this Batch', 'Batches Blended into this Batch', 'Batches Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Calculated Days field
            //
            $column = new TextViewColumn('Calculated Days', 'Calculated Days', 'Calculated Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Blended field
            //
            $column = new TextViewColumn('Blended', 'Blended', 'Blended', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for TankLog Count field
            //
            $column = new TextViewColumn('TankLog Count', 'TankLog Count', 'Tank Log Count', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for KegLog Count field
            //
            $column = new TextViewColumn('KegLog Count', 'KegLog Count', 'Keg Log Count', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Kegs Count field
            //
            $column = new TextViewColumn('Kegs Count', 'Kegs Count', 'Kegs Count', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for PackageLog Count field
            //
            $column = new TextViewColumn('PackageLog Count', 'PackageLog Count', 'Package Log Count', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for KegOrders Count field
            //
            $column = new TextViewColumn('KegOrders Count', 'KegOrders Count', 'Keg Orders Count', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Net Bbls field
            //
            $column = new TextViewColumn('Net Bbls', 'Net Bbls', 'Net Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Canned & Kegged Barrels field
            //
            $column = new TextViewColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', 'Canned & Kegged Barrels', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Canning Runs field
            //
            $column = new TextViewColumn('Canning Runs', 'Canning Runs', 'Canning Runs', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for 5G Kegs field
            //
            $column = new TextViewColumn('5G Kegs', '5G Kegs', '5 G Kegs', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for 50L Kegs field
            //
            $column = new TextViewColumn('50L Kegs', '50L Kegs', '50 L Kegs', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews-Bbls field
            //
            $column = new TextViewColumn('Brews-Bbls', 'Brews-Bbls', 'Brews-Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews-OG field
            //
            $column = new TextViewColumn('Brews-OG', 'Brews-OG', 'Brews-OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Net Beer Factor field
            //
            $column = new TextViewColumn('Net Beer Factor', 'Net Beer Factor', 'Net Beer Factor', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Batch Gross Bbls Calc field
            //
            $column = new TextViewColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Gross Bbls field
            //
            $column = new TextViewColumn('Gross Bbls', 'Gross Bbls', 'Gross Bbls', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Remaining Bbls Calc field
            //
            $column = new TextViewColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', 'Remaining Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Remaining Bbls (Est) field
            //
            $column = new TextViewColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', 'Remaining Bbls (Est)', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Can Be Deleted field
            //
            $column = new TextViewColumn('Can Be Deleted', 'Can Be Deleted', 'Can Be Deleted', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brews from Template field
            //
            $column = new TextViewColumn('Brews from Template', 'Brews from Template', 'Brews From Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FermStart-DateCalc field
            //
            $column = new TextViewColumn('FermStart-DateCalc', 'FermStart-DateCalc', 'Ferm Start-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FermStart-DateCalc2 field
            //
            $column = new TextViewColumn('FermStart-DateCalc2', 'FermStart-DateCalc2', 'Ferm Start-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FermEnd-DateCalc field
            //
            $column = new TextViewColumn('FermEnd-DateCalc', 'FermEnd-DateCalc', 'Ferm End-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FermEnd-DateCalc2 field
            //
            $column = new TextViewColumn('FermEnd-DateCalc2', 'FermEnd-DateCalc2', 'Ferm End-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Ferm-DateCalc field
            //
            $column = new TextViewColumn('Ferm-DateCalc', 'Ferm-DateCalc', 'Ferm-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Ferm-DateCalc2 field
            //
            $column = new TextViewColumn('Ferm-DateCalc2', 'Ferm-DateCalc2', 'Ferm-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for FermEnd-DateDayNumber field
            //
            $column = new TextViewColumn('FermEnd-DateDayNumber', 'FermEnd-DateDayNumber', 'Ferm End-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for DryHop-DateDayAdd field
            //
            $column = new TextViewColumn('DryHop-DateDayAdd', 'DryHop-DateDayAdd', 'Dry Hop-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dryhop-DateCalc field
            //
            $column = new TextViewColumn('Dryhop-DateCalc', 'Dryhop-DateCalc', 'Dryhop-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Dryhop-DateDayNumber field
            //
            $column = new TextViewColumn('Dryhop-DateDayNumber', 'Dryhop-DateDayNumber', 'Dryhop-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Crash-DateDayAdd field
            //
            $column = new TextViewColumn('Crash-DateDayAdd', 'Crash-DateDayAdd', 'Crash-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Crash-DateCalc field
            //
            $column = new TextViewColumn('Crash-DateCalc', 'Crash-DateCalc', 'Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Crash-DateDayNumber field
            //
            $column = new TextViewColumn('Crash-DateDayNumber', 'Crash-DateDayNumber', 'Crash-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Transfer-DateDayAdd field
            //
            $column = new TextViewColumn('Transfer-DateDayAdd', 'Transfer-DateDayAdd', 'Transfer-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Transfer-DateCalc field
            //
            $column = new TextViewColumn('Transfer-DateCalc', 'Transfer-DateCalc', 'Transfer-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Transfer-DateDayNumber field
            //
            $column = new TextViewColumn('Transfer-DateDayNumber', 'Transfer-DateDayNumber', 'Transfer-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Package-DateDayAdd field
            //
            $column = new TextViewColumn('Package-DateDayAdd', 'Package-DateDayAdd', 'Package-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Package-DateCalc field
            //
            $column = new TextViewColumn('Package-DateCalc', 'Package-DateCalc', 'Package-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Scheduled Steps field
            //
            $column = new TextViewColumn('Scheduled Steps', 'Scheduled Steps', 'Scheduled Steps', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Steps Remaining field
            //
            $column = new TextViewColumn('Steps Remaining', 'Steps Remaining', 'Steps Remaining', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for PropCrash-DateCalc field
            //
            $column = new TextViewColumn('PropCrash-DateCalc', 'PropCrash-DateCalc', 'Prop Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for PropTrans-DateCalc field
            //
            $column = new TextViewColumn('PropTrans-DateCalc', 'PropTrans-DateCalc', 'Prop Trans-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew Size (Gallons) field
            //
            $column = new TextViewColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', 'Brew Size (Gallons)', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Brew % of 7Bbl field
            //
            $column = new TextViewColumn('Brew % of 7Bbl', 'Brew % of 7Bbl', 'Brew % Of 7 Bbl', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Sum - Potential Yield field
            //
            $column = new TextViewColumn('Sum - Potential Yield', 'Sum - Potential Yield', 'Sum - Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Potential OG field
            //
            $column = new TextViewColumn('Potential OG', 'Potential OG', 'Potential OG', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Efficiency field
            //
            $column = new TextViewColumn('Efficiency', 'Efficiency', 'Efficiency', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Ratings field
            //
            $column = new TextViewColumn('Ratings', 'Ratings', 'Ratings', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for CurrentTank_Name field
            //
            $column = new TextViewColumn('CurrentTank_Name', 'CurrentTank_Name', 'Current Tank Name', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Canned field
            //
            $column = new DateTimeViewColumn('Canned', 'Canned', 'Canned', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for PendingActivities field
            //
            $column = new TextViewColumn('PendingActivities', 'PendingActivities', 'Pending Activities', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for TempLogsCount field
            //
            $column = new TextViewColumn('TempLogsCount', 'TempLogsCount', 'Temp Logs Count', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
            //
            // View column for Rating field
            //
            $column = new TextViewColumn('Rating', 'Rating', 'Rating', $this->dataset);
            $column->SetOrderable(true);
            $column->setMinimalVisibility(ColumnVisibility::PHONE);
            $grid->AddViewColumn($column);
        }
    
        protected function AddSingleRecordViewColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for BatchID field
            //
            $column = new NumberViewColumn('BatchID', 'BatchID', 'Batch ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setHrefTemplate('%Template%');
            $column->setTarget('_self');
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Batch field
            //
            $column = new TextViewColumn('Batch', 'Batch', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Ingredient_Cnt field
            //
            $column = new NumberViewColumn('Ingredient_Cnt', 'Ingredient_Cnt', 'Ingredient Cnt', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews-Records field
            //
            $column = new NumberViewColumn('Brews-Records', 'Brews-Records', 'Brews-Records', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews Blended from this Batch field
            //
            $column = new TextViewColumn('Brews Blended from this Batch', 'Brews Blended from this Batch', 'Brews Blended From This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews Blended into this Batch field
            //
            $column = new TextViewColumn('Brews Blended into this Batch', 'Brews Blended into this Batch', 'Brews Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews field
            //
            $column = new NumberViewColumn('Brews', 'Brews', 'Brews', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew Date Start field
            //
            $column = new DateTimeViewColumn('Brew Date Start', 'Brew Date Start', 'Brew Date Start', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew Date End field
            //
            $column = new DateTimeViewColumn('Brew Date End', 'Brew Date End', 'Brew Date End', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew Days field
            //
            $column = new NumberViewColumn('Brew Days', 'Brew Days', 'Brew Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Total Brews (Net) field
            //
            $column = new NumberViewColumn('Total Brews (Net)', 'Total Brews (Net)', 'Total Brews (Net)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for ProPitch field
            //
            $column = new TextViewColumn('ProPitch', 'ProPitch', 'Pro Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Yeast field
            //
            $column = new TextViewColumn('Yeast', 'Yeast', 'Yeast', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Yeast Source field
            //
            $column = new TextViewColumn('Yeast Source', 'Yeast Source', 'Yeast Source', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Yeast from FV field
            //
            $column = new TextViewColumn('Yeast from FV', 'Yeast from FV', 'Yeast From FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Batch-Status field
            //
            $column = new TextViewColumn('Batch-Status', 'Batch-Status', 'Batch-Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Days Running 1 field
            //
            $column = new TextViewColumn('Days Running 1', 'Days Running 1', 'Days Running 1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Days Running 2 field
            //
            $column = new TextViewColumn('Days Running 2', 'Days Running 2', 'Days Running 2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Style field
            //
            $column = new TextViewColumn('Style', 'Style', 'Style', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FV field
            //
            $column = new TextViewColumn('FV', 'FV', 'FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FV Tank field
            //
            $column = new TextViewColumn('FV Tank', 'FV Tank', 'FV Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for BT field
            //
            $column = new TextViewColumn('BT', 'BT', 'BT', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for BT Tank field
            //
            $column = new TextViewColumn('BT Tank', 'BT Tank', 'BT Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Current Tank field
            //
            $column = new TextViewColumn('Current Tank', 'Current Tank', 'Current Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new TextViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Color field
            //
            $column = new TextViewColumn('Color', 'Color', 'Color', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for IBU field
            //
            $column = new TextViewColumn('IBU', 'IBU', 'IBU', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for OG-AB field
            //
            $column = new TextViewColumn('OG-AB', 'OG-AB', 'OG-AB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for OG field
            //
            $column = new TextViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FG_Min field
            //
            $column = new TextViewColumn('FG_Min', 'FG_Min', 'FG Min', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Current Gravity field
            //
            $column = new TextViewColumn('Current Gravity', 'Current Gravity', 'Current Gravity', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FG field
            //
            $column = new TextViewColumn('FG', 'FG', 'FG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for ABV field
            //
            $column = new TextViewColumn('ABV', 'ABV', 'ABV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Attenuation field
            //
            $column = new TextViewColumn('Attenuation', 'Attenuation', 'Attenuation', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Yeast Pitch field
            //
            $column = new TextViewColumn('Yeast Pitch', 'Yeast Pitch', 'Yeast Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Blend Ratio field
            //
            $column = new TextViewColumn('Blend Ratio', 'Blend Ratio', 'Blend Ratio', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Status2 field
            //
            $column = new TextViewColumn('Status2', 'Status2', 'Status2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dry Hop Date field
            //
            $column = new TextViewColumn('Dry Hop Date', 'Dry Hop Date', 'Dry Hop Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dry Hop Date Formula field
            //
            $column = new TextViewColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', 'Dry Hop Date Formula', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Crash Date field
            //
            $column = new TextViewColumn('Crash Date', 'Crash Date', 'Crash Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brite Tank Date field
            //
            $column = new TextViewColumn('Brite Tank Date', 'Brite Tank Date', 'Brite Tank Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Gone Date field
            //
            $column = new TextViewColumn('Gone Date', 'Gone Date', 'Gone Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dry Hop Days field
            //
            $column = new TextViewColumn('Dry Hop Days', 'Dry Hop Days', 'Dry Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new TextViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dry Hopped Running field
            //
            $column = new TextViewColumn('Dry Hopped Running', 'Dry Hopped Running', 'Dry Hopped Running', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Maximum CO2 field
            //
            $column = new TextViewColumn('Maximum CO2', 'Maximum CO2', 'Maximum CO2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new TextViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for This Batch Blended into Batch field
            //
            $column = new TextViewColumn('This Batch Blended into Batch', 'This Batch Blended into Batch', 'This Batch Blended Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Batches Blended into this Batch field
            //
            $column = new TextViewColumn('Batches Blended into this Batch', 'Batches Blended into this Batch', 'Batches Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Calculated Days field
            //
            $column = new TextViewColumn('Calculated Days', 'Calculated Days', 'Calculated Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Blended field
            //
            $column = new TextViewColumn('Blended', 'Blended', 'Blended', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for TankLog Count field
            //
            $column = new TextViewColumn('TankLog Count', 'TankLog Count', 'Tank Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for KegLog Count field
            //
            $column = new TextViewColumn('KegLog Count', 'KegLog Count', 'Keg Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Kegs Count field
            //
            $column = new TextViewColumn('Kegs Count', 'Kegs Count', 'Kegs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for PackageLog Count field
            //
            $column = new TextViewColumn('PackageLog Count', 'PackageLog Count', 'Package Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for KegOrders Count field
            //
            $column = new TextViewColumn('KegOrders Count', 'KegOrders Count', 'Keg Orders Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Net Bbls field
            //
            $column = new TextViewColumn('Net Bbls', 'Net Bbls', 'Net Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Canned & Kegged Barrels field
            //
            $column = new TextViewColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', 'Canned & Kegged Barrels', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Canning Runs field
            //
            $column = new TextViewColumn('Canning Runs', 'Canning Runs', 'Canning Runs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for 5G Kegs field
            //
            $column = new TextViewColumn('5G Kegs', '5G Kegs', '5 G Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for 50L Kegs field
            //
            $column = new TextViewColumn('50L Kegs', '50L Kegs', '50 L Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews-Bbls field
            //
            $column = new TextViewColumn('Brews-Bbls', 'Brews-Bbls', 'Brews-Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews-OG field
            //
            $column = new TextViewColumn('Brews-OG', 'Brews-OG', 'Brews-OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Net Beer Factor field
            //
            $column = new TextViewColumn('Net Beer Factor', 'Net Beer Factor', 'Net Beer Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Batch Gross Bbls Calc field
            //
            $column = new TextViewColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Gross Bbls field
            //
            $column = new TextViewColumn('Gross Bbls', 'Gross Bbls', 'Gross Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Remaining Bbls Calc field
            //
            $column = new TextViewColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', 'Remaining Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Remaining Bbls (Est) field
            //
            $column = new TextViewColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', 'Remaining Bbls (Est)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Can Be Deleted field
            //
            $column = new TextViewColumn('Can Be Deleted', 'Can Be Deleted', 'Can Be Deleted', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brews from Template field
            //
            $column = new TextViewColumn('Brews from Template', 'Brews from Template', 'Brews From Template', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FermStart-DateCalc field
            //
            $column = new TextViewColumn('FermStart-DateCalc', 'FermStart-DateCalc', 'Ferm Start-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FermStart-DateCalc2 field
            //
            $column = new TextViewColumn('FermStart-DateCalc2', 'FermStart-DateCalc2', 'Ferm Start-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FermEnd-DateCalc field
            //
            $column = new TextViewColumn('FermEnd-DateCalc', 'FermEnd-DateCalc', 'Ferm End-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FermEnd-DateCalc2 field
            //
            $column = new TextViewColumn('FermEnd-DateCalc2', 'FermEnd-DateCalc2', 'Ferm End-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Ferm-DateCalc field
            //
            $column = new TextViewColumn('Ferm-DateCalc', 'Ferm-DateCalc', 'Ferm-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Ferm-DateCalc2 field
            //
            $column = new TextViewColumn('Ferm-DateCalc2', 'Ferm-DateCalc2', 'Ferm-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for FermEnd-DateDayNumber field
            //
            $column = new TextViewColumn('FermEnd-DateDayNumber', 'FermEnd-DateDayNumber', 'Ferm End-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for DryHop-DateDayAdd field
            //
            $column = new TextViewColumn('DryHop-DateDayAdd', 'DryHop-DateDayAdd', 'Dry Hop-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dryhop-DateCalc field
            //
            $column = new TextViewColumn('Dryhop-DateCalc', 'Dryhop-DateCalc', 'Dryhop-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Dryhop-DateDayNumber field
            //
            $column = new TextViewColumn('Dryhop-DateDayNumber', 'Dryhop-DateDayNumber', 'Dryhop-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Crash-DateDayAdd field
            //
            $column = new TextViewColumn('Crash-DateDayAdd', 'Crash-DateDayAdd', 'Crash-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Crash-DateCalc field
            //
            $column = new TextViewColumn('Crash-DateCalc', 'Crash-DateCalc', 'Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Crash-DateDayNumber field
            //
            $column = new TextViewColumn('Crash-DateDayNumber', 'Crash-DateDayNumber', 'Crash-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Transfer-DateDayAdd field
            //
            $column = new TextViewColumn('Transfer-DateDayAdd', 'Transfer-DateDayAdd', 'Transfer-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Transfer-DateCalc field
            //
            $column = new TextViewColumn('Transfer-DateCalc', 'Transfer-DateCalc', 'Transfer-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Transfer-DateDayNumber field
            //
            $column = new TextViewColumn('Transfer-DateDayNumber', 'Transfer-DateDayNumber', 'Transfer-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Package-DateDayAdd field
            //
            $column = new TextViewColumn('Package-DateDayAdd', 'Package-DateDayAdd', 'Package-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Package-DateCalc field
            //
            $column = new TextViewColumn('Package-DateCalc', 'Package-DateCalc', 'Package-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Scheduled Steps field
            //
            $column = new TextViewColumn('Scheduled Steps', 'Scheduled Steps', 'Scheduled Steps', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Steps Remaining field
            //
            $column = new TextViewColumn('Steps Remaining', 'Steps Remaining', 'Steps Remaining', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for PropCrash-DateCalc field
            //
            $column = new TextViewColumn('PropCrash-DateCalc', 'PropCrash-DateCalc', 'Prop Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for PropTrans-DateCalc field
            //
            $column = new TextViewColumn('PropTrans-DateCalc', 'PropTrans-DateCalc', 'Prop Trans-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew Size (Gallons) field
            //
            $column = new TextViewColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', 'Brew Size (Gallons)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Brew % of 7Bbl field
            //
            $column = new TextViewColumn('Brew % of 7Bbl', 'Brew % of 7Bbl', 'Brew % Of 7 Bbl', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Sum - Potential Yield field
            //
            $column = new TextViewColumn('Sum - Potential Yield', 'Sum - Potential Yield', 'Sum - Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Potential OG field
            //
            $column = new TextViewColumn('Potential OG', 'Potential OG', 'Potential OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Efficiency field
            //
            $column = new TextViewColumn('Efficiency', 'Efficiency', 'Efficiency', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Ratings field
            //
            $column = new TextViewColumn('Ratings', 'Ratings', 'Ratings', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for CurrentTank_Name field
            //
            $column = new TextViewColumn('CurrentTank_Name', 'CurrentTank_Name', 'Current Tank Name', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Canned field
            //
            $column = new DateTimeViewColumn('Canned', 'Canned', 'Canned', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for PendingActivities field
            //
            $column = new TextViewColumn('PendingActivities', 'PendingActivities', 'Pending Activities', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for TempLogsCount field
            //
            $column = new TextViewColumn('TempLogsCount', 'TempLogsCount', 'Temp Logs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
            
            //
            // View column for Rating field
            //
            $column = new TextViewColumn('Rating', 'Rating', 'Rating', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddSingleRecordViewColumn($column);
        }
    
        protected function AddEditColumns(Grid $grid)
        {
    
        }
    
        protected function AddMultiEditColumns(Grid $grid)
        {
            //
            // Edit column for BatchID field
            //
            $editor = new TextEdit('batchid_edit');
            $editColumn = new CustomEditColumn('Batch ID', 'BatchID', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Template field
            //
            $editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Template', 'Template', 'Template_id', 'multi_edit_Batches_Template_search', $editor, $this->dataset, $lookupDataset, 'Template', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew Date field
            //
            $editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date', 'Brew Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Ingredient_Cnt field
            //
            $editor = new TextEdit('ingredient_cnt_edit');
            $editColumn = new CustomEditColumn('Ingredient Cnt', 'Ingredient_Cnt', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews-Records field
            //
            $editor = new TextEdit('brews-records_edit');
            $editColumn = new CustomEditColumn('Brews-Records', 'Brews-Records', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews Blended from this Batch field
            //
            $editor = new TextEdit('brews_blended_from_this_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews Blended From This Batch', 'Brews Blended from this Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews Blended into this Batch field
            //
            $editor = new TextEdit('brews_blended_into_this_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews Blended Into This Batch', 'Brews Blended into this Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews field
            //
            $editor = new TextEdit('brews_edit');
            $editColumn = new CustomEditColumn('Brews', 'Brews', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew Date Start field
            //
            $editor = new DateTimeEdit('brew_date_start_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date Start', 'Brew Date Start', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew Date End field
            //
            $editor = new DateTimeEdit('brew_date_end_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date End', 'Brew Date End', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew Days field
            //
            $editor = new TextEdit('brew_days_edit');
            $editColumn = new CustomEditColumn('Brew Days', 'Brew Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Total Brews (Net) field
            //
            $editor = new TextEdit('total_brews_(net)_edit');
            $editColumn = new CustomEditColumn('Total Brews (Net)', 'Total Brews (Net)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for ProPitch field
            //
            $editor = new TextEdit('propitch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Pro Pitch', 'ProPitch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Yeast field
            //
            $editor = new TextEdit('yeast_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast', 'Yeast', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Yeast Source field
            //
            $editor = new TextEdit('yeast_source_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast Source', 'Yeast Source', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Yeast from FV field
            //
            $editor = new TextEdit('yeast_from_fv_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast From FV', 'Yeast from FV', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Nickname field
            //
            $editor = new TextEdit('nickname_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Nickname', 'Nickname', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Status field
            //
            $editor = new TextEdit('status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status', 'Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Batch-Status field
            //
            $editor = new TextEdit('batch-status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Batch-Status', 'Batch-Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Days Running 1 field
            //
            $editor = new TextEdit('days_running_1_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Days Running 1', 'Days Running 1', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Days Running 2 field
            //
            $editor = new TextEdit('days_running_2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Days Running 2', 'Days Running 2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Style field
            //
            $editor = new TextEdit('style_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Style', 'Style', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FV field
            //
            $editor = new TextEdit('fv_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FV', 'FV', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FV Tank field
            //
            $editor = new TextEdit('fv_tank_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FV Tank', 'FV Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for BT field
            //
            $editor = new TextEdit('bt_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('BT', 'BT', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for BT Tank field
            //
            $editor = new TextEdit('bt_tank_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('BT Tank', 'BT Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Current Tank field
            //
            $editor = new TextEdit('current_tank_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Current Tank', 'Current Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Bbls field
            //
            $editor = new TextEdit('bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Bbls', 'Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Color field
            //
            $editor = new TextEdit('color_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Color', 'Color', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for IBU field
            //
            $editor = new TextEdit('ibu_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('IBU', 'IBU', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for OG-AB field
            //
            $editor = new TextEdit('og-ab_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('OG-AB', 'OG-AB', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for OG field
            //
            $editor = new TextEdit('og_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('OG', 'OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FG_Min field
            //
            $editor = new TextEdit('fg_min_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FG Min', 'FG_Min', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Current Gravity field
            //
            $editor = new TextEdit('current_gravity_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Current Gravity', 'Current Gravity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FG field
            //
            $editor = new TextEdit('fg_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FG', 'FG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for ABV field
            //
            $editor = new TextEdit('abv_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('ABV', 'ABV', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Attenuation field
            //
            $editor = new TextEdit('attenuation_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Attenuation', 'Attenuation', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Yeast Pitch field
            //
            $editor = new TextEdit('yeast_pitch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast Pitch', 'Yeast Pitch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Blend Ratio field
            //
            $editor = new TextEdit('blend_ratio_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Blend Ratio', 'Blend Ratio', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Status2 field
            //
            $editor = new TextEdit('status2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status2', 'Status2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dry Hop Date field
            //
            $editor = new TextEdit('dry_hop_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop Date', 'Dry Hop Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dry Hop Date Formula field
            //
            $editor = new TextEdit('dry_hop_date_formula_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Crash Date field
            //
            $editor = new TextEdit('crash_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash Date', 'Crash Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brite Tank Date field
            //
            $editor = new TextEdit('brite_tank_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brite Tank Date', 'Brite Tank Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Gone Date field
            //
            $editor = new TextEdit('gone_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Gone Date', 'Gone Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dry Hop Days field
            //
            $editor = new TextEdit('dry_hop_days_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop Days', 'Dry Hop Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Total Days field
            //
            $editor = new TextEdit('total_days_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Total Days', 'Total Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dry Hopped Running field
            //
            $editor = new TextEdit('dry_hopped_running_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hopped Running', 'Dry Hopped Running', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Maximum CO2 field
            //
            $editor = new TextEdit('maximum_co2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Maximum CO2', 'Maximum CO2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for CO2 Volumes field
            //
            $editor = new TextEdit('co2_volumes_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('CO2 Volumes', 'CO2 Volumes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for This Batch Blended into Batch field
            //
            $editor = new TextEdit('this_batch_blended_into_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('This Batch Blended Into Batch', 'This Batch Blended into Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Batches Blended into this Batch field
            //
            $editor = new TextEdit('batches_blended_into_this_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Batches Blended Into This Batch', 'Batches Blended into this Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Calculated Days field
            //
            $editor = new TextEdit('calculated_days_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Calculated Days', 'Calculated Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Blended field
            //
            $editor = new TextEdit('blended_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Blended', 'Blended', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for TankLog Count field
            //
            $editor = new TextEdit('tanklog_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Tank Log Count', 'TankLog Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for KegLog Count field
            //
            $editor = new TextEdit('keglog_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Keg Log Count', 'KegLog Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Kegs Count field
            //
            $editor = new TextEdit('kegs_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Kegs Count', 'Kegs Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for PackageLog Count field
            //
            $editor = new TextEdit('packagelog_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Package Log Count', 'PackageLog Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for KegOrders Count field
            //
            $editor = new TextEdit('kegorders_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Keg Orders Count', 'KegOrders Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Net Bbls field
            //
            $editor = new TextEdit('net_bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Net Bbls', 'Net Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Canned & Kegged Barrels field
            //
            $editor = new TextEdit('canned_&_kegged_barrels_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Canning Runs field
            //
            $editor = new TextEdit('canning_runs_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Canning Runs', 'Canning Runs', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for 5G Kegs field
            //
            $editor = new TextEdit('5g_kegs_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('5 G Kegs', '5G Kegs', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for 50L Kegs field
            //
            $editor = new TextEdit('50l_kegs_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('50 L Kegs', '50L Kegs', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews-Bbls field
            //
            $editor = new TextEdit('brews-bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews-Bbls', 'Brews-Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews-OG field
            //
            $editor = new TextEdit('brews-og_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews-OG', 'Brews-OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Net Beer Factor field
            //
            $editor = new TextEdit('net_beer_factor_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Net Beer Factor', 'Net Beer Factor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Batch Gross Bbls Calc field
            //
            $editor = new TextEdit('batch_gross_bbls_calc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Gross Bbls field
            //
            $editor = new TextEdit('gross_bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Gross Bbls', 'Gross Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Remaining Bbls Calc field
            //
            $editor = new TextEdit('remaining_bbls_calc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Remaining Bbls (Est) field
            //
            $editor = new TextEdit('remaining_bbls_(est)_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Can Be Deleted field
            //
            $editor = new TextEdit('can_be_deleted_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Can Be Deleted', 'Can Be Deleted', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brews from Template field
            //
            $editor = new TextEdit('brews_from_template_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews From Template', 'Brews from Template', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FermStart-DateCalc field
            //
            $editor = new TextEdit('fermstart-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm Start-Date Calc', 'FermStart-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FermStart-DateCalc2 field
            //
            $editor = new TextEdit('fermstart-datecalc2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm Start-Date Calc2', 'FermStart-DateCalc2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FermEnd-DateCalc field
            //
            $editor = new TextEdit('fermend-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm End-Date Calc', 'FermEnd-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FermEnd-DateCalc2 field
            //
            $editor = new TextEdit('fermend-datecalc2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm End-Date Calc2', 'FermEnd-DateCalc2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Ferm-DateCalc field
            //
            $editor = new TextEdit('ferm-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm-Date Calc', 'Ferm-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Ferm-DateCalc2 field
            //
            $editor = new TextEdit('ferm-datecalc2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm-Date Calc2', 'Ferm-DateCalc2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for FermEnd-DateDayNumber field
            //
            $editor = new TextEdit('fermend-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm End-Date Day Number', 'FermEnd-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for DryHop-DateDayAdd field
            //
            $editor = new TextEdit('dryhop-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop-Date Day Add', 'DryHop-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dryhop-DateCalc field
            //
            $editor = new TextEdit('dryhop-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dryhop-Date Calc', 'Dryhop-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Dryhop-DateDayNumber field
            //
            $editor = new TextEdit('dryhop-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dryhop-Date Day Number', 'Dryhop-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Crash-DateDayAdd field
            //
            $editor = new TextEdit('crash-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash-Date Day Add', 'Crash-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Crash-DateCalc field
            //
            $editor = new TextEdit('crash-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash-Date Calc', 'Crash-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Crash-DateDayNumber field
            //
            $editor = new TextEdit('crash-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash-Date Day Number', 'Crash-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Transfer-DateDayAdd field
            //
            $editor = new TextEdit('transfer-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Transfer-Date Day Add', 'Transfer-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Transfer-DateCalc field
            //
            $editor = new TextEdit('transfer-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Transfer-Date Calc', 'Transfer-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Transfer-DateDayNumber field
            //
            $editor = new TextEdit('transfer-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Transfer-Date Day Number', 'Transfer-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Package-DateDayAdd field
            //
            $editor = new TextEdit('package-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Package-Date Day Add', 'Package-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Package-DateCalc field
            //
            $editor = new TextEdit('package-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Package-Date Calc', 'Package-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Scheduled Steps field
            //
            $editor = new TextEdit('scheduled_steps_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Scheduled Steps', 'Scheduled Steps', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Steps Remaining field
            //
            $editor = new TextEdit('steps_remaining_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Steps Remaining', 'Steps Remaining', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for PropCrash-DateCalc field
            //
            $editor = new TextEdit('propcrash-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Prop Crash-Date Calc', 'PropCrash-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for PropTrans-DateCalc field
            //
            $editor = new TextEdit('proptrans-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Prop Trans-Date Calc', 'PropTrans-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew Size (Gallons) field
            //
            $editor = new TextEdit('brew_size_(gallons)_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Brew % of 7Bbl field
            //
            $editor = new TextEdit('brew_%_of_7bbl_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brew % Of 7 Bbl', 'Brew % of 7Bbl', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Sum - Potential Yield field
            //
            $editor = new TextEdit('sum_-_potential_yield_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Sum - Potential Yield', 'Sum - Potential Yield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Potential OG field
            //
            $editor = new TextEdit('potential_og_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Potential OG', 'Potential OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Efficiency field
            //
            $editor = new TextEdit('efficiency_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Efficiency', 'Efficiency', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Ratings field
            //
            $editor = new TextEdit('ratings_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ratings', 'Ratings', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for CurrentTank_Name field
            //
            $editor = new TextEdit('currenttank_name_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Current Tank Name', 'CurrentTank_Name', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Canned field
            //
            $editor = new DateTimeEdit('canned_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Canned', 'Canned', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for PendingActivities field
            //
            $editor = new TextEdit('pendingactivities_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Pending Activities', 'PendingActivities', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for TempLogsCount field
            //
            $editor = new TextEdit('templogscount_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Temp Logs Count', 'TempLogsCount', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
            
            //
            // Edit column for Rating field
            //
            $editor = new TextEdit('rating_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Rating', 'Rating', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddMultiEditColumn($editColumn);
        }
    
        protected function AddToggleEditColumns(Grid $grid)
        {
    
        }
    
        protected function AddInsertColumns(Grid $grid)
        {
            //
            // Edit column for BatchID field
            //
            $editor = new TextEdit('batchid_edit');
            $editColumn = new CustomEditColumn('Batch ID', 'BatchID', $editor, $this->dataset);
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Template field
            //
            $editor = new DynamicCombobox('template_edit', $this->CreateLinkBuilder());
            $editor->setAllowClear(true);
            $editor->setMinimumInputLength(0);
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $editColumn = new DynamicLookupEditColumn('Template', 'Template', 'Template_id', 'insert_Batches_Template_search', $editor, $this->dataset, $lookupDataset, 'Template', 'id', '');
            $validator = new RequiredValidator(StringUtils::Format($this->GetLocalizerCaptions()->GetMessageString('RequiredValidationMessage'), $editColumn->GetCaption()));
            $editor->GetValidatorCollection()->AddValidator($validator);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew Date field
            //
            $editor = new DateTimeEdit('brew_date_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date', 'Brew Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Ingredient_Cnt field
            //
            $editor = new TextEdit('ingredient_cnt_edit');
            $editColumn = new CustomEditColumn('Ingredient Cnt', 'Ingredient_Cnt', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews-Records field
            //
            $editor = new TextEdit('brews-records_edit');
            $editColumn = new CustomEditColumn('Brews-Records', 'Brews-Records', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews Blended from this Batch field
            //
            $editor = new TextEdit('brews_blended_from_this_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews Blended From This Batch', 'Brews Blended from this Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews Blended into this Batch field
            //
            $editor = new TextEdit('brews_blended_into_this_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews Blended Into This Batch', 'Brews Blended into this Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews field
            //
            $editor = new TextEdit('brews_edit');
            $editColumn = new CustomEditColumn('Brews', 'Brews', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew Date Start field
            //
            $editor = new DateTimeEdit('brew_date_start_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date Start', 'Brew Date Start', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew Date End field
            //
            $editor = new DateTimeEdit('brew_date_end_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Brew Date End', 'Brew Date End', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew Days field
            //
            $editor = new TextEdit('brew_days_edit');
            $editColumn = new CustomEditColumn('Brew Days', 'Brew Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Total Brews (Net) field
            //
            $editor = new TextEdit('total_brews_(net)_edit');
            $editColumn = new CustomEditColumn('Total Brews (Net)', 'Total Brews (Net)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for ProPitch field
            //
            $editor = new TextEdit('propitch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Pro Pitch', 'ProPitch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Yeast field
            //
            $editor = new TextEdit('yeast_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast', 'Yeast', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Yeast Source field
            //
            $editor = new TextEdit('yeast_source_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast Source', 'Yeast Source', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Yeast from FV field
            //
            $editor = new TextEdit('yeast_from_fv_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast From FV', 'Yeast from FV', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Nickname field
            //
            $editor = new TextEdit('nickname_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Nickname', 'Nickname', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Status field
            //
            $editor = new TextEdit('status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status', 'Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Batch-Status field
            //
            $editor = new TextEdit('batch-status_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Batch-Status', 'Batch-Status', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Days Running 1 field
            //
            $editor = new TextEdit('days_running_1_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Days Running 1', 'Days Running 1', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Days Running 2 field
            //
            $editor = new TextEdit('days_running_2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Days Running 2', 'Days Running 2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Style field
            //
            $editor = new TextEdit('style_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Style', 'Style', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FV field
            //
            $editor = new TextEdit('fv_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FV', 'FV', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FV Tank field
            //
            $editor = new TextEdit('fv_tank_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FV Tank', 'FV Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for BT field
            //
            $editor = new TextEdit('bt_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('BT', 'BT', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for BT Tank field
            //
            $editor = new TextEdit('bt_tank_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('BT Tank', 'BT Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Current Tank field
            //
            $editor = new TextEdit('current_tank_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Current Tank', 'Current Tank', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Bbls field
            //
            $editor = new TextEdit('bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Bbls', 'Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Color field
            //
            $editor = new TextEdit('color_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Color', 'Color', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for IBU field
            //
            $editor = new TextEdit('ibu_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('IBU', 'IBU', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for OG-AB field
            //
            $editor = new TextEdit('og-ab_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('OG-AB', 'OG-AB', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for OG field
            //
            $editor = new TextEdit('og_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('OG', 'OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FG_Min field
            //
            $editor = new TextEdit('fg_min_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FG Min', 'FG_Min', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Current Gravity field
            //
            $editor = new TextEdit('current_gravity_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Current Gravity', 'Current Gravity', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FG field
            //
            $editor = new TextEdit('fg_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('FG', 'FG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for ABV field
            //
            $editor = new TextEdit('abv_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('ABV', 'ABV', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Attenuation field
            //
            $editor = new TextEdit('attenuation_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Attenuation', 'Attenuation', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Yeast Pitch field
            //
            $editor = new TextEdit('yeast_pitch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Yeast Pitch', 'Yeast Pitch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Blend Ratio field
            //
            $editor = new TextEdit('blend_ratio_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Blend Ratio', 'Blend Ratio', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Notes field
            //
            $editor = new TextAreaEdit('notes_edit', 50, 8);
            $editColumn = new CustomEditColumn('Notes', 'Notes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Status2 field
            //
            $editor = new TextEdit('status2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Status2', 'Status2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dry Hop Date field
            //
            $editor = new TextEdit('dry_hop_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop Date', 'Dry Hop Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dry Hop Date Formula field
            //
            $editor = new TextEdit('dry_hop_date_formula_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Crash Date field
            //
            $editor = new TextEdit('crash_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash Date', 'Crash Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brite Tank Date field
            //
            $editor = new TextEdit('brite_tank_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brite Tank Date', 'Brite Tank Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Gone Date field
            //
            $editor = new TextEdit('gone_date_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Gone Date', 'Gone Date', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dry Hop Days field
            //
            $editor = new TextEdit('dry_hop_days_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop Days', 'Dry Hop Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Total Days field
            //
            $editor = new TextEdit('total_days_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Total Days', 'Total Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dry Hopped Running field
            //
            $editor = new TextEdit('dry_hopped_running_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hopped Running', 'Dry Hopped Running', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for User field
            //
            $editor = new TextEdit('user_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('User', 'User', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Maximum CO2 field
            //
            $editor = new TextEdit('maximum_co2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Maximum CO2', 'Maximum CO2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for CO2 Volumes field
            //
            $editor = new TextEdit('co2_volumes_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('CO2 Volumes', 'CO2 Volumes', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for This Batch Blended into Batch field
            //
            $editor = new TextEdit('this_batch_blended_into_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('This Batch Blended Into Batch', 'This Batch Blended into Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Batches Blended into this Batch field
            //
            $editor = new TextEdit('batches_blended_into_this_batch_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Batches Blended Into This Batch', 'Batches Blended into this Batch', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Calculated Days field
            //
            $editor = new TextEdit('calculated_days_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Calculated Days', 'Calculated Days', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Blended field
            //
            $editor = new TextEdit('blended_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Blended', 'Blended', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for TankLog Count field
            //
            $editor = new TextEdit('tanklog_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Tank Log Count', 'TankLog Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for KegLog Count field
            //
            $editor = new TextEdit('keglog_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Keg Log Count', 'KegLog Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Kegs Count field
            //
            $editor = new TextEdit('kegs_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Kegs Count', 'Kegs Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for PackageLog Count field
            //
            $editor = new TextEdit('packagelog_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Package Log Count', 'PackageLog Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for KegOrders Count field
            //
            $editor = new TextEdit('kegorders_count_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Keg Orders Count', 'KegOrders Count', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Net Bbls field
            //
            $editor = new TextEdit('net_bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Net Bbls', 'Net Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Canned & Kegged Barrels field
            //
            $editor = new TextEdit('canned_&_kegged_barrels_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Canning Runs field
            //
            $editor = new TextEdit('canning_runs_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Canning Runs', 'Canning Runs', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for 5G Kegs field
            //
            $editor = new TextEdit('5g_kegs_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('5 G Kegs', '5G Kegs', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for 50L Kegs field
            //
            $editor = new TextEdit('50l_kegs_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('50 L Kegs', '50L Kegs', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews-Bbls field
            //
            $editor = new TextEdit('brews-bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews-Bbls', 'Brews-Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews-OG field
            //
            $editor = new TextEdit('brews-og_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews-OG', 'Brews-OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Net Beer Factor field
            //
            $editor = new TextEdit('net_beer_factor_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Net Beer Factor', 'Net Beer Factor', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Batch Gross Bbls Calc field
            //
            $editor = new TextEdit('batch_gross_bbls_calc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Gross Bbls field
            //
            $editor = new TextEdit('gross_bbls_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Gross Bbls', 'Gross Bbls', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Remaining Bbls Calc field
            //
            $editor = new TextEdit('remaining_bbls_calc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Remaining Bbls (Est) field
            //
            $editor = new TextEdit('remaining_bbls_(est)_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Can Be Deleted field
            //
            $editor = new TextEdit('can_be_deleted_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Can Be Deleted', 'Can Be Deleted', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brews from Template field
            //
            $editor = new TextEdit('brews_from_template_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brews From Template', 'Brews from Template', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FermStart-DateCalc field
            //
            $editor = new TextEdit('fermstart-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm Start-Date Calc', 'FermStart-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FermStart-DateCalc2 field
            //
            $editor = new TextEdit('fermstart-datecalc2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm Start-Date Calc2', 'FermStart-DateCalc2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FermEnd-DateCalc field
            //
            $editor = new TextEdit('fermend-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm End-Date Calc', 'FermEnd-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FermEnd-DateCalc2 field
            //
            $editor = new TextEdit('fermend-datecalc2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm End-Date Calc2', 'FermEnd-DateCalc2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Ferm-DateCalc field
            //
            $editor = new TextEdit('ferm-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm-Date Calc', 'Ferm-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Ferm-DateCalc2 field
            //
            $editor = new TextEdit('ferm-datecalc2_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm-Date Calc2', 'Ferm-DateCalc2', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for FermEnd-DateDayNumber field
            //
            $editor = new TextEdit('fermend-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ferm End-Date Day Number', 'FermEnd-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for DryHop-DateDayAdd field
            //
            $editor = new TextEdit('dryhop-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dry Hop-Date Day Add', 'DryHop-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dryhop-DateCalc field
            //
            $editor = new TextEdit('dryhop-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dryhop-Date Calc', 'Dryhop-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Dryhop-DateDayNumber field
            //
            $editor = new TextEdit('dryhop-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Dryhop-Date Day Number', 'Dryhop-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Crash-DateDayAdd field
            //
            $editor = new TextEdit('crash-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash-Date Day Add', 'Crash-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Crash-DateCalc field
            //
            $editor = new TextEdit('crash-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash-Date Calc', 'Crash-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Crash-DateDayNumber field
            //
            $editor = new TextEdit('crash-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Crash-Date Day Number', 'Crash-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Transfer-DateDayAdd field
            //
            $editor = new TextEdit('transfer-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Transfer-Date Day Add', 'Transfer-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Transfer-DateCalc field
            //
            $editor = new TextEdit('transfer-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Transfer-Date Calc', 'Transfer-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Transfer-DateDayNumber field
            //
            $editor = new TextEdit('transfer-datedaynumber_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Transfer-Date Day Number', 'Transfer-DateDayNumber', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Package-DateDayAdd field
            //
            $editor = new TextEdit('package-datedayadd_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Package-Date Day Add', 'Package-DateDayAdd', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Package-DateCalc field
            //
            $editor = new TextEdit('package-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Package-Date Calc', 'Package-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Scheduled Steps field
            //
            $editor = new TextEdit('scheduled_steps_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Scheduled Steps', 'Scheduled Steps', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Steps Remaining field
            //
            $editor = new TextEdit('steps_remaining_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Steps Remaining', 'Steps Remaining', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for PropCrash-DateCalc field
            //
            $editor = new TextEdit('propcrash-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Prop Crash-Date Calc', 'PropCrash-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for PropTrans-DateCalc field
            //
            $editor = new TextEdit('proptrans-datecalc_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Prop Trans-Date Calc', 'PropTrans-DateCalc', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew Size (Gallons) field
            //
            $editor = new TextEdit('brew_size_(gallons)_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Brew % of 7Bbl field
            //
            $editor = new TextEdit('brew_%_of_7bbl_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Brew % Of 7 Bbl', 'Brew % of 7Bbl', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Sum - Potential Yield field
            //
            $editor = new TextEdit('sum_-_potential_yield_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Sum - Potential Yield', 'Sum - Potential Yield', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Potential OG field
            //
            $editor = new TextEdit('potential_og_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Potential OG', 'Potential OG', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Efficiency field
            //
            $editor = new TextEdit('efficiency_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Efficiency', 'Efficiency', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Ratings field
            //
            $editor = new TextEdit('ratings_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Ratings', 'Ratings', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for CurrentTank_Name field
            //
            $editor = new TextEdit('currenttank_name_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Current Tank Name', 'CurrentTank_Name', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Canned field
            //
            $editor = new DateTimeEdit('canned_edit', false, 'Y-m-d');
            $editColumn = new CustomEditColumn('Canned', 'Canned', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for PendingActivities field
            //
            $editor = new TextEdit('pendingactivities_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Pending Activities', 'PendingActivities', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for TempLogsCount field
            //
            $editor = new TextEdit('templogscount_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Temp Logs Count', 'TempLogsCount', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            
            //
            // Edit column for Rating field
            //
            $editor = new TextEdit('rating_edit');
            $editor->SetMaxLength(64);
            $editColumn = new CustomEditColumn('Rating', 'Rating', $editor, $this->dataset);
            $editColumn->SetAllowSetToNull(true);
            $this->ApplyCommonColumnEditProperties($editColumn);
            $grid->AddInsertColumn($editColumn);
            $grid->SetShowAddButton(true && $this->GetSecurityInfo()->HasAddGrant());
        }
    
        private function AddMultiUploadColumn(Grid $grid)
        {
    
        }
    
        protected function AddPrintColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for BatchID field
            //
            $column = new NumberViewColumn('BatchID', 'BatchID', 'Batch ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setHrefTemplate('%Template%');
            $column->setTarget('_self');
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Batch field
            //
            $column = new TextViewColumn('Batch', 'Batch', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Ingredient_Cnt field
            //
            $column = new NumberViewColumn('Ingredient_Cnt', 'Ingredient_Cnt', 'Ingredient Cnt', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews-Records field
            //
            $column = new NumberViewColumn('Brews-Records', 'Brews-Records', 'Brews-Records', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews Blended from this Batch field
            //
            $column = new TextViewColumn('Brews Blended from this Batch', 'Brews Blended from this Batch', 'Brews Blended From This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews Blended into this Batch field
            //
            $column = new TextViewColumn('Brews Blended into this Batch', 'Brews Blended into this Batch', 'Brews Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews field
            //
            $column = new NumberViewColumn('Brews', 'Brews', 'Brews', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew Date Start field
            //
            $column = new DateTimeViewColumn('Brew Date Start', 'Brew Date Start', 'Brew Date Start', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew Date End field
            //
            $column = new DateTimeViewColumn('Brew Date End', 'Brew Date End', 'Brew Date End', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew Days field
            //
            $column = new NumberViewColumn('Brew Days', 'Brew Days', 'Brew Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for Total Brews (Net) field
            //
            $column = new NumberViewColumn('Total Brews (Net)', 'Total Brews (Net)', 'Total Brews (Net)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddPrintColumn($column);
            
            //
            // View column for ProPitch field
            //
            $column = new TextViewColumn('ProPitch', 'ProPitch', 'Pro Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Yeast field
            //
            $column = new TextViewColumn('Yeast', 'Yeast', 'Yeast', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Yeast Source field
            //
            $column = new TextViewColumn('Yeast Source', 'Yeast Source', 'Yeast Source', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Yeast from FV field
            //
            $column = new TextViewColumn('Yeast from FV', 'Yeast from FV', 'Yeast From FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Batch-Status field
            //
            $column = new TextViewColumn('Batch-Status', 'Batch-Status', 'Batch-Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Days Running 1 field
            //
            $column = new TextViewColumn('Days Running 1', 'Days Running 1', 'Days Running 1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Days Running 2 field
            //
            $column = new TextViewColumn('Days Running 2', 'Days Running 2', 'Days Running 2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Style field
            //
            $column = new TextViewColumn('Style', 'Style', 'Style', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FV field
            //
            $column = new TextViewColumn('FV', 'FV', 'FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FV Tank field
            //
            $column = new TextViewColumn('FV Tank', 'FV Tank', 'FV Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for BT field
            //
            $column = new TextViewColumn('BT', 'BT', 'BT', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for BT Tank field
            //
            $column = new TextViewColumn('BT Tank', 'BT Tank', 'BT Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Current Tank field
            //
            $column = new TextViewColumn('Current Tank', 'Current Tank', 'Current Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new TextViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Color field
            //
            $column = new TextViewColumn('Color', 'Color', 'Color', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for IBU field
            //
            $column = new TextViewColumn('IBU', 'IBU', 'IBU', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for OG-AB field
            //
            $column = new TextViewColumn('OG-AB', 'OG-AB', 'OG-AB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for OG field
            //
            $column = new TextViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FG_Min field
            //
            $column = new TextViewColumn('FG_Min', 'FG_Min', 'FG Min', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Current Gravity field
            //
            $column = new TextViewColumn('Current Gravity', 'Current Gravity', 'Current Gravity', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FG field
            //
            $column = new TextViewColumn('FG', 'FG', 'FG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for ABV field
            //
            $column = new TextViewColumn('ABV', 'ABV', 'ABV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Attenuation field
            //
            $column = new TextViewColumn('Attenuation', 'Attenuation', 'Attenuation', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Yeast Pitch field
            //
            $column = new TextViewColumn('Yeast Pitch', 'Yeast Pitch', 'Yeast Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Blend Ratio field
            //
            $column = new TextViewColumn('Blend Ratio', 'Blend Ratio', 'Blend Ratio', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Status2 field
            //
            $column = new TextViewColumn('Status2', 'Status2', 'Status2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dry Hop Date field
            //
            $column = new TextViewColumn('Dry Hop Date', 'Dry Hop Date', 'Dry Hop Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dry Hop Date Formula field
            //
            $column = new TextViewColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', 'Dry Hop Date Formula', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Crash Date field
            //
            $column = new TextViewColumn('Crash Date', 'Crash Date', 'Crash Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brite Tank Date field
            //
            $column = new TextViewColumn('Brite Tank Date', 'Brite Tank Date', 'Brite Tank Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Gone Date field
            //
            $column = new TextViewColumn('Gone Date', 'Gone Date', 'Gone Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dry Hop Days field
            //
            $column = new TextViewColumn('Dry Hop Days', 'Dry Hop Days', 'Dry Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new TextViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dry Hopped Running field
            //
            $column = new TextViewColumn('Dry Hopped Running', 'Dry Hopped Running', 'Dry Hopped Running', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Maximum CO2 field
            //
            $column = new TextViewColumn('Maximum CO2', 'Maximum CO2', 'Maximum CO2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new TextViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for This Batch Blended into Batch field
            //
            $column = new TextViewColumn('This Batch Blended into Batch', 'This Batch Blended into Batch', 'This Batch Blended Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Batches Blended into this Batch field
            //
            $column = new TextViewColumn('Batches Blended into this Batch', 'Batches Blended into this Batch', 'Batches Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Calculated Days field
            //
            $column = new TextViewColumn('Calculated Days', 'Calculated Days', 'Calculated Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Blended field
            //
            $column = new TextViewColumn('Blended', 'Blended', 'Blended', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for TankLog Count field
            //
            $column = new TextViewColumn('TankLog Count', 'TankLog Count', 'Tank Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for KegLog Count field
            //
            $column = new TextViewColumn('KegLog Count', 'KegLog Count', 'Keg Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Kegs Count field
            //
            $column = new TextViewColumn('Kegs Count', 'Kegs Count', 'Kegs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for PackageLog Count field
            //
            $column = new TextViewColumn('PackageLog Count', 'PackageLog Count', 'Package Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for KegOrders Count field
            //
            $column = new TextViewColumn('KegOrders Count', 'KegOrders Count', 'Keg Orders Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Net Bbls field
            //
            $column = new TextViewColumn('Net Bbls', 'Net Bbls', 'Net Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Canned & Kegged Barrels field
            //
            $column = new TextViewColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', 'Canned & Kegged Barrels', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Canning Runs field
            //
            $column = new TextViewColumn('Canning Runs', 'Canning Runs', 'Canning Runs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for 5G Kegs field
            //
            $column = new TextViewColumn('5G Kegs', '5G Kegs', '5 G Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for 50L Kegs field
            //
            $column = new TextViewColumn('50L Kegs', '50L Kegs', '50 L Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews-Bbls field
            //
            $column = new TextViewColumn('Brews-Bbls', 'Brews-Bbls', 'Brews-Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews-OG field
            //
            $column = new TextViewColumn('Brews-OG', 'Brews-OG', 'Brews-OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Net Beer Factor field
            //
            $column = new TextViewColumn('Net Beer Factor', 'Net Beer Factor', 'Net Beer Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Batch Gross Bbls Calc field
            //
            $column = new TextViewColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Gross Bbls field
            //
            $column = new TextViewColumn('Gross Bbls', 'Gross Bbls', 'Gross Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Remaining Bbls Calc field
            //
            $column = new TextViewColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', 'Remaining Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Remaining Bbls (Est) field
            //
            $column = new TextViewColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', 'Remaining Bbls (Est)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Can Be Deleted field
            //
            $column = new TextViewColumn('Can Be Deleted', 'Can Be Deleted', 'Can Be Deleted', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brews from Template field
            //
            $column = new TextViewColumn('Brews from Template', 'Brews from Template', 'Brews From Template', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FermStart-DateCalc field
            //
            $column = new TextViewColumn('FermStart-DateCalc', 'FermStart-DateCalc', 'Ferm Start-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FermStart-DateCalc2 field
            //
            $column = new TextViewColumn('FermStart-DateCalc2', 'FermStart-DateCalc2', 'Ferm Start-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FermEnd-DateCalc field
            //
            $column = new TextViewColumn('FermEnd-DateCalc', 'FermEnd-DateCalc', 'Ferm End-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FermEnd-DateCalc2 field
            //
            $column = new TextViewColumn('FermEnd-DateCalc2', 'FermEnd-DateCalc2', 'Ferm End-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Ferm-DateCalc field
            //
            $column = new TextViewColumn('Ferm-DateCalc', 'Ferm-DateCalc', 'Ferm-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Ferm-DateCalc2 field
            //
            $column = new TextViewColumn('Ferm-DateCalc2', 'Ferm-DateCalc2', 'Ferm-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for FermEnd-DateDayNumber field
            //
            $column = new TextViewColumn('FermEnd-DateDayNumber', 'FermEnd-DateDayNumber', 'Ferm End-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for DryHop-DateDayAdd field
            //
            $column = new TextViewColumn('DryHop-DateDayAdd', 'DryHop-DateDayAdd', 'Dry Hop-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dryhop-DateCalc field
            //
            $column = new TextViewColumn('Dryhop-DateCalc', 'Dryhop-DateCalc', 'Dryhop-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Dryhop-DateDayNumber field
            //
            $column = new TextViewColumn('Dryhop-DateDayNumber', 'Dryhop-DateDayNumber', 'Dryhop-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Crash-DateDayAdd field
            //
            $column = new TextViewColumn('Crash-DateDayAdd', 'Crash-DateDayAdd', 'Crash-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Crash-DateCalc field
            //
            $column = new TextViewColumn('Crash-DateCalc', 'Crash-DateCalc', 'Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Crash-DateDayNumber field
            //
            $column = new TextViewColumn('Crash-DateDayNumber', 'Crash-DateDayNumber', 'Crash-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Transfer-DateDayAdd field
            //
            $column = new TextViewColumn('Transfer-DateDayAdd', 'Transfer-DateDayAdd', 'Transfer-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Transfer-DateCalc field
            //
            $column = new TextViewColumn('Transfer-DateCalc', 'Transfer-DateCalc', 'Transfer-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Transfer-DateDayNumber field
            //
            $column = new TextViewColumn('Transfer-DateDayNumber', 'Transfer-DateDayNumber', 'Transfer-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Package-DateDayAdd field
            //
            $column = new TextViewColumn('Package-DateDayAdd', 'Package-DateDayAdd', 'Package-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Package-DateCalc field
            //
            $column = new TextViewColumn('Package-DateCalc', 'Package-DateCalc', 'Package-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Scheduled Steps field
            //
            $column = new TextViewColumn('Scheduled Steps', 'Scheduled Steps', 'Scheduled Steps', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Steps Remaining field
            //
            $column = new TextViewColumn('Steps Remaining', 'Steps Remaining', 'Steps Remaining', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for PropCrash-DateCalc field
            //
            $column = new TextViewColumn('PropCrash-DateCalc', 'PropCrash-DateCalc', 'Prop Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for PropTrans-DateCalc field
            //
            $column = new TextViewColumn('PropTrans-DateCalc', 'PropTrans-DateCalc', 'Prop Trans-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew Size (Gallons) field
            //
            $column = new TextViewColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', 'Brew Size (Gallons)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Brew % of 7Bbl field
            //
            $column = new TextViewColumn('Brew % of 7Bbl', 'Brew % of 7Bbl', 'Brew % Of 7 Bbl', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Sum - Potential Yield field
            //
            $column = new TextViewColumn('Sum - Potential Yield', 'Sum - Potential Yield', 'Sum - Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Potential OG field
            //
            $column = new TextViewColumn('Potential OG', 'Potential OG', 'Potential OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Efficiency field
            //
            $column = new TextViewColumn('Efficiency', 'Efficiency', 'Efficiency', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Ratings field
            //
            $column = new TextViewColumn('Ratings', 'Ratings', 'Ratings', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for CurrentTank_Name field
            //
            $column = new TextViewColumn('CurrentTank_Name', 'CurrentTank_Name', 'Current Tank Name', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Canned field
            //
            $column = new DateTimeViewColumn('Canned', 'Canned', 'Canned', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddPrintColumn($column);
            
            //
            // View column for PendingActivities field
            //
            $column = new TextViewColumn('PendingActivities', 'PendingActivities', 'Pending Activities', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for TempLogsCount field
            //
            $column = new TextViewColumn('TempLogsCount', 'TempLogsCount', 'Temp Logs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
            
            //
            // View column for Rating field
            //
            $column = new TextViewColumn('Rating', 'Rating', 'Rating', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddPrintColumn($column);
        }
    
        protected function AddExportColumns(Grid $grid)
        {
            //
            // View column for id field
            //
            $column = new NumberViewColumn('id', 'id', 'Id', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for BatchID field
            //
            $column = new NumberViewColumn('BatchID', 'BatchID', 'Batch ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setHrefTemplate('%Template%');
            $column->setTarget('_self');
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Batch field
            //
            $column = new TextViewColumn('Batch', 'Batch', 'Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for Ingredient_Cnt field
            //
            $column = new NumberViewColumn('Ingredient_Cnt', 'Ingredient_Cnt', 'Ingredient Cnt', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews-Records field
            //
            $column = new NumberViewColumn('Brews-Records', 'Brews-Records', 'Brews-Records', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews Blended from this Batch field
            //
            $column = new TextViewColumn('Brews Blended from this Batch', 'Brews Blended from this Batch', 'Brews Blended From This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews Blended into this Batch field
            //
            $column = new TextViewColumn('Brews Blended into this Batch', 'Brews Blended into this Batch', 'Brews Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews field
            //
            $column = new NumberViewColumn('Brews', 'Brews', 'Brews', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew Date Start field
            //
            $column = new DateTimeViewColumn('Brew Date Start', 'Brew Date Start', 'Brew Date Start', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew Date End field
            //
            $column = new DateTimeViewColumn('Brew Date End', 'Brew Date End', 'Brew Date End', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew Days field
            //
            $column = new NumberViewColumn('Brew Days', 'Brew Days', 'Brew Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for Total Brews (Net) field
            //
            $column = new NumberViewColumn('Total Brews (Net)', 'Total Brews (Net)', 'Total Brews (Net)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddExportColumn($column);
            
            //
            // View column for ProPitch field
            //
            $column = new TextViewColumn('ProPitch', 'ProPitch', 'Pro Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Yeast field
            //
            $column = new TextViewColumn('Yeast', 'Yeast', 'Yeast', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Yeast Source field
            //
            $column = new TextViewColumn('Yeast Source', 'Yeast Source', 'Yeast Source', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Yeast from FV field
            //
            $column = new TextViewColumn('Yeast from FV', 'Yeast from FV', 'Yeast From FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Batch-Status field
            //
            $column = new TextViewColumn('Batch-Status', 'Batch-Status', 'Batch-Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Days Running 1 field
            //
            $column = new TextViewColumn('Days Running 1', 'Days Running 1', 'Days Running 1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Days Running 2 field
            //
            $column = new TextViewColumn('Days Running 2', 'Days Running 2', 'Days Running 2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Style field
            //
            $column = new TextViewColumn('Style', 'Style', 'Style', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FV field
            //
            $column = new TextViewColumn('FV', 'FV', 'FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FV Tank field
            //
            $column = new TextViewColumn('FV Tank', 'FV Tank', 'FV Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for BT field
            //
            $column = new TextViewColumn('BT', 'BT', 'BT', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for BT Tank field
            //
            $column = new TextViewColumn('BT Tank', 'BT Tank', 'BT Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Current Tank field
            //
            $column = new TextViewColumn('Current Tank', 'Current Tank', 'Current Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new TextViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Color field
            //
            $column = new TextViewColumn('Color', 'Color', 'Color', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for IBU field
            //
            $column = new TextViewColumn('IBU', 'IBU', 'IBU', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for OG-AB field
            //
            $column = new TextViewColumn('OG-AB', 'OG-AB', 'OG-AB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for OG field
            //
            $column = new TextViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FG_Min field
            //
            $column = new TextViewColumn('FG_Min', 'FG_Min', 'FG Min', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Current Gravity field
            //
            $column = new TextViewColumn('Current Gravity', 'Current Gravity', 'Current Gravity', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FG field
            //
            $column = new TextViewColumn('FG', 'FG', 'FG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for ABV field
            //
            $column = new TextViewColumn('ABV', 'ABV', 'ABV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Attenuation field
            //
            $column = new TextViewColumn('Attenuation', 'Attenuation', 'Attenuation', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Yeast Pitch field
            //
            $column = new TextViewColumn('Yeast Pitch', 'Yeast Pitch', 'Yeast Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Blend Ratio field
            //
            $column = new TextViewColumn('Blend Ratio', 'Blend Ratio', 'Blend Ratio', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddExportColumn($column);
            
            //
            // View column for Status2 field
            //
            $column = new TextViewColumn('Status2', 'Status2', 'Status2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dry Hop Date field
            //
            $column = new TextViewColumn('Dry Hop Date', 'Dry Hop Date', 'Dry Hop Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dry Hop Date Formula field
            //
            $column = new TextViewColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', 'Dry Hop Date Formula', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Crash Date field
            //
            $column = new TextViewColumn('Crash Date', 'Crash Date', 'Crash Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brite Tank Date field
            //
            $column = new TextViewColumn('Brite Tank Date', 'Brite Tank Date', 'Brite Tank Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Gone Date field
            //
            $column = new TextViewColumn('Gone Date', 'Gone Date', 'Gone Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dry Hop Days field
            //
            $column = new TextViewColumn('Dry Hop Days', 'Dry Hop Days', 'Dry Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new TextViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dry Hopped Running field
            //
            $column = new TextViewColumn('Dry Hopped Running', 'Dry Hopped Running', 'Dry Hopped Running', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Maximum CO2 field
            //
            $column = new TextViewColumn('Maximum CO2', 'Maximum CO2', 'Maximum CO2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new TextViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for This Batch Blended into Batch field
            //
            $column = new TextViewColumn('This Batch Blended into Batch', 'This Batch Blended into Batch', 'This Batch Blended Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Batches Blended into this Batch field
            //
            $column = new TextViewColumn('Batches Blended into this Batch', 'Batches Blended into this Batch', 'Batches Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Calculated Days field
            //
            $column = new TextViewColumn('Calculated Days', 'Calculated Days', 'Calculated Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Blended field
            //
            $column = new TextViewColumn('Blended', 'Blended', 'Blended', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for TankLog Count field
            //
            $column = new TextViewColumn('TankLog Count', 'TankLog Count', 'Tank Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for KegLog Count field
            //
            $column = new TextViewColumn('KegLog Count', 'KegLog Count', 'Keg Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Kegs Count field
            //
            $column = new TextViewColumn('Kegs Count', 'Kegs Count', 'Kegs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for PackageLog Count field
            //
            $column = new TextViewColumn('PackageLog Count', 'PackageLog Count', 'Package Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for KegOrders Count field
            //
            $column = new TextViewColumn('KegOrders Count', 'KegOrders Count', 'Keg Orders Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Net Bbls field
            //
            $column = new TextViewColumn('Net Bbls', 'Net Bbls', 'Net Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Canned & Kegged Barrels field
            //
            $column = new TextViewColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', 'Canned & Kegged Barrels', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Canning Runs field
            //
            $column = new TextViewColumn('Canning Runs', 'Canning Runs', 'Canning Runs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for 5G Kegs field
            //
            $column = new TextViewColumn('5G Kegs', '5G Kegs', '5 G Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for 50L Kegs field
            //
            $column = new TextViewColumn('50L Kegs', '50L Kegs', '50 L Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews-Bbls field
            //
            $column = new TextViewColumn('Brews-Bbls', 'Brews-Bbls', 'Brews-Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews-OG field
            //
            $column = new TextViewColumn('Brews-OG', 'Brews-OG', 'Brews-OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Net Beer Factor field
            //
            $column = new TextViewColumn('Net Beer Factor', 'Net Beer Factor', 'Net Beer Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Batch Gross Bbls Calc field
            //
            $column = new TextViewColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Gross Bbls field
            //
            $column = new TextViewColumn('Gross Bbls', 'Gross Bbls', 'Gross Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Remaining Bbls Calc field
            //
            $column = new TextViewColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', 'Remaining Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Remaining Bbls (Est) field
            //
            $column = new TextViewColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', 'Remaining Bbls (Est)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Can Be Deleted field
            //
            $column = new TextViewColumn('Can Be Deleted', 'Can Be Deleted', 'Can Be Deleted', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brews from Template field
            //
            $column = new TextViewColumn('Brews from Template', 'Brews from Template', 'Brews From Template', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FermStart-DateCalc field
            //
            $column = new TextViewColumn('FermStart-DateCalc', 'FermStart-DateCalc', 'Ferm Start-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FermStart-DateCalc2 field
            //
            $column = new TextViewColumn('FermStart-DateCalc2', 'FermStart-DateCalc2', 'Ferm Start-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FermEnd-DateCalc field
            //
            $column = new TextViewColumn('FermEnd-DateCalc', 'FermEnd-DateCalc', 'Ferm End-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FermEnd-DateCalc2 field
            //
            $column = new TextViewColumn('FermEnd-DateCalc2', 'FermEnd-DateCalc2', 'Ferm End-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Ferm-DateCalc field
            //
            $column = new TextViewColumn('Ferm-DateCalc', 'Ferm-DateCalc', 'Ferm-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Ferm-DateCalc2 field
            //
            $column = new TextViewColumn('Ferm-DateCalc2', 'Ferm-DateCalc2', 'Ferm-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for FermEnd-DateDayNumber field
            //
            $column = new TextViewColumn('FermEnd-DateDayNumber', 'FermEnd-DateDayNumber', 'Ferm End-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for DryHop-DateDayAdd field
            //
            $column = new TextViewColumn('DryHop-DateDayAdd', 'DryHop-DateDayAdd', 'Dry Hop-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dryhop-DateCalc field
            //
            $column = new TextViewColumn('Dryhop-DateCalc', 'Dryhop-DateCalc', 'Dryhop-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Dryhop-DateDayNumber field
            //
            $column = new TextViewColumn('Dryhop-DateDayNumber', 'Dryhop-DateDayNumber', 'Dryhop-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Crash-DateDayAdd field
            //
            $column = new TextViewColumn('Crash-DateDayAdd', 'Crash-DateDayAdd', 'Crash-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Crash-DateCalc field
            //
            $column = new TextViewColumn('Crash-DateCalc', 'Crash-DateCalc', 'Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Crash-DateDayNumber field
            //
            $column = new TextViewColumn('Crash-DateDayNumber', 'Crash-DateDayNumber', 'Crash-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Transfer-DateDayAdd field
            //
            $column = new TextViewColumn('Transfer-DateDayAdd', 'Transfer-DateDayAdd', 'Transfer-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Transfer-DateCalc field
            //
            $column = new TextViewColumn('Transfer-DateCalc', 'Transfer-DateCalc', 'Transfer-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Transfer-DateDayNumber field
            //
            $column = new TextViewColumn('Transfer-DateDayNumber', 'Transfer-DateDayNumber', 'Transfer-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Package-DateDayAdd field
            //
            $column = new TextViewColumn('Package-DateDayAdd', 'Package-DateDayAdd', 'Package-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Package-DateCalc field
            //
            $column = new TextViewColumn('Package-DateCalc', 'Package-DateCalc', 'Package-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Scheduled Steps field
            //
            $column = new TextViewColumn('Scheduled Steps', 'Scheduled Steps', 'Scheduled Steps', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Steps Remaining field
            //
            $column = new TextViewColumn('Steps Remaining', 'Steps Remaining', 'Steps Remaining', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for PropCrash-DateCalc field
            //
            $column = new TextViewColumn('PropCrash-DateCalc', 'PropCrash-DateCalc', 'Prop Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for PropTrans-DateCalc field
            //
            $column = new TextViewColumn('PropTrans-DateCalc', 'PropTrans-DateCalc', 'Prop Trans-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew Size (Gallons) field
            //
            $column = new TextViewColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', 'Brew Size (Gallons)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Brew % of 7Bbl field
            //
            $column = new TextViewColumn('Brew % of 7Bbl', 'Brew % of 7Bbl', 'Brew % Of 7 Bbl', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Sum - Potential Yield field
            //
            $column = new TextViewColumn('Sum - Potential Yield', 'Sum - Potential Yield', 'Sum - Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Potential OG field
            //
            $column = new TextViewColumn('Potential OG', 'Potential OG', 'Potential OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Efficiency field
            //
            $column = new TextViewColumn('Efficiency', 'Efficiency', 'Efficiency', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Ratings field
            //
            $column = new TextViewColumn('Ratings', 'Ratings', 'Ratings', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for CurrentTank_Name field
            //
            $column = new TextViewColumn('CurrentTank_Name', 'CurrentTank_Name', 'Current Tank Name', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Canned field
            //
            $column = new DateTimeViewColumn('Canned', 'Canned', 'Canned', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddExportColumn($column);
            
            //
            // View column for PendingActivities field
            //
            $column = new TextViewColumn('PendingActivities', 'PendingActivities', 'Pending Activities', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for TempLogsCount field
            //
            $column = new TextViewColumn('TempLogsCount', 'TempLogsCount', 'Temp Logs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
            
            //
            // View column for Rating field
            //
            $column = new TextViewColumn('Rating', 'Rating', 'Rating', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddExportColumn($column);
        }
    
        private function AddCompareColumns(Grid $grid)
        {
            //
            // View column for BatchID field
            //
            $column = new NumberViewColumn('BatchID', 'BatchID', 'Batch ID', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for id field
            //
            $column = new NumberViewColumn('Template', 'Template_id', 'Template', $this->dataset);
            $column->SetOrderable(true);
            $column->setHrefTemplate('%Template%');
            $column->setTarget('_self');
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew Date field
            //
            $column = new DateTimeViewColumn('Brew Date', 'Brew Date', 'Brew Date', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Ingredient_Cnt field
            //
            $column = new NumberViewColumn('Ingredient_Cnt', 'Ingredient_Cnt', 'Ingredient Cnt', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews-Records field
            //
            $column = new NumberViewColumn('Brews-Records', 'Brews-Records', 'Brews-Records', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews Blended from this Batch field
            //
            $column = new TextViewColumn('Brews Blended from this Batch', 'Brews Blended from this Batch', 'Brews Blended From This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews Blended into this Batch field
            //
            $column = new TextViewColumn('Brews Blended into this Batch', 'Brews Blended into this Batch', 'Brews Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews field
            //
            $column = new NumberViewColumn('Brews', 'Brews', 'Brews', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew Date Start field
            //
            $column = new DateTimeViewColumn('Brew Date Start', 'Brew Date Start', 'Brew Date Start', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew Date End field
            //
            $column = new DateTimeViewColumn('Brew Date End', 'Brew Date End', 'Brew Date End', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew Days field
            //
            $column = new NumberViewColumn('Brew Days', 'Brew Days', 'Brew Days', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for Total Brews (Net) field
            //
            $column = new NumberViewColumn('Total Brews (Net)', 'Total Brews (Net)', 'Total Brews (Net)', $this->dataset);
            $column->SetOrderable(true);
            $column->setNumberAfterDecimal(0);
            $column->setThousandsSeparator(',');
            $column->setDecimalSeparator('');
            $grid->AddCompareColumn($column);
            
            //
            // View column for ProPitch field
            //
            $column = new TextViewColumn('ProPitch', 'ProPitch', 'Pro Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Yeast field
            //
            $column = new TextViewColumn('Yeast', 'Yeast', 'Yeast', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Yeast Source field
            //
            $column = new TextViewColumn('Yeast Source', 'Yeast Source', 'Yeast Source', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Yeast from FV field
            //
            $column = new TextViewColumn('Yeast from FV', 'Yeast from FV', 'Yeast From FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Nickname field
            //
            $column = new TextViewColumn('Nickname', 'Nickname', 'Nickname', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Status field
            //
            $column = new TextViewColumn('Status', 'Status', 'Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Batch-Status field
            //
            $column = new TextViewColumn('Batch-Status', 'Batch-Status', 'Batch-Status', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Days Running 1 field
            //
            $column = new TextViewColumn('Days Running 1', 'Days Running 1', 'Days Running 1', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Days Running 2 field
            //
            $column = new TextViewColumn('Days Running 2', 'Days Running 2', 'Days Running 2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Style field
            //
            $column = new TextViewColumn('Style', 'Style', 'Style', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FV field
            //
            $column = new TextViewColumn('FV', 'FV', 'FV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FV Tank field
            //
            $column = new TextViewColumn('FV Tank', 'FV Tank', 'FV Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for BT field
            //
            $column = new TextViewColumn('BT', 'BT', 'BT', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for BT Tank field
            //
            $column = new TextViewColumn('BT Tank', 'BT Tank', 'BT Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Current Tank field
            //
            $column = new TextViewColumn('Current Tank', 'Current Tank', 'Current Tank', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Bbls field
            //
            $column = new TextViewColumn('Bbls', 'Bbls', 'Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Color field
            //
            $column = new TextViewColumn('Color', 'Color', 'Color', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for IBU field
            //
            $column = new TextViewColumn('IBU', 'IBU', 'IBU', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for OG-AB field
            //
            $column = new TextViewColumn('OG-AB', 'OG-AB', 'OG-AB', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for OG field
            //
            $column = new TextViewColumn('OG', 'OG', 'OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FG_Min field
            //
            $column = new TextViewColumn('FG_Min', 'FG_Min', 'FG Min', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Current Gravity field
            //
            $column = new TextViewColumn('Current Gravity', 'Current Gravity', 'Current Gravity', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FG field
            //
            $column = new TextViewColumn('FG', 'FG', 'FG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for ABV field
            //
            $column = new TextViewColumn('ABV', 'ABV', 'ABV', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Attenuation field
            //
            $column = new TextViewColumn('Attenuation', 'Attenuation', 'Attenuation', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Yeast Pitch field
            //
            $column = new TextViewColumn('Yeast Pitch', 'Yeast Pitch', 'Yeast Pitch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Blend Ratio field
            //
            $column = new TextViewColumn('Blend Ratio', 'Blend Ratio', 'Blend Ratio', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Notes field
            //
            $column = new TextViewColumn('Notes', 'Notes', 'Notes', $this->dataset);
            $column->SetOrderable(true);
            $column->SetMaxLength(75);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Status2 field
            //
            $column = new TextViewColumn('Status2', 'Status2', 'Status2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dry Hop Date field
            //
            $column = new TextViewColumn('Dry Hop Date', 'Dry Hop Date', 'Dry Hop Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dry Hop Date Formula field
            //
            $column = new TextViewColumn('Dry Hop Date Formula', 'Dry Hop Date Formula', 'Dry Hop Date Formula', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Crash Date field
            //
            $column = new TextViewColumn('Crash Date', 'Crash Date', 'Crash Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brite Tank Date field
            //
            $column = new TextViewColumn('Brite Tank Date', 'Brite Tank Date', 'Brite Tank Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Gone Date field
            //
            $column = new TextViewColumn('Gone Date', 'Gone Date', 'Gone Date', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dry Hop Days field
            //
            $column = new TextViewColumn('Dry Hop Days', 'Dry Hop Days', 'Dry Hop Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Total Days field
            //
            $column = new TextViewColumn('Total Days', 'Total Days', 'Total Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dry Hopped Running field
            //
            $column = new TextViewColumn('Dry Hopped Running', 'Dry Hopped Running', 'Dry Hopped Running', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for User field
            //
            $column = new TextViewColumn('User', 'User', 'User', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Maximum CO2 field
            //
            $column = new TextViewColumn('Maximum CO2', 'Maximum CO2', 'Maximum CO2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for CO2 Volumes field
            //
            $column = new TextViewColumn('CO2 Volumes', 'CO2 Volumes', 'CO2 Volumes', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for This Batch Blended into Batch field
            //
            $column = new TextViewColumn('This Batch Blended into Batch', 'This Batch Blended into Batch', 'This Batch Blended Into Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Batches Blended into this Batch field
            //
            $column = new TextViewColumn('Batches Blended into this Batch', 'Batches Blended into this Batch', 'Batches Blended Into This Batch', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Calculated Days field
            //
            $column = new TextViewColumn('Calculated Days', 'Calculated Days', 'Calculated Days', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Blended field
            //
            $column = new TextViewColumn('Blended', 'Blended', 'Blended', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for TankLog Count field
            //
            $column = new TextViewColumn('TankLog Count', 'TankLog Count', 'Tank Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for KegLog Count field
            //
            $column = new TextViewColumn('KegLog Count', 'KegLog Count', 'Keg Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Kegs Count field
            //
            $column = new TextViewColumn('Kegs Count', 'Kegs Count', 'Kegs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for PackageLog Count field
            //
            $column = new TextViewColumn('PackageLog Count', 'PackageLog Count', 'Package Log Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for KegOrders Count field
            //
            $column = new TextViewColumn('KegOrders Count', 'KegOrders Count', 'Keg Orders Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Net Bbls field
            //
            $column = new TextViewColumn('Net Bbls', 'Net Bbls', 'Net Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Canned & Kegged Barrels field
            //
            $column = new TextViewColumn('Canned & Kegged Barrels', 'Canned & Kegged Barrels', 'Canned & Kegged Barrels', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Canning Runs field
            //
            $column = new TextViewColumn('Canning Runs', 'Canning Runs', 'Canning Runs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for 5G Kegs field
            //
            $column = new TextViewColumn('5G Kegs', '5G Kegs', '5 G Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for 50L Kegs field
            //
            $column = new TextViewColumn('50L Kegs', '50L Kegs', '50 L Kegs', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews-Bbls field
            //
            $column = new TextViewColumn('Brews-Bbls', 'Brews-Bbls', 'Brews-Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews-OG field
            //
            $column = new TextViewColumn('Brews-OG', 'Brews-OG', 'Brews-OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Net Beer Factor field
            //
            $column = new TextViewColumn('Net Beer Factor', 'Net Beer Factor', 'Net Beer Factor', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Batch Gross Bbls Calc field
            //
            $column = new TextViewColumn('Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', 'Batch Gross Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Gross Bbls field
            //
            $column = new TextViewColumn('Gross Bbls', 'Gross Bbls', 'Gross Bbls', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Remaining Bbls Calc field
            //
            $column = new TextViewColumn('Remaining Bbls Calc', 'Remaining Bbls Calc', 'Remaining Bbls Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Remaining Bbls (Est) field
            //
            $column = new TextViewColumn('Remaining Bbls (Est)', 'Remaining Bbls (Est)', 'Remaining Bbls (Est)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Can Be Deleted field
            //
            $column = new TextViewColumn('Can Be Deleted', 'Can Be Deleted', 'Can Be Deleted', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brews from Template field
            //
            $column = new TextViewColumn('Brews from Template', 'Brews from Template', 'Brews From Template', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FermStart-DateCalc field
            //
            $column = new TextViewColumn('FermStart-DateCalc', 'FermStart-DateCalc', 'Ferm Start-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FermStart-DateCalc2 field
            //
            $column = new TextViewColumn('FermStart-DateCalc2', 'FermStart-DateCalc2', 'Ferm Start-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FermEnd-DateCalc field
            //
            $column = new TextViewColumn('FermEnd-DateCalc', 'FermEnd-DateCalc', 'Ferm End-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FermEnd-DateCalc2 field
            //
            $column = new TextViewColumn('FermEnd-DateCalc2', 'FermEnd-DateCalc2', 'Ferm End-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Ferm-DateCalc field
            //
            $column = new TextViewColumn('Ferm-DateCalc', 'Ferm-DateCalc', 'Ferm-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Ferm-DateCalc2 field
            //
            $column = new TextViewColumn('Ferm-DateCalc2', 'Ferm-DateCalc2', 'Ferm-Date Calc2', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for FermEnd-DateDayNumber field
            //
            $column = new TextViewColumn('FermEnd-DateDayNumber', 'FermEnd-DateDayNumber', 'Ferm End-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for DryHop-DateDayAdd field
            //
            $column = new TextViewColumn('DryHop-DateDayAdd', 'DryHop-DateDayAdd', 'Dry Hop-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dryhop-DateCalc field
            //
            $column = new TextViewColumn('Dryhop-DateCalc', 'Dryhop-DateCalc', 'Dryhop-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Dryhop-DateDayNumber field
            //
            $column = new TextViewColumn('Dryhop-DateDayNumber', 'Dryhop-DateDayNumber', 'Dryhop-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Crash-DateDayAdd field
            //
            $column = new TextViewColumn('Crash-DateDayAdd', 'Crash-DateDayAdd', 'Crash-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Crash-DateCalc field
            //
            $column = new TextViewColumn('Crash-DateCalc', 'Crash-DateCalc', 'Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Crash-DateDayNumber field
            //
            $column = new TextViewColumn('Crash-DateDayNumber', 'Crash-DateDayNumber', 'Crash-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Transfer-DateDayAdd field
            //
            $column = new TextViewColumn('Transfer-DateDayAdd', 'Transfer-DateDayAdd', 'Transfer-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Transfer-DateCalc field
            //
            $column = new TextViewColumn('Transfer-DateCalc', 'Transfer-DateCalc', 'Transfer-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Transfer-DateDayNumber field
            //
            $column = new TextViewColumn('Transfer-DateDayNumber', 'Transfer-DateDayNumber', 'Transfer-Date Day Number', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Package-DateDayAdd field
            //
            $column = new TextViewColumn('Package-DateDayAdd', 'Package-DateDayAdd', 'Package-Date Day Add', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Package-DateCalc field
            //
            $column = new TextViewColumn('Package-DateCalc', 'Package-DateCalc', 'Package-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Scheduled Steps field
            //
            $column = new TextViewColumn('Scheduled Steps', 'Scheduled Steps', 'Scheduled Steps', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Steps Remaining field
            //
            $column = new TextViewColumn('Steps Remaining', 'Steps Remaining', 'Steps Remaining', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for PropCrash-DateCalc field
            //
            $column = new TextViewColumn('PropCrash-DateCalc', 'PropCrash-DateCalc', 'Prop Crash-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for PropTrans-DateCalc field
            //
            $column = new TextViewColumn('PropTrans-DateCalc', 'PropTrans-DateCalc', 'Prop Trans-Date Calc', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew Size (Gallons) field
            //
            $column = new TextViewColumn('Brew Size (Gallons)', 'Brew Size (Gallons)', 'Brew Size (Gallons)', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Brew % of 7Bbl field
            //
            $column = new TextViewColumn('Brew % of 7Bbl', 'Brew % of 7Bbl', 'Brew % Of 7 Bbl', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Sum - Potential Yield field
            //
            $column = new TextViewColumn('Sum - Potential Yield', 'Sum - Potential Yield', 'Sum - Potential Yield', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Potential OG field
            //
            $column = new TextViewColumn('Potential OG', 'Potential OG', 'Potential OG', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Efficiency field
            //
            $column = new TextViewColumn('Efficiency', 'Efficiency', 'Efficiency', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Ratings field
            //
            $column = new TextViewColumn('Ratings', 'Ratings', 'Ratings', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for CurrentTank_Name field
            //
            $column = new TextViewColumn('CurrentTank_Name', 'CurrentTank_Name', 'Current Tank Name', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Canned field
            //
            $column = new DateTimeViewColumn('Canned', 'Canned', 'Canned', $this->dataset);
            $column->SetOrderable(true);
            $column->SetDateTimeFormat('Y-m-d');
            $grid->AddCompareColumn($column);
            
            //
            // View column for PendingActivities field
            //
            $column = new TextViewColumn('PendingActivities', 'PendingActivities', 'Pending Activities', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for TempLogsCount field
            //
            $column = new TextViewColumn('TempLogsCount', 'TempLogsCount', 'Temp Logs Count', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
            
            //
            // View column for Rating field
            //
            $column = new TextViewColumn('Rating', 'Rating', 'Rating', $this->dataset);
            $column->SetOrderable(true);
            $grid->AddCompareColumn($column);
        }
    
        private function AddCompareHeaderColumns(Grid $grid)
        {
    
        }
    
        public function GetPageDirection()
        {
            return null;
        }
    
        public function isFilterConditionRequired()
        {
            return false;
        }
    
        protected function ApplyCommonColumnEditProperties(CustomEditColumn $column)
        {
            $column->SetDisplaySetToNullCheckBox(false);
            $column->SetDisplaySetToDefaultCheckBox(false);
    		$column->SetVariableContainer($this->GetColumnVariableContainer());
        }
    
        function CreateMasterDetailRecordGrid()
        {
            $result = new Grid($this, $this->dataset);
            
            $this->AddFieldColumns($result, false);
            $this->AddPrintColumns($result);
            $this->AddExportColumns($result);
            
            $result->SetAllowDeleteSelected(false);
            $result->SetShowUpdateLink(false);
            $result->SetShowKeyColumnsImagesInHeader(false);
            $result->SetViewMode(ViewMode::TABLE);
            $result->setEnableRuntimeCustomization(false);
            $result->setTableBordered(false);
            $result->setTableCondensed(false);
            
            $this->setupGridColumnGroup($result);
            $this->attachGridEventHandlers($result);
            
            return $result;
        }
        
        function GetCustomClientScript()
        {
            return ;
        }
        
        function GetOnPageLoadedClientScript()
        {
            return ;
        }
    
        protected function CreateGrid()
        {
            $result = new Grid($this, $this->dataset);
            if ($this->GetSecurityInfo()->HasDeleteGrant())
               $result->SetAllowDeleteSelected(true);
            else
               $result->SetAllowDeleteSelected(false);   
            
            ApplyCommonPageSettings($this, $result);
            
            $result->SetUseImagesForActions(true);
            $result->SetUseFixedHeader(false);
            $result->SetShowLineNumbers(false);
            $result->SetShowKeyColumnsImagesInHeader(false);
            $result->SetViewMode(ViewMode::TABLE);
            $result->setEnableRuntimeCustomization(true);
            $result->setAllowCompare(true);
            $this->AddCompareHeaderColumns($result);
            $this->AddCompareColumns($result);
            $result->setMultiEditAllowed($this->GetSecurityInfo()->HasEditGrant() && true);
            $result->setTableBordered(false);
            $result->setTableCondensed(false);
            
            $result->SetHighlightRowAtHover(false);
            $result->SetWidth('');
            $this->AddOperationsColumns($result);
            $this->AddFieldColumns($result);
            $this->AddSingleRecordViewColumns($result);
            $this->AddEditColumns($result);
            $this->AddMultiEditColumns($result);
            $this->AddToggleEditColumns($result);
            $this->AddInsertColumns($result);
            $this->AddPrintColumns($result);
            $this->AddExportColumns($result);
            $this->AddMultiUploadColumn($result);
    
    
            $this->SetShowPageList(true);
            $this->SetShowTopPageNavigator(true);
            $this->SetShowBottomPageNavigator(true);
            $this->setAllowedActions(array('view', 'insert', 'copy', 'edit', 'multi-edit', 'delete', 'multi-delete'));
            $this->setPrintListAvailable(true);
            $this->setPrintListRecordAvailable(false);
            $this->setPrintOneRecordAvailable(true);
            $this->setAllowPrintSelectedRecords(true);
            $this->setExportListAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportSelectedRecordsAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
            $this->setExportListRecordAvailable(array());
            $this->setExportOneRecordAvailable(array('pdf', 'excel', 'word', 'xml', 'csv'));
    
            return $result;
        }
     
        protected function setClientSideEvents(Grid $grid) {
    
        }
    
        protected function doRegisterHandlers() {
            $detailPage = new Batches_BrewsPage('Batches_Brews', $this, array('Batch'), array('Batch'), $this->GetForeignKeyFields(), $this->CreateMasterDetailRecordGrid(), $this->dataset, GetCurrentUserPermissionsForPage('Batches.Brews'), 'UTF-8');
            $detailPage->SetRecordPermission(GetCurrentUserRecordPermissionsForDataSource('Batches.Brews'));
            $detailPage->SetHttpHandlerName('Batches_Brews_handler');
            $handler = new PageHTTPHandler('Batches_Brews_handler', $detailPage);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $detailPage = new Batches_InventoryActivitiesPage('Batches_InventoryActivities', $this, array('Batch'), array('Batch'), $this->GetForeignKeyFields(), $this->CreateMasterDetailRecordGrid(), $this->dataset, GetCurrentUserPermissionsForPage('Batches.InventoryActivities'), 'UTF-8');
            $detailPage->SetRecordPermission(GetCurrentUserRecordPermissionsForDataSource('Batches.InventoryActivities'));
            $detailPage->SetHttpHandlerName('Batches_InventoryActivities_handler');
            $handler = new PageHTTPHandler('Batches_InventoryActivities_handler', $detailPage);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $detailPage = new Batches_TankLogsPage('Batches_TankLogs', $this, array('Batch'), array('Batch'), $this->GetForeignKeyFields(), $this->CreateMasterDetailRecordGrid(), $this->dataset, GetCurrentUserPermissionsForPage('Batches.TankLogs'), 'UTF-8');
            $detailPage->SetRecordPermission(GetCurrentUserRecordPermissionsForDataSource('Batches.TankLogs'));
            $detailPage->SetHttpHandlerName('Batches_TankLogs_handler');
            $handler = new PageHTTPHandler('Batches_TankLogs_handler', $detailPage);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'insert_Batches_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'filter_builder_Batches_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
            
            $lookupDataset = new TableDataset(
                MySqlIConnectionFactory::getInstance(),
                GetConnectionOptions(),
                '`Templates`');
            $lookupDataset->addFields(
                array(
                    new IntegerField('id', true, true, true),
                    new DateTimeField('updated', true),
                    new StringField('Template', true, true),
                    new StringField('Brand/Name', true),
                    new StringField('Style'),
                    new IntegerField('Color'),
                    new IntegerField('IBU'),
                    new IntegerField('OG_Avg'),
                    new IntegerField('OG_Override'),
                    new IntegerField('OG_Eq'),
                    new IntegerField('ABV_Avg'),
                    new IntegerField('ABV_Avg_Dec'),
                    new IntegerField('ABV_Eq'),
                    new IntegerField('Attenuation_Override'),
                    new IntegerField('Attenuation_Override_Dec'),
                    new IntegerField('Attenuation_Avg'),
                    new IntegerField('Attenuation_Avg_Dec'),
                    new IntegerField('Attenuation_Eq'),
                    new IntegerField('FG_Eq'),
                    new StringField('Notes'),
                    new IntegerField('Batches')
                )
            );
            $lookupDataset->setOrderByField('id', 'ASC');
            $handler = new DynamicSearchHandler($lookupDataset, $this, 'multi_edit_Batches_Template_search', 'Template', 'id', null, 20);
            GetApplication()->RegisterHTTPHandler($handler);
        }
       
        protected function doCustomRenderColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderPrintColumn($fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomRenderExportColumn($exportType, $fieldName, $fieldData, $rowData, &$customText, &$handled)
        { 
    
        }
    
        protected function doCustomDrawRow($rowData, &$cellFontColor, &$cellFontSize, &$cellBgColor, &$cellItalicAttr, &$cellBoldAttr)
        {
    
        }
    
        protected function doExtendedCustomDrawRow($rowData, &$rowCellStyles, &$rowStyles, &$rowClasses, &$cellClasses)
        {
    
        }
    
        protected function doCustomRenderTotal($totalValue, $aggregate, $columnName, &$customText, &$handled)
        {
    
        }
    
        protected function doCustomDefaultValues(&$values, &$handled) 
        {
    
        }
    
        protected function doCustomCompareColumn($columnName, $valueA, $valueB, &$result)
        {
    
        }
    
        protected function doBeforeInsertRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeUpdateRecord($page, $oldRowData, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doBeforeDeleteRecord($page, &$rowData, $tableName, &$cancel, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterInsertRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterUpdateRecord($page, $oldRowData, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doAfterDeleteRecord($page, $rowData, $tableName, &$success, &$message, &$messageDisplayTime)
        {
    
        }
    
        protected function doCustomHTMLHeader($page, &$customHtmlHeaderText)
        { 
    
        }
    
        protected function doGetCustomTemplate($type, $part, $mode, &$result, &$params)
        {
    
        }
    
        protected function doGetCustomExportOptions(Page $page, $exportType, $rowData, &$options)
        {
    
        }
    
        protected function doFileUpload($fieldName, $rowData, &$result, &$accept, $originalFileName, $originalFileExtension, $fileSize, $tempFileName)
        {
    
        }
    
        protected function doPrepareChart(Chart $chart)
        {
    
        }
    
        protected function doPrepareColumnFilter(ColumnFilter $columnFilter)
        {
    
        }
    
        protected function doPrepareFilterBuilder(FilterBuilder $filterBuilder, FixedKeysArray $columns)
        {
    
        }
    
        protected function doGetSelectionFilters(FixedKeysArray $columns, &$result)
        {
    
        }
    
        protected function doGetCustomFormLayout($mode, FixedKeysArray $columns, FormLayout $layout)
        {
    
        }
    
        protected function doGetCustomColumnGroup(FixedKeysArray $columns, ViewColumnGroup $columnGroup)
        {
    
        }
    
        protected function doPageLoaded()
        {
    
        }
    
        protected function doCalculateFields($rowData, $fieldName, &$value)
        {
    
        }
    
        protected function doGetCustomRecordPermissions(Page $page, &$usingCondition, $rowData, &$allowEdit, &$allowDelete, &$mergeWithDefault, &$handled)
        {
    
        }
    
        protected function doAddEnvironmentVariables(Page $page, &$variables)
        {
    
        }
    
    }

    SetUpUserAuthorization();

    try
    {
        $Page = new BatchesPage("Batches", "Batches.php", GetCurrentUserPermissionsForPage("Batches"), 'UTF-8');
        $Page->SetRecordPermission(GetCurrentUserRecordPermissionsForDataSource("Batches"));
        GetApplication()->SetMainPage($Page);
        GetApplication()->Run();
    }
    catch(Exception $e)
    {
        ShowErrorPage($e);
    }
	
